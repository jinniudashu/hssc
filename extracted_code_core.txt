==== models.py ====

from django.db import models
from django.db.models import Q
from django.db.models.query import QuerySet
from django.shortcuts import reverse
from django.contrib.auth.models import User
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes.fields import GenericForeignKey
from django.utils.text import slugify

from django.utils import timezone
import datetime
from time import time
from enum import Enum

from rest_framework.utils.encoders import JSONEncoder
from pypinyin import lazy_pinyin

from icpc.models import *
from core.hsscbase_class import HsscBase, HsscPymBase


# **********************************************************************************************************************
# Service配置 Model
# **********************************************************************************************************************
# 角色表
class Role(HsscPymBase):
    description = models.CharField(max_length=255, blank=True, null=True, verbose_name="岗位描述")

    class Meta:
        verbose_name = "业务岗位"
        verbose_name_plural = verbose_name
        ordering = ['id']


# 业务表单定义
class BuessinessForm(HsscPymBase):
    name_icpc = models.OneToOneField(Icpc, on_delete=models.CASCADE, blank=True, null=True, verbose_name="ICPC编码")
    description = models.TextField(max_length=255, null=True, blank=True, verbose_name="表单说明")
    api_fields = models.JSONField(null=True, blank=True, verbose_name="API字段")
    
    class Meta:
        verbose_name = '业务表单'
        verbose_name_plural = verbose_name


# 管理实体定义
class ManagedEntity(HsscPymBase):
    app_name = models.CharField(max_length=100, null=True, blank=True, verbose_name="所属app名")
    model_name = models.CharField(max_length=100, null=True, blank=True, verbose_name="模型名")
    base_form = models.OneToOneField(BuessinessForm, on_delete=models.SET_NULL, null=True, verbose_name="基础表单")
    header_fields_json = models.JSONField(null=True, blank=True, verbose_name="表头字段json")

    class Meta:
        verbose_name = "业务管理实体"
        verbose_name_plural = verbose_name


# 作业基础信息表
class Service(HsscPymBase):
    name_icpc = models.OneToOneField(Icpc, on_delete=models.CASCADE, blank=True, null=True, verbose_name="ICPC编码")
    buessiness_forms = models.ManyToManyField(BuessinessForm, through='BuessinessFormsSetting', verbose_name="作业表单")
    managed_entity = models.ForeignKey(ManagedEntity, on_delete=models.CASCADE, null=True, verbose_name="管理实体")
    Operation_priority = [(0, '0级'), (1, '紧急'), (2, '优先'), (3, '一般')]
    priority = models.PositiveSmallIntegerField(choices=Operation_priority, default=3, verbose_name='优先级')
    Service_type = [(0, '系统基础服务'), (1, '系统业务服务'), (2, '用户业务服务')]
    service_type = models.PositiveSmallIntegerField(choices=Service_type, default=2, verbose_name='服务类型')
    role = models.ManyToManyField(Role, blank=True, verbose_name="服务岗位")
    History_services_display=[(0, '所有历史服务'), (1, '当日服务')]
    history_services_display = models.PositiveBigIntegerField(choices=History_services_display, default=0, blank=True, null=True, verbose_name='历史服务默认显示')
    enable_queue_counter = models.BooleanField(default=True, verbose_name='显示队列数量')
    Route_to = [('INDEX', '任务工作台'), ('CUSTOMER_HOMEPAGE', '客户病例首页')]
    route_to = models.CharField(max_length=50, choices=Route_to, default='CUSTOMER_HOMEPAGE', blank=True, null=True, verbose_name='完成跳转至')
    suppliers = models.CharField(max_length=255, blank=True, null=True, verbose_name="供应商")
    not_suitable = models.CharField(max_length=255, blank=True, null=True, verbose_name='不适用对象')
    overtime = models.DurationField(blank=True, null=True, verbose_name='超期时限')
    working_hours = models.DurationField(blank=True, null=True, verbose_name='工时')
    frequency = models.CharField(max_length=255, blank=True, null=True, verbose_name='频次')
    cost = models.DecimalField(blank=True, null=True, max_digits=9, decimal_places=2, verbose_name='成本')
    load_feedback = models.BooleanField(default=False, verbose_name='是否反馈负荷数量')
    resource_materials = models.CharField(max_length=255, blank=True, null=True, verbose_name='配套物料')
    resource_devices = models.CharField(max_length=255, blank=True, null=True, verbose_name='配套设备')
    resource_knowledge = models.CharField(max_length=255, blank=True, null=True, verbose_name='服务知识')

    class Meta:
        verbose_name = "服务"
        verbose_name_plural = verbose_name
        ordering = ['id']

    def __str__(self):
        return str(self.label)

    def save(self, *args, **kwargs):
        if self.name_icpc is not None:
            self.name = self.name_icpc.icpc_code
            self.label = self.name_icpc.iname
        if self.name is None or self.name == '':
            self.name = f'{"_".join(lazy_pinyin(self.label))}'
        super().save(*args, **kwargs)
    

class BuessinessFormsSetting(HsscBase):
    service = models.ForeignKey(Service, on_delete=models.CASCADE, verbose_name="作业")
    buessiness_form = models.ForeignKey(BuessinessForm, on_delete=models.CASCADE, verbose_name="表单")
    is_list = models.BooleanField(default=False, verbose_name="列表样式")

    class Meta:
        verbose_name = '作业表单设置'
        verbose_name_plural = verbose_name
        ordering = ['id']


# 服务包类型信息表
class ServicePackage(HsscPymBase):
    name_icpc = models.OneToOneField(Icpc, on_delete=models.CASCADE, blank=True, null=True, verbose_name="ICPC编码")

    class Meta:
        verbose_name = "服务包"
        verbose_name_plural = verbose_name
        ordering = ['id']

class CycleUnit(HsscPymBase):
    cycle_unit = models.CharField(max_length=255, blank=True, null=True, verbose_name='周期单位')
    days = models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='天数')
    class Meta:
        verbose_name = "服务周期单位"
        verbose_name_plural = verbose_name

class ServicePackageDetail(HsscPymBase):
    order = models.PositiveSmallIntegerField(default=100, verbose_name='顺序')
    servicepackage = models.ForeignKey(ServicePackage, on_delete=models.CASCADE, verbose_name='服务包')
    service = models.ForeignKey(Service, on_delete=models.CASCADE, null=True, verbose_name='服务项目')
    cycle_unit = models.ForeignKey(CycleUnit, on_delete=models.CASCADE, default=1, blank=True, null=True, verbose_name='周期单位')
    cycle_frequency = models.PositiveSmallIntegerField(blank=True, null=True, default=1, verbose_name="每周期频次")
    cycle_times = models.PositiveSmallIntegerField(blank=True, null=True, default=1, verbose_name="天数")
    Default_beginning_time = [(1, '当前系统时间'), (2, '首个服务开始时间'), (3, '上个服务结束时间'), (4, '客户出生日期')]
    default_beginning_time = models.PositiveSmallIntegerField(choices=Default_beginning_time, default=1, verbose_name='执行时间基准')
    base_interval = models.DurationField(blank=True, null=True, verbose_name='基准间隔', help_text='例如：3 days, 22:00:00')

    class Meta:
        verbose_name = "服务内容模板"
        verbose_name_plural = verbose_name
        ordering = ['order']

    def __str__(self):
        return str(self.service)


# 系统作业指令表
class SystemOperand(HsscBase):
    func = models.CharField(max_length=255, blank=True, null=True, verbose_name="内部实现函数")
    parameters = models.CharField(max_length=255, blank=True, null=True, verbose_name="参数")
    description = models.CharField(max_length=255, blank=True, null=True, verbose_name="描述")
    Applicable = [(0, '作业'), (1, '单元服务'), (2, '服务包'), (3, '全部')]
    applicable = models.PositiveSmallIntegerField(choices=Applicable, default=1, verbose_name='适用范围')

    class Meta:
        verbose_name = '系统自动作业'
        verbose_name_plural = verbose_name
        ordering = ['id']

    def __str__(self):
        return self.label


# 事件规则表
class EventRule(HsscBase):
    description = models.TextField(max_length=255, blank=True, null=True, verbose_name="表达式")
    Detection_scope = [('ALL', '所有历史表单'), ('CURRENT_SERVICE', '本次服务表单'), ('LAST_WEEK_SERVICES', '过去7天表单')]
    detection_scope = models.CharField(max_length=100, choices=Detection_scope, default='CURRENT_SERVICE', blank=True, null=True, verbose_name='检测范围')
    weight = models.PositiveSmallIntegerField(blank=True, null=True, default=1, verbose_name="权重")
    expression = models.TextField(max_length=1024, blank=True, null=True, verbose_name="内部表达式")
    expression_fields = models.CharField(max_length=1024, blank=True, null=True, verbose_name="内部表达式字段")

    class Meta:
        verbose_name = '条件事件'
        verbose_name_plural = verbose_name
        ordering = ['id']


# 服务规则库
class ServiceRule(HsscBase):
    service = models.ForeignKey(Service, on_delete=models.CASCADE, null=True, verbose_name='服务项目')
    event_rule = models.ForeignKey(EventRule, on_delete=models.CASCADE,  blank=True, null=True, verbose_name='条件事件')
    system_operand = models.ForeignKey(SystemOperand, on_delete=models.CASCADE, blank=True, null=True, verbose_name='系统作业')
    next_service = models.ForeignKey(Service, on_delete=models.CASCADE, blank=True, null=True, related_name='next_service', verbose_name='后续服务')
    Receive_form = [(0, '否'), (1, '接收，不可编辑'), (2, '接收，可以编辑')]  # 接收表单数据
    passing_data = models.PositiveSmallIntegerField(choices=Receive_form, default=0,  blank=True, null=True, verbose_name='接收表单')
    Complete_feedback = [(0, '否'), (1, '返回完成状态'), (2, '返回表单')]
    complete_feedback = models.PositiveSmallIntegerField(choices=Complete_feedback, default=0,  blank=True, null=True, verbose_name='完成反馈')
    Reminders = [(0, '客户'), (1, '服务人员'), (2, '服务小组')]
    reminders = models.PositiveSmallIntegerField(choices=Reminders, default=0,  blank=True, null=True, verbose_name='提醒对象')
    message = models.CharField(max_length=512, blank=True, null=True, verbose_name='消息内容')
    Interval_rule_options = [(0, '等于'), (1, '小于'), (2, '大于')]
    interval_rule = models.PositiveSmallIntegerField(choices=Interval_rule_options, blank=True, null=True, verbose_name='间隔条件')
    interval_time = models.DurationField(blank=True, null=True, verbose_name="间隔时间", help_text='例如：3 days, 22:00:00')
    is_active = models.BooleanField(choices=[(False, '否'), (True, '是')], default=True, verbose_name='启用')

    class Meta:
        verbose_name = '服务规则'
        verbose_name_plural = verbose_name
        ordering = ['id']

    def __str__(self):
        return str(self.service)


class ContractService(HsscPymBase):
    is_active = models.BooleanField(default=True, verbose_name='启用')
    is_deleted = models.BooleanField(default=False, verbose_name='删除')
    created_time = models.DateTimeField(auto_now_add=True, verbose_name='创建时间')
    updated_time = models.DateTimeField(auto_now=True, verbose_name='更新时间')

    class Meta:
        verbose_name = '合约服务'
        verbose_name_plural = verbose_name
        ordering = ['id']

    def __str__(self):
        return str(self.label)


class ExternalServiceMapping(HsscBase):
    external_form_id = models.CharField(max_length=100, null=True, blank=True, verbose_name="外部表单标识")
    external_form_name = models.CharField(max_length=100, null=True, blank=True, verbose_name="外部表单名称")
    Form_source = [('jinshuju', '金数据'), ('other', '其它')]
    form_source = models.CharField(max_length=50, choices=Form_source, null=True, blank=True, verbose_name="来源名称")
    service = models.OneToOneField(Service, on_delete=models.CASCADE, null=True, blank=True, verbose_name="对应服务")
    fields_mapping = models.JSONField(null=True, blank=True, verbose_name="字段映射")

    class Meta:
        verbose_name = '外部服务映射'
        verbose_name_plural = verbose_name

    def __str__(self):
        return str(self.external_form_name)

# **********************************************************************************************************************
# Service进程管理Model
# **********************************************************************************************************************

# 服务进程表 ServiceProc
class ContractServiceProc(HsscBase):
    contract_service = models.ForeignKey(ContractService, on_delete=models.CASCADE, verbose_name="合约服务")
    customer = models.ForeignKey('Customer', on_delete=models.SET_NULL, blank=True, null=True, related_name='service_proc_customer', verbose_name="客户")  # 客户id: cid
    creater = models.ForeignKey('Customer', on_delete=models.SET_NULL, blank=True, null=True, related_name='service_proc_creater', verbose_name="创建者")  # 创建者id: cid
    current_service = models.ForeignKey(Service, on_delete=models.SET_NULL, blank=True, null=True, verbose_name="作业状态")
    Operation_priority = [(0, '0级'), (1, '紧急'), (2, '优先'), (3, '一般')]
    priority = models.PositiveSmallIntegerField(choices=Operation_priority, default=3, verbose_name="优先级")

    class Meta:
        verbose_name = "合约服务进程"
        verbose_name_plural = verbose_name
        ordering = ['id']

    def __str__(self):
        return self.customer.name


class OperationProcManager(models.Manager):
    def get_service_queue_count(self, service):
        return self.filter(service=service).exclude(state=4).count()

    def get_unassigned_proc(self, operator):
	# 获取待分配作业进程: 状态为创建，且未分配操作员，服务岗位为操作员所属岗位，以及用户服务小组为操作员所属服务小组
        return self.filter(state=0, operator=None, service__in=Service.objects.filter(role__in=operator.staff.role.all()),)
    
# 作业进程表 OperationProc
class OperationProc(HsscBase):
    # 作业进程id: pid
    service = models.ForeignKey(Service, on_delete=models.CASCADE, null=True, verbose_name="服务")  # 作业id: oid
    operator = models.ForeignKey('Customer', on_delete=models.SET_NULL, blank=True, null=True, related_name='operation_proc_operator', verbose_name="操作员")  # 作业员id: uid
    customer = models.ForeignKey('Customer', on_delete=models.SET_NULL, blank=True, null=True, related_name='operation_proc_customer', verbose_name="客户")  # 客户id: cid
    creater = models.ForeignKey('Customer', on_delete=models.SET_NULL, blank=True, null=True, related_name='operation_proc_creater', verbose_name="创建者")  # 创建者id: cid
    role = models.ManyToManyField(Role, blank=True, verbose_name="作业岗位")
	# 作业状态: state
    Operation_proc_state = [(0, '创建'), (1, '就绪'), (2, '运行'), (3, '挂起'), (4, '结束'), (10, '等待超时')]
    state = models.PositiveSmallIntegerField(choices=Operation_proc_state, verbose_name="作业状态")
    priority = models.PositiveSmallIntegerField(choices=[(0, '0级'), (1, '紧急'), (2, '优先'), (3, '一般')], default=3, verbose_name="优先级")
    entry = models.CharField(max_length=250, blank=True, null=True, db_index=True, verbose_name="作业入口")  # 作业入口: /clinic/service/model_name/model_id/change
    parent_proc = models.ForeignKey('self', on_delete=models.SET_NULL, blank=True, null=True, verbose_name="父进程")  # 父作业进程id: ppid
    contract_service_proc = models.ForeignKey(ContractServiceProc, on_delete=models.SET_NULL, blank=True, null=True, verbose_name="服务进程")  # 服务进程id: spid
    form_slugs = models.JSONField(blank=True, null=True, verbose_name="表单索引")
    scheduled_time = models.DateTimeField(blank=True, null=True, verbose_name="计划执行时间")
    overtime = models.DurationField(blank=True, null=True, verbose_name='超期时限')
    working_hours = models.DurationField(blank=True, null=True, verbose_name='工时')
    acceptance_timeout = models.BooleanField(default=False, blank=True, null=True, verbose_name="受理超时")
    completion_timeout = models.BooleanField(default=False, blank=True, null=True, verbose_name="完成超时")
    created_time = models.DateTimeField(editable=False, null=True, verbose_name="创建时间")
    updated_time = models.DateTimeField(editable=False, null=True, verbose_name="修改时间")
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE, limit_choices_to=Q(app_label='service') , null=True, blank=True)
    object_id = models.PositiveIntegerField(null=True, blank=True)
    content_object = GenericForeignKey('content_type', 'object_id')
    objects = OperationProcManager()

    class Meta:
        verbose_name = "作业进程"
        verbose_name_plural = "作业进程"
        ordering = ['id']

    def __str__(self):
		# return 作业名称
        return self.service.label

    def save(self, *args, **kwargs):
        ''' On save, update timestamps '''
        if not self.id:
            self.created_time = timezone.now()
        self.modified_time = timezone.now()
        if not self.name:
            self.name = self.service.label
        return super().save(*args, **kwargs)

    def get_absolute_url(self):
        # 返回作业入口url
        return self.entry

    def set_operator(self, operator):
        # 设置作业进程操作员
        self.operator = operator
        self.save()

    def update_state(self, ocode):
        #作业进程状态机操作码ocode
        class OperationCode(Enum):
            CRE = 0  # CREATE
            CTR = 1  # CREATED TO READY
            RTR = 2  # READY TO RUNNING
            RTH = 3  # RUNNING TO HANGUP
            HTR = 1  # HANGUP TO READY
            RTC = 4  # RUNNING TO COMPLETED
        self.state = OperationCode[ocode].value
        self.save()

        # 更新作业进程对应的职员任务队列状态
        if self.stafftodo:
            self.stafftodo.state = 4
            self.stafftodo.save()
    


class StaffTodoManager(models.Manager):
	# 当天常规任务
    def today_todos(self, operator):
        today = timezone.now().date()
        return self.filter(
            operator=operator, 
            priority=3,
            scheduled_time__year=int(today.strftime('%Y')),
            scheduled_time__month=int(today.strftime('%m')),
            scheduled_time__day=int(today.strftime('%d')),
            ).exclude(state=4)
        
	# 紧要任务安排
    def urgent_todos(self, operator):
        return self.filter(operator=operator, priority__lt=3).exclude(state=4).order_by('priority')

	# 未来七天任务
    def week_todos(self, operator):
        startTime = timezone.now() + datetime.timedelta(days=1)
        endTime = timezone.now() + datetime.timedelta(days=7)
        return self.filter(
            operator=operator, 
            priority=3, 
            # scheduled_time__year=int(today.strftime('%Y')),
            # scheduled_time__week=int(today.strftime('%W')),
            scheduled_time__range=(startTime, endTime),
            ).exclude(state=4)

class StaffTodo(HsscBase):
    operation_proc = models.OneToOneField(OperationProc, on_delete=models.CASCADE, verbose_name="作业进程")
    operator = models.ForeignKey('Customer', on_delete=models.SET_NULL, blank=True, null=True, verbose_name="操作员")
    scheduled_time = models.DateTimeField(blank=True, null=True, verbose_name="计划执行时间")
    Operation_proc_state = [(0, '创建'), (1, '就绪'), (2, '运行'), (3, '挂起'), (4, '结束')]
    state = models.PositiveSmallIntegerField(choices=Operation_proc_state, verbose_name="作业状态")
    customer_number = models.CharField(max_length=250, blank=True, null=True, verbose_name="居民档案号")
    customer_name = models.CharField(max_length=250, blank=True, null=True, verbose_name="姓名")
    service_label = models.CharField(max_length=250, blank=True, null=True, verbose_name="服务项目")
    customer_phone = models.CharField(max_length=250, blank=True, null=True, verbose_name="联系电话")
    customer_address = models.CharField(max_length=250, blank=True, null=True, verbose_name="家庭地址")
    priority = models.PositiveSmallIntegerField(choices=[(0, '0级'), (1, '紧急'), (2, '优先'), (3, '一般')], default=3, verbose_name="优先级")
    objects = StaffTodoManager()

    class Meta:
        verbose_name = "员工任务清单"
        verbose_name_plural = verbose_name
        ordering = ['id']

    def __str__(self):
        return self.service_label

    def save(self, *args, **kwargs):
        if not self.label:
            self.label = f'{self.customer_name} - {self.service_label}'
        return super().save(*args, **kwargs)


# 用户基本信息
class Customer(HsscBase):
    user = models.OneToOneField(User, on_delete=models.CASCADE, verbose_name='客户')
    name = models.CharField(max_length=50, verbose_name="姓名")
    phone = models.CharField(max_length=20, blank=True, null=True, verbose_name="电话")
    address = models.CharField(max_length=255, blank=True, null=True, verbose_name="地址")
    charge_staff = models.ForeignKey('self', on_delete=models.SET_NULL, blank=True, null=True, verbose_name='负责人')
    workgroup = models.ForeignKey('Workgroup', on_delete=models.SET_NULL, blank=True, null=True, related_name='customer_workgroup', verbose_name='服务小组')
    health_record = models.JSONField(blank=True, null=True, verbose_name="健康记录")
    weixin_openid = models.CharField(max_length=255, blank=True, null=True, verbose_name="微信openid")


    class Meta:
        verbose_name = "客户注册信息"
        verbose_name_plural = "客户注册信息"

    def __str__(self):
        return str(self.name)

    def natural_key(self):
        return self.name

    def save(self, *args, **kwargs):
        if not self.label:
            self.label = self.name
        super().save(*args, **kwargs)

    def get_history_services(self) -> 'QuerySet[OperationProc]':
        '''
        获取客户历史服务列表
        '''
        return self.operation_proc_customer.filter(state=4).exclude(service__in=Service.objects.filter(service_type=0))

    def get_recommended_services(self) -> 'QuerySet[RecommendedService]':
        '''
        获取客户推荐服务列表
        '''
        return self.recommended_service_customer.all()

    def get_scheduled_services(self) -> 'QuerySet[OperationProc]':
        '''
        获取已安排服务列表
        '''
        return self.operation_proc_customer.filter(state__in = [0, 1, 2, 3])

    def get_absolute_url(self):
        return reverse('customer_homepage', args=[self.id])


class Institution(HsscBase):
    class Meta:
        verbose_name = "机构"
        verbose_name_plural = verbose_name
        ordering = ['id']

    def __str__(self):
        return str(self.label)

    def save(self, *args, **kwargs):
        if not self.name:
            self.name = f'{"_".join(lazy_pinyin(self.label))}'
        super().save(*args, **kwargs)


# 职员基本信息
class Staff(HsscBase):
    customer = models.OneToOneField(Customer, on_delete=models.CASCADE, null=True, verbose_name='员工')
    role = models.ManyToManyField(Role, related_name='staff_role', verbose_name='角色')
    email = models.EmailField(max_length=50)
    Title = [(i, i) for i in ['主任医师', '副主任医师', '主治医师', '住院医师', '主任护师', '副主任护师', '主管护师', '护士长', '护士', '其他']]
    title = models.PositiveSmallIntegerField(choices=Title, blank=True, null=True, verbose_name='职称')
    is_assistant_physician = models.BooleanField(blank=True, null=True, verbose_name='助理医师')
    resume = models.TextField(blank=True, null=True, verbose_name='简历')
    Service_Lever = [(i, i) for i in ['低', '中', '高']]
    service_lever = models.PositiveSmallIntegerField(choices=Service_Lever, blank=True, null=True, verbose_name='服务级别')
    registration_fee = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True, verbose_name='挂号费')
    standardized_workload = models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='标化工作量')
    institution = models.ForeignKey(Institution, on_delete=models.SET_NULL, blank=True, null=True, verbose_name="隶属机构")
    wecom_id = models.CharField(max_length=255, blank=True, null=True, verbose_name="企业微信id")

    class Meta:
        verbose_name = "员工基本信息"
        verbose_name_plural = verbose_name

    def __str__(self):
        return str(self.name)

    def save(self, *args, **kwargs):
        if not self.label:
            self.label = self.customer.label
        if not self.name:
            self.name = self.customer.name
        super().save(*args, **kwargs)


# 工作组
class Workgroup(HsscBase):
    leader = models.ForeignKey(Staff, on_delete=models.CASCADE, related_name='workgroup_customer', null=True, verbose_name='组长')
    members = models.ManyToManyField(Staff, related_name='workgroup_members', blank=True, verbose_name='组员')

    class Meta:
        verbose_name = "服务小组"
        verbose_name_plural = verbose_name
        ordering = ['id']

    def __str__(self):
        return str(self.label)

    def save(self, *args, **kwargs):
        if not self.name:
            self.name = f'{"_".join(lazy_pinyin(self.label))}'
        super().save(*args, **kwargs)


class CustomerServiceLogManager(models.Manager):
    def get_customer_service_log(self, customer, period=None):
        # 返回客户的给定时间段的服务日志
        if period:
            return self.filter(customer=customer, created_time__range=period).order_by('created_time')
        return self.filter(customer=customer)

# 客户健康记录
class CustomerServiceLog(HsscBase):
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE, blank=True, null=True, related_name='customer_service_log_customer', verbose_name="客户")
    operator = models.ForeignKey(Customer, on_delete=models.CASCADE, blank=True, null=True, related_name='customer_service_log_operator', verbose_name="操作员")
    creater = models.ForeignKey(Customer, on_delete=models.CASCADE, blank=True, null=True, related_name='customer_service_log_creater', verbose_name="创建者")
    pid = models.OneToOneField(OperationProc, on_delete=models.SET_NULL, blank=True, null=True, verbose_name="作业进程id")
    cpid = models.ForeignKey(ContractServiceProc, on_delete=models.SET_NULL, blank=True, null=True, verbose_name="服务进程id")
    slug = models.SlugField(max_length=250, blank=True, null=True, verbose_name="slug")
    created_time = models.DateTimeField(editable=False, null=True, verbose_name="创建时间")
    updated_time = models.DateTimeField(editable=False, null=True, verbose_name="更新时间")
    Log_category = [('Subjective', '主观资料'), ('ObjectiveO', '客观资料'), ('Assessment', '诊断与评价'), ('Plan', '治疗方案'), ('Management', '管理活动')]
    category = models.CharField(max_length=50, choices=Log_category , blank=True, null=True, verbose_name="记录类别")
    data = models.JSONField(blank=True, null=True, encoder=JSONEncoder, verbose_name="服务记录")

    logs = CustomerServiceLogManager()

    class Meta:
        verbose_name = "客户服务记录"
        verbose_name_plural = verbose_name
        ordering = ['created_time']

    def __str__(self):
        return f'{self.name}--{self.created_time}'

    def save(self, *args, **kwargs):
        ''' On save, update timestamps '''
        if not self.created_time:
            self.created_time = timezone.now()
        self.updated_time = timezone.now()

        return super().save(*args, **kwargs)


# 推荐服务
class RecommendedService(HsscBase):
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE, blank=True, null=True, related_name='recommended_service_customer', verbose_name="客户")
    operator = models.ForeignKey(Customer, on_delete=models.CASCADE, blank=True, null=True, related_name='recommended_service_operator', verbose_name="操作员")
    creater = models.ForeignKey(Customer, on_delete=models.CASCADE, blank=True, null=True, related_name='recommended_service_creater', verbose_name="创建者")
    pid = models.ForeignKey(OperationProc, on_delete=models.SET_NULL, blank=True, null=True, verbose_name="作业进程id")
    cpid = models.ForeignKey(ContractServiceProc, on_delete=models.SET_NULL, blank=True, null=True, verbose_name="服务进程id")
    slug = models.SlugField(max_length=250, blank=True, null=True, verbose_name="slug")
    created_time = models.DateTimeField(editable=False, null=True, verbose_name="创建时间")
    updated_time = models.DateTimeField(editable=False, null=True, verbose_name="更新时间")
    service = models.ForeignKey(Service, on_delete=models.CASCADE, null=True, verbose_name="推荐服务")
    counter = models.PositiveSmallIntegerField(default=0, verbose_name="推荐次数")
    Receive_form = [(0, '否'), (1, '接收，不可编辑'), (2, '接收，可以编辑')]  # 接收表单数据
    passing_data = models.PositiveSmallIntegerField(choices=Receive_form, default=0,  blank=True, null=True, verbose_name='接收表单')

    class Meta:
        verbose_name = "推荐服务"
        verbose_name_plural = verbose_name
        ordering = ['id']

    def __str__(self):
        return str(self.service.label)

    def save(self, *args, **kwargs):
        ''' On save, update timestamps '''
        if not self.created_time:
            self.created_time = timezone.now()
        self.updated_time = timezone.now()

        return super().save(*args, **kwargs)


class Message(HsscBase):
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE, blank=True, null=True, related_name='message_customer', verbose_name="客户")
    operator = models.ForeignKey(Customer, on_delete=models.CASCADE, blank=True, null=True, related_name='message_operator', verbose_name="操作员")
    creater = models.ForeignKey(Customer, on_delete=models.CASCADE, blank=True, null=True, related_name='message_creater', verbose_name="创建者")
    pid = models.ForeignKey(OperationProc, on_delete=models.SET_NULL, blank=True, null=True, verbose_name="作业进程id")
    cpid = models.ForeignKey(ContractServiceProc, on_delete=models.SET_NULL, blank=True, null=True, verbose_name="服务进程id")
    slug = models.SlugField(max_length=250, blank=True, null=True, verbose_name="slug")
    created_time = models.DateTimeField(editable=False, null=True, verbose_name="创建时间")
    updated_time = models.DateTimeField(editable=False, null=True, verbose_name="更新时间")
    message = models.CharField(max_length=512, blank=True, null=True, verbose_name="消息")
    has_read = models.BooleanField(default=False, verbose_name="是否已读")

    class Meta:
        verbose_name = "消息"
        verbose_name_plural = verbose_name
        ordering = ['id']

    def __str__(self):
        return str(self.message)

    def save(self, *args, **kwargs):
        ''' On save, update timestamps '''
        if not self.created_time:
            self.created_time = timezone.now()
        self.updated_time = timezone.now()

        return super().save(*args, **kwargs)


# 药品基本信息表
class Medicine(HsscPymBase):
    yp_code = models.CharField(max_length=10, null=True, verbose_name="药品编码")
    specification = models.CharField(max_length=100, null=True, verbose_name="规格")
    measure = models.CharField(max_length=30, null=True, verbose_name="单位")
    mz_price = models.DecimalField(max_digits=10, decimal_places=2, null=True, verbose_name="门诊参考单价")
    usage = models.CharField(max_length=60, null=True, verbose_name="用法")
    dosage = models.CharField(max_length=60, null=True, verbose_name="用量")
    type = models.CharField(max_length=40, null=True, verbose_name="药剂类型")
    yp_sort = models.CharField(max_length=60, null=True, verbose_name="药品分类名称")
    current_storage = models.DecimalField(max_digits=10, decimal_places=2, null=True, verbose_name="当前库存")
    cf_measure = models.CharField(max_length=30, null=True, verbose_name="处方计量单位")
    xs_measure = models.CharField(max_length=30, null=True, verbose_name="销售计量单位")
    cf_dosage = models.DecimalField(max_digits=10, decimal_places=2, null=True, verbose_name="常用单次处方用量(处方单位)")
    not_cfyp = models.BooleanField(default=False, verbose_name="非处方药标记")
    mzcf_price = models.DecimalField(max_digits=10, decimal_places=2, null=True, verbose_name="门诊处方价格")
    is_use = models.BooleanField(default=True, verbose_name="是否使用中")
    ypty_name = models.CharField(max_length=200, null=True, verbose_name="药品通用名称")
    gjjbyp = models.CharField(max_length=100, null=True, verbose_name="国家基本药品目录名称")
    ybypbm = models.CharField(max_length=100, null=True, verbose_name="医保药品目录对应药品编码")
    ybyplb = models.CharField(max_length=2, null=True, verbose_name="药品报销类别（甲类、乙类）")

    class Meta:
        verbose_name = "药品基本信息表"
        verbose_name_plural = verbose_name
        ordering = ['id']

    def __str__(self):
        return self.label


class HsscFormModel(HsscBase):
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE, blank=True, null=True, related_name='%(class)s_customer', verbose_name="客户")
    operator = models.ForeignKey(Customer, on_delete=models.CASCADE, blank=True, null=True, related_name='%(class)s_operator', verbose_name="操作员")
    creater = models.ForeignKey(Customer, on_delete=models.CASCADE, blank=True, null=True, related_name='%(class)s_creater', verbose_name="创建者")
    pid = models.ForeignKey(OperationProc, on_delete=models.SET_NULL, blank=True, null=True, related_name='%(class)s_pid', verbose_name="作业进程id")
    cpid = models.ForeignKey(ContractServiceProc, on_delete=models.SET_NULL, blank=True, null=True, related_name='%(class)s_sid', verbose_name="服务进程id")
    slug = models.SlugField(max_length=250, blank=True, null=True, verbose_name="slug")
    created_time = models.DateTimeField(editable=False, null=True, verbose_name="创建时间")
    updated_time = models.DateTimeField(editable=False, null=True, verbose_name="更新时间")

    class Meta:
        abstract = True

    def save(self, *args, **kwargs):
        ''' On save, update timestamps '''
        if not self.id:
            self.slug = slugify(self._meta.model_name, allow_unicode=True) + f'-{int(time())}'
        if not self.created_time:
            self.created_time = timezone.now()
        self.updated_time = timezone.now()

        # 检查label字段，如果为空，则将label赋值为verbose_name和customer.name的组合，以'-'分隔
        if not self.label:
            self.label = f"{self._meta.verbose_name}-{self.customer.name}"
        if not self.name:
            self.name = f"{type(self).__name__}-{self.hssc_id}"

        return super().save(*args, **kwargs)

    def get_autocomplete_fields(self):
        autocompelte_fields_name=[]
        for field in self.__class__._meta.get_fields():
            if (field.one_to_one or field.many_to_one):  # 一对一、多对一字段
                autocompelte_fields_name.append(field.name)
        return autocompelte_fields_name

    def get_absolute_url(self):
        return reverse(f'{self.__class__.__name__}_detail_url', kwargs={'slug':self.slug})


# 保险服务专用
# 承保人员清单
class ChengBaoRenYuanQingDan(models.Model):
    序号=models.CharField(max_length=255, blank=True, null=True, verbose_name="序号")
    保单号=models.CharField(max_length=255, blank=True, null=True, verbose_name="保单号")
    被保人姓名=models.CharField(max_length=255, blank=True, null=True, verbose_name="被保人姓名")
    证件类型=models.CharField(max_length=255, blank=True, null=True, verbose_name="证件类型")
    身份证号=models.CharField(max_length=255, blank=True, null=True, verbose_name="身份证号")
    出生日期=models.CharField(max_length=255, blank=True, null=True, verbose_name="出生日期")
    保险责任=models.CharField(max_length=255, blank=True, null=True, verbose_name="保险责任")
    保险有效期=models.CharField(max_length=255, blank=True, null=True, verbose_name="保险有效期")
    联系方式=models.CharField(max_length=255, blank=True, null=True, verbose_name="联系方式")

    class Meta:
        verbose_name = "导入表-承保人员清单"
        verbose_name_plural = verbose_name
        ordering = ['id']

    def __str__(self):
        return str(self.被保人姓名)


# **********************************************************************************************************************
# 业务数据备份
# **********************************************************************************************************************
class BackupData(models.Model):
    name = models.CharField(max_length=255, unique=True, null=True, verbose_name="版本")
    label = models.CharField(max_length=255, null=True, blank=True, verbose_name="版本名称")
    code = models.TextField(null=True, verbose_name="源代码")
    description = models.TextField(max_length=255, verbose_name="描述", null=True, blank=True)
    create_time = models.DateTimeField(auto_now_add=True, verbose_name="创建时间")  

    class Meta:
        verbose_name = "业务数据备份"
        verbose_name_plural = verbose_name
        ordering = ['id']

    def __str__(self):
        return str(self.create_time)


==== views.py ====

from urllib import response
from django.http import HttpResponse, JsonResponse
from django.shortcuts import render, redirect
from django.urls import reverse
from django.contrib.auth.models import User
from django.contrib.contenttypes.models import ContentType
from django.utils import timezone
from django.db.models import Q

from enum import Enum
from requests import Response

from django_celery_beat.models import PeriodicTask, CrontabSchedule

from core.models import Service, ServicePackage, Customer, OperationProc, RecommendedService

from dictionaries.models import *
from service.models import *


def index_customer(request):
    context = {}
    customer = Customer.objects.get(user=request.user)
    context ['customer'] = customer.name
    # 获取当前用户所属的所有作业进程
    procs = OperationProc.objects.exclude(state=4).filter(customer=customer)
    todos = []
    for proc in procs:
        todo = {}
        todo['service'] = proc.service.label
        todos.append(todo)
    context['todos'] = todos

    return render(request, 'index_customer.html', context)


from django.views.decorators.csrf import csrf_exempt
@csrf_exempt
def jinshuju_post(request, **kwargs):
    # 测试接口
    import json
    from django.core.exceptions import ObjectDoesNotExist
    from core.models import ExternalServiceMapping    
    from core.utils import get_customer_status
    from core.business_functions import create_service_proc
    from core.signals import operand_finished
    from core.hsscbase_class import FieldsType
    # xmlhttp.setRequestHeader("Content-type","application/json")

    def _convert_type(_type, _value):
        # 将字符串转换为对应的类型
        if _type == 'Datetime':  # 日期时间类型
            from datetime import datetime
            # 把_value从字符串转换为datetime类型
            _value = datetime.strptime(_value, '%Y-%m-%d %H:%M')
            return _value
        elif _type == 'Numbers':  # 数字类型
            return float(_value)
        elif _type == 'String':  # 字符串类型
            return _value
        else:  # 如果字段类型是关联类型，返回对应字典实例对象
            # 如果是外键关联类型，返回对应的字典实例对象
            model = eval(_type.split('.')[1]).objects.get(value=_value)
            # 如果是多对多关联类型，返回对应的字典实例对象列表
            # model = eval(_type.split('.')[1]).objects.filter(value=_value)
            return model

    if(request.method == 'POST'):
        print("收到POST请求")
        postBody = request.body
        json_result = json.loads(postBody)
        print('Bodys:', json_result)

        # 接收到外部表单，查找用户服务状态，查找表单，复制表单内容，或创建错误日志
        external_form_id = json_result.get('form')
        entry = json_result.get('entry')
        weixin_openid = entry.get('x_field_weixin_openid')
        print('微信ID：', weixin_openid)

        # 1. 用微信OpenID获取用户服务状态
        customer, customer_service_status = get_customer_status(weixin_openid)

        # 2. 如果服务状态在服务期，则完成一个服务进程（创建服务进程，填写表单，置服务进程完成）
        if customer_service_status:
            # 用外部表单名称在表单映射表中查找内部对应表单，如果查到，则复制表单内容（待补充：如果没查到，则创建新的映射记录，并通知管理员补充映射表）
            try:
                mapping = ExternalServiceMapping.objects.get(external_form_id = external_form_id)
                _service = mapping.service
                model = eval(_service.name.capitalize())
                form = _service.buessiness_forms.first()
                print('查到映射记录：', mapping, _service.name, form)

                # 提取表单内容
                fields_mapping = json.loads(mapping.fields_mapping)
                print('fields_mapping:', fields_mapping)
                form_data = {}
                for field_map in fields_mapping:
                    (external_field, internal_field), = field_map.items()
                    # 查找内部表单字段类型，转换外部传入的字段值的格式                    
                    _type = eval(f'FieldsType.{internal_field}').value
                    _value = entry.get(external_field)                    
                    form_data[internal_field] = _convert_type(_type, _value)
                    print('内部字段：', internal_field, '类型：', _type, '转换后内容：', form_data[internal_field])

                print('表单数据：', form_data)

                # 新建mapping.service
                print('创建service:', _service, _service.name)
                # 准备新的服务作业进程参数
                content_type = ContentType.objects.get(app_label='service', model=_service.name.lower())
                proc_params = {}
                proc_params['service'] = _service
                proc_params['customer'] = customer
                proc_params['creater'] = customer
                proc_params['operator'] = customer
                proc_params['state'] = 0  # or 0 根据服务作业权限判断
                proc_params['scheduled_time'] = timezone.now() # or None 根据服务作业权限判断
                proc_params['content_type'] = content_type
                proc_params['passing_data'] = 3  # 传递表单数据：(0, '否'), (1, '接收，不可编辑', 复制父进程表单控制信息), (2, '接收，可以编辑', 复制父进程表单控制信息), (3, 复制form_data)
                proc_params['form_data'] = form_data

                # # 创建新的服务作业进程
                # new_proc = create_service_proc(**proc_params)
                # print('Debug: jinshuju_post: 创建新的服务作业进程：', new_proc, 'proc_params:', proc_params)

                # # 置服务进程完成
                # new_proc.update_state('RTC')

                # # 发送服务完成信号
                # print('发送操作完成信号, 收到金数据表单，form_data:', form_data)
                # operand_finished.send(sender=jinshuju_post, pid=new_proc, request=request, form_data=form_data)

            except ObjectDoesNotExist:
                pass

    response = HttpResponse()
    response.content = 'Hi, this is Jinshuju Test 127.0.0.1:8000'
    # response.status_code = 200 # 默认值是200
    return response


# # 微信消息接口
# from rest_framework.views import APIView
# import redis
# import requests
# import configparser

# r = redis.Redis(host='localhost', port=6379, db=1, decode_responses=True)  # 创建redis对象
# config = configparser.ConfigParser()
# config.read('config.ini', encoding="utf-8")
# wx_config = config.items("wechat")
# wx_config = dict(map(lambda x: [x[0], x[1]], wx_config))
# wx_config.update({"token_exp": int(wx_config.get("token_exp"))})


# class AccessToken(APIView):
#     def get(self, request):
#         access_token = r.get("access_token")  # 从redis中获取ACCESS_TOKEN
#         if not access_token:
#             appid = wx_config.get("appid")
#             appsecret = wx_config.get("appsecret")
#             token_api = wx_config.get("token_api")
#             exp = wx_config.get("token_exp")
#             api = token_api.format(appid=appid, secret=appsecret)
#             response = requests.get(api, headers=settings.HEADER).json()
#             access_token = response.get("access_token")
#             r.setex('access_token', exp, access_token)
#         return JsonResponse({"code": 1, "token": access_token})



# from wechatpy.utils import check_signature
# from wechatpy import parse_message, create_reply
# from wechatpy.exceptions import InvalidSignatureException


# class Message(APIView):
#     def get(self, request):
#         signature = request.GET.get('signature', '')
#         timestamp = request.GET.get('timestamp', '')
#         nonce = request.GET.get('nonce', '')
#         echostr = request.GET.get('echostr', '')
#         token = wx_config.get("token")
#         try:
#             check_signature(token, signature, timestamp, nonce)
#         except InvalidSignatureException:
#             echostr = '错误的请求'
#         response = HttpResponse(echostr)
#         return response

#     def post(self, request):
#         msg = parse_message(request.body)
#         wel_msg = "欢迎关注微信公众号：程序员9527"
#         openid = msg.source  # 获取用户openid
#         if msg.type == 'text':
#             reply = create_reply(content, msg)
#         elif msg.type == 'image':
#             reply = create_reply(content, msg)
#         elif msg.type == 'voice':
#             reply = create_reply(content, msg)
#         else:
#             reply = create_reply(content, msg)
#         if hasattr(msg, 'event') and msg.event == "subscribe":
#             print("用户关注", openid)
#         elif hasattr(msg, 'event') and msg.event == 'unsubscribe':
#             print("取消关注", openid)
#         response = HttpResponse(reply.render(), content_type="application/xml")
#         return response

==== urls.py ====

from django.urls import path
from django.conf.urls import url
from django.urls.resolvers import URLPattern
from .views import index_customer, jinshuju_post

# app_name = 'service'
urlpatterns = [	
	path('index_customer/', index_customer, name='index_customer'),
	path('jinshuju_post/', jinshuju_post, name='jinshuju_post'),
    # url("message/$", Message.as_view(), name='message'),
    # url("access/token/$", AccessToken.as_view(), name='token'),
]


==== settings.py ====

"""
Django settings for hssc project.

Generated by 'django-admin startproject' using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path
from .router import *

import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialise environment variables
env = environ.Env()
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALLOWED_HOSTS = ['127.0.0.1', 'dental.tpacn.com', 'dental.tpahn.com']
ALLOWED_HOSTS = ['127.0.0.1', 'clinic-test.tpacn.com', 'clinic-test.tpahn.com', 'clinic.tpacn.com', 'clinic.tpahn.com', ]

# Application definition

INSTALLED_APPS = [
    # 'grappelli',
    # 'django.contrib.sites',
    'registration',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'channels',
    # our apps
    'analytics',
    'core',
    'dictionaries',
    'icpc',
    'service',

    'hssc.apps.UniversalManagerApp',
    'rest_framework',
    'django_celery_results',
    'django_celery_beat',
    'import_export',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# AUTH_USER_MODEL = 'core.User'

ROOT_URLCONF = 'hssc.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'hssc.wsgi.application'
ASGI_APPLICATION = 'hssc.asgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    },
}

# import dj_database_url
# db_from_env = dj_database_url.config(conn_max_age=600, ssl_require=True)
# DATABASES['default'].update(db_from_env)

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'HOST': os.environ.get('DB_HOST'),
#         'NAME': os.environ.get('DB_NAME'),
#         'USER': os.environ.get('DB_USER'),
#         'PASSWORD': os.environ.get('DB_PASS'),
#     }
# }

DATABASE_ROUTERS = ['hssc.router.DatabaseRouter']

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            # "hosts": [env('REDIS_URL')],
            'hosts': ['redis://default:redispw@localhost:32768']
        },
    },
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

USE_TZ = True
# USE_TZ = False

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'

# 上传文件路径
MEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')
MEDIA_URL = '/uploads/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# django-registration-redux
ACCOUNT_ACTIVATION_DAYS = 7 # One-week activation window; you may, of course, use a different value.
REGISTRATION_AUTO_LOGIN = True # Automatically log the user in.
LOGIN_REDIRECT_URL = '/core/index_customer/' # The page you want users to arrive at after they successful log in
LOGIN_URL = 'accounts/login/' # The page users are directed to if they are not logged in,
SIMPLE_BACKEND_REDIRECT_URL = '/'

# APPEND_SLASH=False

# CELERY SETTINGS
# CELERY_BROKER_URL = env('REDIS_URL')
CELERY_BROKER_URL = 'redis://default:redispw@localhost:32768'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Shanghai'
CELERY_RESULT_BACKEND = 'django-db'
# CELERY BEAT SETTINGS
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
# CELERY 的启动工作数量设置
# CELERY_WORKER_CONCURRENCY = 2
# 每个worker执行了多少任务就会死掉，默认是无限
# CELERY_WORKER_MAX_TASKS_PER_CHILD = 200