
********************************************************************************
File: extract_django_code.py
********************************************************************************

import os

project_root = '/Users/miles/Documents/JiangNing/hssc/src'  # 项目根目录

output_file = os.path.join(project_root, 'extracted_code.txt')

with open(output_file, 'w') as output:
    for root, dirs, files in os.walk(project_root):
        if 'migrations' in dirs:
            dirs.remove('migrations')  # 忽略 migrations 目录

        for file in files:
            if file.endswith('.py'):
                file_path = os.path.join(root, file)
                relative_path = os.path.relpath(file_path, project_root)

                output.write(f"\n{'*' * 80}\n")
                output.write(f"File: {relative_path}\n")
                output.write(f"{'*' * 80}\n\n")

                with open(file_path, 'r') as input_file:
                    content = input_file.read()
                    output.write(content)

print(f"Extracted code saved to: {output_file}")

********************************************************************************
File: manage.py
********************************************************************************

#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hssc.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

********************************************************************************
File: icpc/models.py
********************************************************************************


from django.db import models
from django.dispatch import receiver
from django.db.models.signals import post_save, post_delete
from pypinyin import Style, lazy_pinyin


class IcpcBase(models.Model):
    icpc_code = models.CharField(max_length=5, unique=True, blank=True, null=True, verbose_name="icpc码")
    icode = models.CharField(max_length=3, blank=True, null=True, verbose_name="分类码")
    iname = models.CharField(max_length=255, blank=True, null=True, verbose_name="名称")
    iename = models.CharField(max_length=255, blank=True, null=True, verbose_name="English Name")
    include = models.CharField(max_length=1024, blank=True, null=True, verbose_name="包含")
    criteria = models.CharField(max_length=1024, blank=True, null=True, verbose_name="准则")
    exclude = models.CharField(max_length=1024, blank=True, null=True, verbose_name="排除")
    consider = models.CharField(max_length=1024, blank=True, null=True, verbose_name="考虑")
    icd10 = models.CharField(max_length=8, blank=True, null=True, verbose_name="ICD10")
    icpc2 = models.CharField(max_length=10, blank=True, null=True, verbose_name="ICPC2")
    note = models.CharField(max_length=1024, blank=True, null=True, verbose_name="备注")
    pym = models.CharField(max_length=255, blank=True, null=True, verbose_name="拼音码")

    class Meta:
        abstract = True

    def __str__(self):
        return str(self.iname)

    def natural_key(self):
        return self.iname


# ICPC子类抽象类
class IcpcSubBase(IcpcBase):
    def save(self, *args, **kwargs):
        if self.iname:
            self.pym = ''.join(lazy_pinyin(self.iname, style=Style.FIRST_LETTER))
        super().save(*args, **kwargs)

    class Meta:
        abstract = True


# ICPC总表
class Icpc(IcpcBase):
    subclass = models.CharField(max_length=255, blank=True, null=True, verbose_name="ICPC子类")

    class Meta:
        verbose_name = "ICPC总表"
        verbose_name_plural = verbose_name


class Icpc1_register_logins(IcpcSubBase):
    class Meta:
        verbose_name = '注册登录（行政管理）'
        verbose_name_plural = verbose_name


class Icpc2_reservation_investigations(IcpcSubBase):
    class Meta:
        verbose_name = '预约咨询调查（行政管理）'
        verbose_name_plural = verbose_name


class Icpc3_symptoms_and_problems(IcpcSubBase):
    class Meta:
        verbose_name = '症状和问题'
        verbose_name_plural = verbose_name


class Icpc4_physical_examination_and_tests(IcpcSubBase):
    class Meta:
        verbose_name = '体格和其他检查'
        verbose_name_plural = verbose_name


class Icpc5_evaluation_and_diagnoses(IcpcSubBase):
    class Meta:
        verbose_name = '评估和诊断'
        verbose_name_plural = verbose_name


class Icpc6_prescribe_medicines(IcpcSubBase):
    class Meta:
        verbose_name = '开药'
        verbose_name_plural = verbose_name


class Icpc7_treatments(IcpcSubBase):
    class Meta:
        verbose_name = '治疗'
        verbose_name_plural = verbose_name


class Icpc8_other_health_interventions(IcpcSubBase):
    class Meta:
        verbose_name = '其他健康干预'
        verbose_name_plural = verbose_name


class Icpc9_referral_consultations(IcpcSubBase):
    class Meta:
        verbose_name = '转诊会诊'
        verbose_name_plural = verbose_name


class Icpc10_test_results_and_statistics(IcpcSubBase):
    class Meta:
        verbose_name = '检查结果和统计'
        verbose_name_plural = verbose_name

@receiver(post_save, sender=Icpc1_register_logins, weak=True, dispatch_uid=None)
@receiver(post_save, sender=Icpc2_reservation_investigations, weak=True, dispatch_uid=None)
@receiver(post_save, sender=Icpc3_symptoms_and_problems, weak=True, dispatch_uid=None)
@receiver(post_save, sender=Icpc4_physical_examination_and_tests, weak=True, dispatch_uid=None)
@receiver(post_save, sender=Icpc5_evaluation_and_diagnoses, weak=True, dispatch_uid=None)
@receiver(post_save, sender=Icpc6_prescribe_medicines, weak=True, dispatch_uid=None)
@receiver(post_save, sender=Icpc7_treatments, weak=True, dispatch_uid=None)
@receiver(post_save, sender=Icpc8_other_health_interventions, weak=True, dispatch_uid=None)
@receiver(post_save, sender=Icpc9_referral_consultations, weak=True, dispatch_uid=None)
@receiver(post_save, sender=Icpc10_test_results_and_statistics, weak=True, dispatch_uid=None)
def icpc_post_save_handler(sender, instance, created, **kwargs):
	if created:
		Icpc.objects.create(
			icpc_code=instance.icpc_code,
			icode=instance.icode,
			iname=instance.iname,
			iename=instance.iename,
			include=instance.include,
			criteria=instance.criteria,
			exclude=instance.exclude,
			consider=instance.consider,
			icd10=instance.icd10,
			icpc2=instance.icpc2,
			note=instance.note,
			pym=instance.pym,
			subclass=instance._meta.object_name
		)
	else:
		Icpc.objects.filter(icpc_code=instance.icpc_code).update(
			icode=instance.icode,
			iname=instance.iname,
			iename=instance.iename,
			include=instance.include,
			criteria=instance.criteria,
			exclude=instance.exclude,
			consider=instance.consider,
			icd10=instance.icd10,
			icpc2=instance.icpc2,
			note=instance.note,
			pym=instance.pym,
			subclass=instance._meta.object_name
		)

@receiver(post_delete, sender=Icpc1_register_logins, weak=True, dispatch_uid=None)
@receiver(post_delete, sender=Icpc2_reservation_investigations, weak=True, dispatch_uid=None)
@receiver(post_delete, sender=Icpc3_symptoms_and_problems, weak=True, dispatch_uid=None)
@receiver(post_delete, sender=Icpc4_physical_examination_and_tests, weak=True, dispatch_uid=None)
@receiver(post_delete, sender=Icpc5_evaluation_and_diagnoses, weak=True, dispatch_uid=None)
@receiver(post_delete, sender=Icpc6_prescribe_medicines, weak=True, dispatch_uid=None)
@receiver(post_delete, sender=Icpc7_treatments, weak=True, dispatch_uid=None)
@receiver(post_delete, sender=Icpc8_other_health_interventions, weak=True, dispatch_uid=None)
@receiver(post_delete, sender=Icpc9_referral_consultations, weak=True, dispatch_uid=None)
@receiver(post_delete, sender=Icpc10_test_results_and_statistics, weak=True, dispatch_uid=None)
def icpc_post_delete_handler(sender, instance, **kwargs):
	Icpc.objects.filter(icpc_code=instance.icpc_code).delete()

********************************************************************************
File: icpc/serializers.py
********************************************************************************

from rest_framework import serializers
from .models import *

class Icpc1_register_loginsSerializer(serializers.ModelSerializer):
    class Meta:
        model = Icpc1_register_logins
        fields = 'iname'

class Icpc2_reservation_investigationsSerializer(serializers.ModelSerializer):
    class Meta:
        model = Icpc2_reservation_investigations
        fields = 'iname'

class Icpc3_symptoms_and_problemsSerializer(serializers.ModelSerializer):
    class Meta:
        model = Icpc3_symptoms_and_problems
        fields = 'iname'

class Icpc4_physical_examination_and_testsSerializer(serializers.ModelSerializer):
    class Meta:
        model = Icpc4_physical_examination_and_tests
        fields = 'iname'

class Icpc5_evaluation_and_diagnosesSerializer(serializers.ModelSerializer):
    class Meta:
        model = Icpc5_evaluation_and_diagnoses
        fields = 'iname'

class Icpc6_prescribe_medicinesSerializer(serializers.ModelSerializer):
    class Meta:
        model = Icpc6_prescribe_medicines
        fields = 'iname'

class Icpc7_treatmentsSerializer(serializers.ModelSerializer):
    class Meta:
        model = Icpc7_treatments
        fields = 'iname'

class Icpc8_other_health_interventionsSerializer(serializers.ModelSerializer):
    class Meta:
        model = Icpc8_other_health_interventions
        fields = 'iname'

class Icpc9_referral_consultationsSerializer(serializers.ModelSerializer):
    class Meta:
        model = Icpc9_referral_consultations
        fields = 'iname'

class Icpc10_test_results_and_statisticsSerializer(serializers.ModelSerializer):
    class Meta:
        model = Icpc10_test_results_and_statistics
        fields = 'iname'

********************************************************************************
File: icpc/__init__.py
********************************************************************************

from os import path
from django.apps import AppConfig
 
# VERBOSE_APP_NAME = "YOUR VERBOSE APP NAME HERE"
 
 
def get_current_app_name(file):
    return path.dirname(file).replace('\\', '/').split('/')[-1]
 
 
class AppVerboseNameConfig(AppConfig):
    name = get_current_app_name(__file__)
    verbose_name = u'ICPC编码'
 
 
default_app_config = get_current_app_name(__file__) + '.__init__.AppVerboseNameConfig'

********************************************************************************
File: icpc/apps.py
********************************************************************************

from django.apps import AppConfig


class IcpcConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'icpc'

********************************************************************************
File: icpc/forms.py
********************************************************************************


********************************************************************************
File: icpc/admin.py
********************************************************************************

from django.contrib import admin
from core.admin import clinic_site
from .models import *

@admin.register(Icpc)
class IcpcAdmin(admin.ModelAdmin):
    list_display = ["icpc_code", "icode", "iname", "pym", "subclass"]
    search_fields=["iname", "pym", "icpc_code", "icode"]
    ordering = ["icpc_code"]
    readonly_fields = ['icpc_code','icode','iname','iename','include','criteria','exclude','consider','icd10','icpc2','note','pym', 'subclass']
    actions = None

    def has_add_permission(self, request):
        return False
    def has_delete_permission(self, request, obj=None):
        return False

clinic_site.register(Icpc, IcpcAdmin)

class SubIcpcAdmin(admin.ModelAdmin):
    list_display = ["icpc_code", "icode", "iname", "pym"]
    search_fields=["iname", "pym", "icpc_code", "icode"]
    ordering = ["icpc_code"]
    readonly_fields = ['icpc_code','icode','iname','iename','include','criteria','exclude','consider','icd10','icpc2','note','pym']
    actions = None

    def has_add_permission(self, request):
        return False
    def has_delete_permission(self, request, obj=None):
        return False

admin.site.register(Icpc1_register_logins, SubIcpcAdmin)
clinic_site.register(Icpc1_register_logins, SubIcpcAdmin)

admin.site.register(Icpc2_reservation_investigations, SubIcpcAdmin)
clinic_site.register(Icpc2_reservation_investigations, SubIcpcAdmin)

admin.site.register(Icpc3_symptoms_and_problems, SubIcpcAdmin)
clinic_site.register(Icpc3_symptoms_and_problems, SubIcpcAdmin)

admin.site.register(Icpc4_physical_examination_and_tests, SubIcpcAdmin)
clinic_site.register(Icpc4_physical_examination_and_tests, SubIcpcAdmin)

admin.site.register(Icpc5_evaluation_and_diagnoses, SubIcpcAdmin)
clinic_site.register(Icpc5_evaluation_and_diagnoses, SubIcpcAdmin)

admin.site.register(Icpc6_prescribe_medicines, SubIcpcAdmin)
clinic_site.register(Icpc6_prescribe_medicines, SubIcpcAdmin)

admin.site.register(Icpc7_treatments, SubIcpcAdmin)
clinic_site.register(Icpc7_treatments, SubIcpcAdmin)

admin.site.register(Icpc8_other_health_interventions, SubIcpcAdmin)
clinic_site.register(Icpc8_other_health_interventions, SubIcpcAdmin)

admin.site.register(Icpc9_referral_consultations, SubIcpcAdmin)
clinic_site.register(Icpc9_referral_consultations, SubIcpcAdmin)

admin.site.register(Icpc10_test_results_and_statistics, SubIcpcAdmin)
clinic_site.register(Icpc10_test_results_and_statistics, SubIcpcAdmin)
********************************************************************************
File: icpc/tests.py
********************************************************************************

from django.test import TestCase

# Create your tests here.

********************************************************************************
File: icpc/views.py
********************************************************************************

from django.shortcuts import render
********************************************************************************
File: core/signals.py
********************************************************************************

from django.dispatch import Signal


operand_started = Signal(providing_args=['pid', 'ocode', 'operator'])

operand_finished = Signal(providing_args=['pid', 'request', 'form_data'])

********************************************************************************
File: core/tasks.py
********************************************************************************

from django.contrib.contenttypes.models import ContentType
from celery import shared_task
from django.utils import timezone
from datetime import timedelta

from core.models import OperationProc
from service.models import CustomerSchedule
from core.business_functions import create_service_proc, dispatch_operator

@shared_task(bind=True)
def test_task(self):
    print('test task!!!!!!')
    return 'Done'


# 检查服务进程是否等待安排超时
@shared_task(bind=True)
def check_proc_awaiting_timeout(self):
    print('30秒检查一次服务进程是否等待安排超时')

    # 检查任务一：受理超时检查
    # 获取所有等待中的服务进程
    procs = OperationProc.objects.filter(state=0, acceptance_timeout=False)
    for proc in procs:
        # 获取进程的计划执行时间
        scheduled_time = proc.scheduled_time
        # 获取受理时限
        working_hours = proc.working_hours
        if working_hours:
            # 计算超时时间
            timeout_time = scheduled_time + working_hours
            # 如果超时时间小于当前时间，则设置进程为超时状态
            if timeout_time < timezone.now():
                proc.acceptance_timeout = True
                proc.save()
                print('受理超时')


    # 检查任务二：执行超时检查overtime
    # 获取所有已安排的服务进程
    procs = OperationProc.objects.filter(state__in=[1, 2, 3,], completion_timeout=False)
    for proc in procs:
        # 获取进程的计划执行时间
        scheduled_time = proc.scheduled_time
        # 获取超时时限
        overtime = proc.overtime
        if overtime:
            # 计算超时时间
            timeout_time = scheduled_time + overtime
            # 如果超时时间小于当前时间，则设置进程为超时状态
            if timeout_time < timezone.now():
                proc.completion_timeout = True
                proc.save()
                print('超期超时')


    # 检查任务三：7天内的客户日程安排增加到任务队列
    # 从CustomerSchedule表中获取所有7天内应执行的服务进程
    schedules = CustomerSchedule.objects.filter(
        scheduled_time__gte=timezone.now(),
        scheduled_time__lte=timezone.now() + timedelta(days=7),
        is_assigned=False,
    )
    for schedule in schedules:
        '''
        生成后续服务
        '''
        # 准备新的服务作业进程参数
        proc_params = {}
        proc_params['service'] = schedule.service  # 进程所属服务
        proc_params['customer'] = schedule.customer  # 客户
        proc_params['creater'] = schedule.creater   # 创建者  

        if schedule.scheduled_operator:
            # 如果有指定执行人，则执行人为指定执行人, 服务进程状态为“就绪”
            service_operator = schedule.scheduled_operator.customer
            state = 1
        else:
            # 如果没有指定执行人，则按照业务规则分配执行人, 服务进程状态为“创建”
            service_operator = dispatch_operator(schedule.customer, schedule.service, schedule.creater)
            state = 0
        proc_params['operator'] = service_operator  # 操作者 or 根据 责任人 和 服务作业权限判断 
        proc_params['state'] = state  # or 根据服务作业权限判断

        proc_params['scheduled_time'] = schedule.scheduled_time  # 创建时间 or 根据服务作业逻辑判断

        proc_params['parent_proc'] = schedule.pid  # 安排服务/服务包进程是被创建服务进程的父进程
        proc_params['contract_service_proc'] = None  # 所属合约服务进程

        content_type = ContentType.objects.get(app_label='service', model=schedule.service.name.lower())  # 表单类型
        proc_params['content_type'] = content_type

        proc_params['passing_data'] = 0  # 传递表单数据：(0, '否'), (1, '接收，不可编辑'), (2, '接收，可以编辑')
        proc_params['form_data'] = None  # 表单数据

        print('客户日程安排增加到服务进程队列:', proc_params)

        # 创建新的服务作业进程
        new_proc = create_service_proc(**proc_params)

        if new_proc:
            schedule.is_assigned = True
            schedule.save()
********************************************************************************
File: core/models.py
********************************************************************************

from django.db import models
from django.db.models import Q
from django.db.models.query import QuerySet
from django.shortcuts import reverse
from django.contrib.auth.models import User
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes.fields import GenericForeignKey
from django.utils.text import slugify

from django.utils import timezone
import datetime
from time import time
from enum import Enum

from rest_framework.utils.encoders import JSONEncoder
from pypinyin import lazy_pinyin

from icpc.models import *
from core.hsscbase_class import HsscBase, HsscPymBase


# **********************************************************************************************************************
# Service配置 Model
# **********************************************************************************************************************
# 角色表
class Role(HsscPymBase):
    description = models.CharField(max_length=255, blank=True, null=True, verbose_name="岗位描述")

    class Meta:
        verbose_name = "业务岗位"
        verbose_name_plural = verbose_name
        ordering = ['id']


# 业务表单定义
class BuessinessForm(HsscPymBase):
    name_icpc = models.OneToOneField(Icpc, on_delete=models.CASCADE, blank=True, null=True, verbose_name="ICPC编码")
    description = models.TextField(max_length=255, null=True, blank=True, verbose_name="表单说明")
    api_fields = models.JSONField(null=True, blank=True, verbose_name="API字段")
    
    class Meta:
        verbose_name = '业务表单'
        verbose_name_plural = verbose_name


# 管理实体定义
class ManagedEntity(HsscPymBase):
    app_name = models.CharField(max_length=100, null=True, blank=True, verbose_name="所属app名")
    model_name = models.CharField(max_length=100, null=True, blank=True, verbose_name="模型名")
    base_form = models.OneToOneField(BuessinessForm, on_delete=models.SET_NULL, null=True, verbose_name="基础表单")
    header_fields_json = models.JSONField(null=True, blank=True, verbose_name="表头字段json")

    class Meta:
        verbose_name = "业务管理实体"
        verbose_name_plural = verbose_name


# 作业基础信息表
class Service(HsscPymBase):
    name_icpc = models.OneToOneField(Icpc, on_delete=models.CASCADE, blank=True, null=True, verbose_name="ICPC编码")
    buessiness_forms = models.ManyToManyField(BuessinessForm, through='BuessinessFormsSetting', verbose_name="作业表单")
    managed_entity = models.ForeignKey(ManagedEntity, on_delete=models.CASCADE, null=True, verbose_name="管理实体")
    Operation_priority = [(0, '0级'), (1, '紧急'), (2, '优先'), (3, '一般')]
    priority = models.PositiveSmallIntegerField(choices=Operation_priority, default=3, verbose_name='优先级')
    Service_type = [(0, '系统基础服务'), (1, '系统业务服务'), (2, '用户业务服务')]
    service_type = models.PositiveSmallIntegerField(choices=Service_type, default=2, verbose_name='服务类型')
    role = models.ManyToManyField(Role, blank=True, verbose_name="服务岗位")
    History_services_display=[(0, '所有历史服务'), (1, '当日服务')]
    history_services_display = models.PositiveBigIntegerField(choices=History_services_display, default=0, blank=True, null=True, verbose_name='历史服务默认显示')
    enable_queue_counter = models.BooleanField(default=True, verbose_name='显示队列数量')
    Route_to = [('INDEX', '任务工作台'), ('CUSTOMER_HOMEPAGE', '客户病例首页')]
    route_to = models.CharField(max_length=50, choices=Route_to, default='CUSTOMER_HOMEPAGE', blank=True, null=True, verbose_name='完成跳转至')
    suppliers = models.CharField(max_length=255, blank=True, null=True, verbose_name="供应商")
    not_suitable = models.CharField(max_length=255, blank=True, null=True, verbose_name='不适用对象')
    overtime = models.DurationField(blank=True, null=True, verbose_name='超期时限')
    working_hours = models.DurationField(blank=True, null=True, verbose_name='工时')
    frequency = models.CharField(max_length=255, blank=True, null=True, verbose_name='频次')
    cost = models.DecimalField(blank=True, null=True, max_digits=9, decimal_places=2, verbose_name='成本')
    load_feedback = models.BooleanField(default=False, verbose_name='是否反馈负荷数量')
    resource_materials = models.CharField(max_length=255, blank=True, null=True, verbose_name='配套物料')
    resource_devices = models.CharField(max_length=255, blank=True, null=True, verbose_name='配套设备')
    resource_knowledge = models.CharField(max_length=255, blank=True, null=True, verbose_name='服务知识')

    class Meta:
        verbose_name = "服务"
        verbose_name_plural = verbose_name
        ordering = ['id']

    def __str__(self):
        return str(self.label)

    def save(self, *args, **kwargs):
        if self.name_icpc is not None:
            self.name = self.name_icpc.icpc_code
            self.label = self.name_icpc.iname
        if self.name is None or self.name == '':
            self.name = f'{"_".join(lazy_pinyin(self.label))}'
        super().save(*args, **kwargs)
    

class BuessinessFormsSetting(HsscBase):
    service = models.ForeignKey(Service, on_delete=models.CASCADE, verbose_name="作业")
    buessiness_form = models.ForeignKey(BuessinessForm, on_delete=models.CASCADE, verbose_name="表单")
    is_list = models.BooleanField(default=False, verbose_name="列表样式")

    class Meta:
        verbose_name = '作业表单设置'
        verbose_name_plural = verbose_name
        ordering = ['id']


# 服务包类型信息表
class ServicePackage(HsscPymBase):
    name_icpc = models.OneToOneField(Icpc, on_delete=models.CASCADE, blank=True, null=True, verbose_name="ICPC编码")

    class Meta:
        verbose_name = "服务包"
        verbose_name_plural = verbose_name
        ordering = ['id']

class CycleUnit(HsscPymBase):
    cycle_unit = models.CharField(max_length=255, blank=True, null=True, verbose_name='周期单位')
    days = models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='天数')
    class Meta:
        verbose_name = "服务周期单位"
        verbose_name_plural = verbose_name

class ServicePackageDetail(HsscPymBase):
    order = models.PositiveSmallIntegerField(default=100, verbose_name='顺序')
    servicepackage = models.ForeignKey(ServicePackage, on_delete=models.CASCADE, verbose_name='服务包')
    service = models.ForeignKey(Service, on_delete=models.CASCADE, null=True, verbose_name='服务项目')
    cycle_unit = models.ForeignKey(CycleUnit, on_delete=models.CASCADE, default=1, blank=True, null=True, verbose_name='周期单位')
    cycle_frequency = models.PositiveSmallIntegerField(blank=True, null=True, default=1, verbose_name="每周期频次")
    cycle_times = models.PositiveSmallIntegerField(blank=True, null=True, default=1, verbose_name="天数")
    Default_beginning_time = [(1, '当前系统时间'), (2, '首个服务开始时间'), (3, '上个服务结束时间'), (4, '客户出生日期')]
    default_beginning_time = models.PositiveSmallIntegerField(choices=Default_beginning_time, default=1, verbose_name='执行时间基准')
    base_interval = models.DurationField(blank=True, null=True, verbose_name='基准间隔', help_text='例如：3 days, 22:00:00')

    class Meta:
        verbose_name = "服务内容模板"
        verbose_name_plural = verbose_name
        ordering = ['order']

    def __str__(self):
        return str(self.service)


# 系统作业指令表
class SystemOperand(HsscBase):
    func = models.CharField(max_length=255, blank=True, null=True, verbose_name="内部实现函数")
    parameters = models.CharField(max_length=255, blank=True, null=True, verbose_name="参数")
    description = models.CharField(max_length=255, blank=True, null=True, verbose_name="描述")
    Applicable = [(0, '作业'), (1, '单元服务'), (2, '服务包'), (3, '全部')]
    applicable = models.PositiveSmallIntegerField(choices=Applicable, default=1, verbose_name='适用范围')

    class Meta:
        verbose_name = '系统自动作业'
        verbose_name_plural = verbose_name
        ordering = ['id']

    def __str__(self):
        return self.label


# 事件规则表
class EventRule(HsscBase):
    description = models.TextField(max_length=255, blank=True, null=True, verbose_name="表达式")
    Detection_scope = [('ALL', '所有历史表单'), ('CURRENT_SERVICE', '本次服务表单'), ('LAST_WEEK_SERVICES', '过去7天表单')]
    detection_scope = models.CharField(max_length=100, choices=Detection_scope, default='CURRENT_SERVICE', blank=True, null=True, verbose_name='检测范围')
    weight = models.PositiveSmallIntegerField(blank=True, null=True, default=1, verbose_name="权重")
    expression = models.TextField(max_length=1024, blank=True, null=True, verbose_name="内部表达式")
    expression_fields = models.CharField(max_length=1024, blank=True, null=True, verbose_name="内部表达式字段")

    class Meta:
        verbose_name = '条件事件'
        verbose_name_plural = verbose_name
        ordering = ['id']


# 服务规则库
class ServiceRule(HsscBase):
    service = models.ForeignKey(Service, on_delete=models.CASCADE, null=True, verbose_name='服务项目')
    event_rule = models.ForeignKey(EventRule, on_delete=models.CASCADE,  blank=True, null=True, verbose_name='条件事件')
    system_operand = models.ForeignKey(SystemOperand, on_delete=models.CASCADE, blank=True, null=True, verbose_name='系统作业')
    next_service = models.ForeignKey(Service, on_delete=models.CASCADE, blank=True, null=True, related_name='next_service', verbose_name='后续服务')
    Receive_form = [(0, '否'), (1, '接收，不可编辑'), (2, '接收，可以编辑')]  # 接收表单数据
    passing_data = models.PositiveSmallIntegerField(choices=Receive_form, default=0,  blank=True, null=True, verbose_name='接收表单')
    Complete_feedback = [(0, '否'), (1, '返回完成状态'), (2, '返回表单')]
    complete_feedback = models.PositiveSmallIntegerField(choices=Complete_feedback, default=0,  blank=True, null=True, verbose_name='完成反馈')
    Reminders = [(0, '客户'), (1, '服务人员'), (2, '服务小组')]
    reminders = models.PositiveSmallIntegerField(choices=Reminders, default=0,  blank=True, null=True, verbose_name='提醒对象')
    message = models.CharField(max_length=512, blank=True, null=True, verbose_name='消息内容')
    Interval_rule_options = [(0, '等于'), (1, '小于'), (2, '大于')]
    interval_rule = models.PositiveSmallIntegerField(choices=Interval_rule_options, blank=True, null=True, verbose_name='间隔条件')
    interval_time = models.DurationField(blank=True, null=True, verbose_name="间隔时间", help_text='例如：3 days, 22:00:00')
    is_active = models.BooleanField(choices=[(False, '否'), (True, '是')], default=True, verbose_name='启用')

    class Meta:
        verbose_name = '服务规则'
        verbose_name_plural = verbose_name
        ordering = ['id']

    def __str__(self):
        return str(self.service)


class ContractService(HsscPymBase):
    is_active = models.BooleanField(default=True, verbose_name='启用')
    is_deleted = models.BooleanField(default=False, verbose_name='删除')
    created_time = models.DateTimeField(auto_now_add=True, verbose_name='创建时间')
    updated_time = models.DateTimeField(auto_now=True, verbose_name='更新时间')

    class Meta:
        verbose_name = '合约服务'
        verbose_name_plural = verbose_name
        ordering = ['id']

    def __str__(self):
        return str(self.label)


class ExternalServiceMapping(HsscBase):
    external_form_id = models.CharField(max_length=100, null=True, blank=True, verbose_name="外部表单标识")
    external_form_name = models.CharField(max_length=100, null=True, blank=True, verbose_name="外部表单名称")
    Form_source = [('jinshuju', '金数据'), ('other', '其它')]
    form_source = models.CharField(max_length=50, choices=Form_source, null=True, blank=True, verbose_name="来源名称")
    service = models.OneToOneField(Service, on_delete=models.CASCADE, null=True, blank=True, verbose_name="对应服务")
    fields_mapping = models.JSONField(null=True, blank=True, verbose_name="字段映射")

    class Meta:
        verbose_name = '外部服务映射'
        verbose_name_plural = verbose_name

    def __str__(self):
        return str(self.external_form_name)

# **********************************************************************************************************************
# Service进程管理Model
# **********************************************************************************************************************

# 服务进程表 ServiceProc
class ContractServiceProc(HsscBase):
    contract_service = models.ForeignKey(ContractService, on_delete=models.CASCADE, verbose_name="合约服务")
    customer = models.ForeignKey('Customer', on_delete=models.SET_NULL, blank=True, null=True, related_name='service_proc_customer', verbose_name="客户")  # 客户id: cid
    creater = models.ForeignKey('Customer', on_delete=models.SET_NULL, blank=True, null=True, related_name='service_proc_creater', verbose_name="创建者")  # 创建者id: cid
    current_service = models.ForeignKey(Service, on_delete=models.SET_NULL, blank=True, null=True, verbose_name="作业状态")
    Operation_priority = [(0, '0级'), (1, '紧急'), (2, '优先'), (3, '一般')]
    priority = models.PositiveSmallIntegerField(choices=Operation_priority, default=3, verbose_name="优先级")

    class Meta:
        verbose_name = "合约服务进程"
        verbose_name_plural = verbose_name
        ordering = ['id']

    def __str__(self):
        return self.customer.name


class OperationProcManager(models.Manager):
    def get_service_queue_count(self, service):
        return self.filter(service=service).exclude(state=4).count()

    def get_unassigned_proc(self, operator):
	# 获取待分配作业进程: 状态为创建，且未分配操作员，服务岗位为操作员所属岗位，以及用户服务小组为操作员所属服务小组
        return self.filter(state=0, operator=None, service__in=Service.objects.filter(role__in=operator.staff.role.all()),)
    
# 作业进程表 OperationProc
class OperationProc(HsscBase):
    # 作业进程id: pid
    service = models.ForeignKey(Service, on_delete=models.CASCADE, null=True, verbose_name="服务")  # 作业id: oid
    operator = models.ForeignKey('Customer', on_delete=models.SET_NULL, blank=True, null=True, related_name='operation_proc_operator', verbose_name="操作员")  # 作业员id: uid
    customer = models.ForeignKey('Customer', on_delete=models.SET_NULL, blank=True, null=True, related_name='operation_proc_customer', verbose_name="客户")  # 客户id: cid
    creater = models.ForeignKey('Customer', on_delete=models.SET_NULL, blank=True, null=True, related_name='operation_proc_creater', verbose_name="创建者")  # 创建者id: cid
    role = models.ManyToManyField(Role, blank=True, verbose_name="作业岗位")
	# 作业状态: state
    Operation_proc_state = [(0, '创建'), (1, '就绪'), (2, '运行'), (3, '挂起'), (4, '结束'), (10, '等待超时')]
    state = models.PositiveSmallIntegerField(choices=Operation_proc_state, verbose_name="作业状态")
    priority = models.PositiveSmallIntegerField(choices=[(0, '0级'), (1, '紧急'), (2, '优先'), (3, '一般')], default=3, verbose_name="优先级")
    entry = models.CharField(max_length=250, blank=True, null=True, db_index=True, verbose_name="作业入口")  # 作业入口: /clinic/service/model_name/model_id/change
    parent_proc = models.ForeignKey('self', on_delete=models.SET_NULL, blank=True, null=True, verbose_name="父进程")  # 父作业进程id: ppid
    contract_service_proc = models.ForeignKey(ContractServiceProc, on_delete=models.SET_NULL, blank=True, null=True, verbose_name="服务进程")  # 服务进程id: spid
    form_slugs = models.JSONField(blank=True, null=True, verbose_name="表单索引")
    scheduled_time = models.DateTimeField(blank=True, null=True, verbose_name="计划执行时间")
    overtime = models.DurationField(blank=True, null=True, verbose_name='超期时限')
    working_hours = models.DurationField(blank=True, null=True, verbose_name='工时')
    acceptance_timeout = models.BooleanField(default=False, blank=True, null=True, verbose_name="受理超时")
    completion_timeout = models.BooleanField(default=False, blank=True, null=True, verbose_name="完成超时")
    created_time = models.DateTimeField(editable=False, null=True, verbose_name="创建时间")
    updated_time = models.DateTimeField(editable=False, null=True, verbose_name="修改时间")
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE, limit_choices_to=Q(app_label='service') , null=True, blank=True)
    object_id = models.PositiveIntegerField(null=True, blank=True)
    content_object = GenericForeignKey('content_type', 'object_id')
    objects = OperationProcManager()

    class Meta:
        verbose_name = "作业进程"
        verbose_name_plural = "作业进程"
        ordering = ['id']

    def __str__(self):
		# return 作业名称
        return self.service.label

    def save(self, *args, **kwargs):
        ''' On save, update timestamps '''
        if not self.id:
            self.created_time = timezone.now()
        self.modified_time = timezone.now()
        if not self.name:
            self.name = self.service.label
        return super().save(*args, **kwargs)

    def get_absolute_url(self):
        # 返回作业入口url
        return self.entry

    def set_operator(self, operator):
        # 设置作业进程操作员
        self.operator = operator
        self.save()

    def update_state(self, ocode):
        #作业进程状态机操作码ocode
        class OperationCode(Enum):
            CRE = 0  # CREATE
            CTR = 1  # CREATED TO READY
            RTR = 2  # READY TO RUNNING
            RTH = 3  # RUNNING TO HANGUP
            HTR = 1  # HANGUP TO READY
            RTC = 4  # RUNNING TO COMPLETED
        self.state = OperationCode[ocode].value
        self.save()

        # 更新作业进程对应的职员任务队列状态
        if self.stafftodo:
            self.stafftodo.state = 4
            self.stafftodo.save()
    


class StaffTodoManager(models.Manager):
	# 当天常规任务
    def today_todos(self, operator):
        today = timezone.now().date()
        return self.filter(
            operator=operator, 
            priority=3,
            scheduled_time__year=int(today.strftime('%Y')),
            scheduled_time__month=int(today.strftime('%m')),
            scheduled_time__day=int(today.strftime('%d')),
            ).exclude(state=4)
        
	# 紧要任务安排
    def urgent_todos(self, operator):
        return self.filter(operator=operator, priority__lt=3).exclude(state=4).order_by('priority')

	# 未来七天任务
    def week_todos(self, operator):
        startTime = timezone.now() + datetime.timedelta(days=1)
        endTime = timezone.now() + datetime.timedelta(days=7)
        return self.filter(
            operator=operator, 
            priority=3, 
            # scheduled_time__year=int(today.strftime('%Y')),
            # scheduled_time__week=int(today.strftime('%W')),
            scheduled_time__range=(startTime, endTime),
            ).exclude(state=4)

class StaffTodo(HsscBase):
    operation_proc = models.OneToOneField(OperationProc, on_delete=models.CASCADE, verbose_name="作业进程")
    operator = models.ForeignKey('Customer', on_delete=models.SET_NULL, blank=True, null=True, verbose_name="操作员")
    scheduled_time = models.DateTimeField(blank=True, null=True, verbose_name="计划执行时间")
    Operation_proc_state = [(0, '创建'), (1, '就绪'), (2, '运行'), (3, '挂起'), (4, '结束')]
    state = models.PositiveSmallIntegerField(choices=Operation_proc_state, verbose_name="作业状态")
    customer_number = models.CharField(max_length=250, blank=True, null=True, verbose_name="居民档案号")
    customer_name = models.CharField(max_length=250, blank=True, null=True, verbose_name="姓名")
    service_label = models.CharField(max_length=250, blank=True, null=True, verbose_name="服务项目")
    customer_phone = models.CharField(max_length=250, blank=True, null=True, verbose_name="联系电话")
    customer_address = models.CharField(max_length=250, blank=True, null=True, verbose_name="家庭地址")
    priority = models.PositiveSmallIntegerField(choices=[(0, '0级'), (1, '紧急'), (2, '优先'), (3, '一般')], default=3, verbose_name="优先级")
    objects = StaffTodoManager()

    class Meta:
        verbose_name = "员工任务清单"
        verbose_name_plural = verbose_name
        ordering = ['id']

    def __str__(self):
        return self.service_label

    def save(self, *args, **kwargs):
        if not self.label:
            self.label = f'{self.customer_name} - {self.service_label}'
        return super().save(*args, **kwargs)


# 用户基本信息
class Customer(HsscBase):
    user = models.OneToOneField(User, on_delete=models.CASCADE, verbose_name='客户')
    name = models.CharField(max_length=50, verbose_name="姓名")
    phone = models.CharField(max_length=20, blank=True, null=True, verbose_name="电话")
    address = models.CharField(max_length=255, blank=True, null=True, verbose_name="地址")
    charge_staff = models.ForeignKey('self', on_delete=models.SET_NULL, blank=True, null=True, verbose_name='负责人')
    workgroup = models.ForeignKey('Workgroup', on_delete=models.SET_NULL, blank=True, null=True, related_name='customer_workgroup', verbose_name='服务小组')
    health_record = models.JSONField(blank=True, null=True, verbose_name="健康记录")
    weixin_openid = models.CharField(max_length=255, blank=True, null=True, verbose_name="微信openid")


    class Meta:
        verbose_name = "客户注册信息"
        verbose_name_plural = "客户注册信息"

    def __str__(self):
        return str(self.name)

    def natural_key(self):
        return self.name

    def save(self, *args, **kwargs):
        if not self.label:
            self.label = self.name
        super().save(*args, **kwargs)

    def get_history_services(self) -> 'QuerySet[OperationProc]':
        '''
        获取客户历史服务列表
        '''
        return self.operation_proc_customer.filter(state=4).exclude(service__in=Service.objects.filter(service_type=0))

    def get_recommended_services(self) -> 'QuerySet[RecommendedService]':
        '''
        获取客户推荐服务列表
        '''
        return self.recommended_service_customer.all()

    def get_scheduled_services(self) -> 'QuerySet[OperationProc]':
        '''
        获取已安排服务列表
        '''
        return self.operation_proc_customer.filter(state__in = [0, 1, 2, 3])

    def get_absolute_url(self):
        return reverse('customer_homepage', args=[self.id])


class Institution(HsscBase):
    class Meta:
        verbose_name = "机构"
        verbose_name_plural = verbose_name
        ordering = ['id']

    def __str__(self):
        return str(self.label)

    def save(self, *args, **kwargs):
        if not self.name:
            self.name = f'{"_".join(lazy_pinyin(self.label))}'
        super().save(*args, **kwargs)


# 职员基本信息
class Staff(HsscBase):
    customer = models.OneToOneField(Customer, on_delete=models.CASCADE, null=True, verbose_name='员工')
    role = models.ManyToManyField(Role, related_name='staff_role', verbose_name='角色')
    email = models.EmailField(max_length=50)
    Title = [(i, i) for i in ['主任医师', '副主任医师', '主治医师', '住院医师', '主任护师', '副主任护师', '主管护师', '护士长', '护士', '其他']]
    title = models.PositiveSmallIntegerField(choices=Title, blank=True, null=True, verbose_name='职称')
    is_assistant_physician = models.BooleanField(blank=True, null=True, verbose_name='助理医师')
    resume = models.TextField(blank=True, null=True, verbose_name='简历')
    Service_Lever = [(i, i) for i in ['低', '中', '高']]
    service_lever = models.PositiveSmallIntegerField(choices=Service_Lever, blank=True, null=True, verbose_name='服务级别')
    registration_fee = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True, verbose_name='挂号费')
    standardized_workload = models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='标化工作量')
    institution = models.ForeignKey(Institution, on_delete=models.SET_NULL, blank=True, null=True, verbose_name="隶属机构")
    wecom_id = models.CharField(max_length=255, blank=True, null=True, verbose_name="企业微信id")

    class Meta:
        verbose_name = "员工基本信息"
        verbose_name_plural = verbose_name

    def __str__(self):
        return str(self.name)

    def save(self, *args, **kwargs):
        if not self.label:
            self.label = self.customer.label
        if not self.name:
            self.name = self.customer.name
        super().save(*args, **kwargs)


# 工作组
class Workgroup(HsscBase):
    leader = models.ForeignKey(Staff, on_delete=models.CASCADE, related_name='workgroup_customer', null=True, verbose_name='组长')
    members = models.ManyToManyField(Staff, related_name='workgroup_members', blank=True, verbose_name='组员')

    class Meta:
        verbose_name = "服务小组"
        verbose_name_plural = verbose_name
        ordering = ['id']

    def __str__(self):
        return str(self.label)

    def save(self, *args, **kwargs):
        if not self.name:
            self.name = f'{"_".join(lazy_pinyin(self.label))}'
        super().save(*args, **kwargs)


class CustomerServiceLogManager(models.Manager):
    def get_customer_service_log(self, customer, period=None):
        # 返回客户的给定时间段的服务日志
        if period:
            return self.filter(customer=customer, created_time__range=period).order_by('created_time')
        return self.filter(customer=customer)

# 客户健康记录
class CustomerServiceLog(HsscBase):
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE, blank=True, null=True, related_name='customer_service_log_customer', verbose_name="客户")
    operator = models.ForeignKey(Customer, on_delete=models.CASCADE, blank=True, null=True, related_name='customer_service_log_operator', verbose_name="操作员")
    creater = models.ForeignKey(Customer, on_delete=models.CASCADE, blank=True, null=True, related_name='customer_service_log_creater', verbose_name="创建者")
    pid = models.OneToOneField(OperationProc, on_delete=models.SET_NULL, blank=True, null=True, verbose_name="作业进程id")
    cpid = models.ForeignKey(ContractServiceProc, on_delete=models.SET_NULL, blank=True, null=True, verbose_name="服务进程id")
    slug = models.SlugField(max_length=250, blank=True, null=True, verbose_name="slug")
    created_time = models.DateTimeField(editable=False, null=True, verbose_name="创建时间")
    updated_time = models.DateTimeField(editable=False, null=True, verbose_name="更新时间")
    Log_category = [('Subjective', '主观资料'), ('ObjectiveO', '客观资料'), ('Assessment', '诊断与评价'), ('Plan', '治疗方案'), ('Management', '管理活动')]
    category = models.CharField(max_length=50, choices=Log_category , blank=True, null=True, verbose_name="记录类别")
    data = models.JSONField(blank=True, null=True, encoder=JSONEncoder, verbose_name="服务记录")

    logs = CustomerServiceLogManager()

    class Meta:
        verbose_name = "客户服务记录"
        verbose_name_plural = verbose_name
        ordering = ['created_time']

    def __str__(self):
        return f'{self.name}--{self.created_time}'

    def save(self, *args, **kwargs):
        ''' On save, update timestamps '''
        if not self.created_time:
            self.created_time = timezone.now()
        self.updated_time = timezone.now()

        return super().save(*args, **kwargs)


# 推荐服务
class RecommendedService(HsscBase):
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE, blank=True, null=True, related_name='recommended_service_customer', verbose_name="客户")
    operator = models.ForeignKey(Customer, on_delete=models.CASCADE, blank=True, null=True, related_name='recommended_service_operator', verbose_name="操作员")
    creater = models.ForeignKey(Customer, on_delete=models.CASCADE, blank=True, null=True, related_name='recommended_service_creater', verbose_name="创建者")
    pid = models.ForeignKey(OperationProc, on_delete=models.SET_NULL, blank=True, null=True, verbose_name="作业进程id")
    cpid = models.ForeignKey(ContractServiceProc, on_delete=models.SET_NULL, blank=True, null=True, verbose_name="服务进程id")
    slug = models.SlugField(max_length=250, blank=True, null=True, verbose_name="slug")
    created_time = models.DateTimeField(editable=False, null=True, verbose_name="创建时间")
    updated_time = models.DateTimeField(editable=False, null=True, verbose_name="更新时间")
    service = models.ForeignKey(Service, on_delete=models.CASCADE, null=True, verbose_name="推荐服务")
    counter = models.PositiveSmallIntegerField(default=0, verbose_name="推荐次数")
    Receive_form = [(0, '否'), (1, '接收，不可编辑'), (2, '接收，可以编辑')]  # 接收表单数据
    passing_data = models.PositiveSmallIntegerField(choices=Receive_form, default=0,  blank=True, null=True, verbose_name='接收表单')

    class Meta:
        verbose_name = "推荐服务"
        verbose_name_plural = verbose_name
        ordering = ['id']

    def __str__(self):
        return str(self.service.label)

    def save(self, *args, **kwargs):
        ''' On save, update timestamps '''
        if not self.created_time:
            self.created_time = timezone.now()
        self.updated_time = timezone.now()

        return super().save(*args, **kwargs)


class Message(HsscBase):
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE, blank=True, null=True, related_name='message_customer', verbose_name="客户")
    operator = models.ForeignKey(Customer, on_delete=models.CASCADE, blank=True, null=True, related_name='message_operator', verbose_name="操作员")
    creater = models.ForeignKey(Customer, on_delete=models.CASCADE, blank=True, null=True, related_name='message_creater', verbose_name="创建者")
    pid = models.ForeignKey(OperationProc, on_delete=models.SET_NULL, blank=True, null=True, verbose_name="作业进程id")
    cpid = models.ForeignKey(ContractServiceProc, on_delete=models.SET_NULL, blank=True, null=True, verbose_name="服务进程id")
    slug = models.SlugField(max_length=250, blank=True, null=True, verbose_name="slug")
    created_time = models.DateTimeField(editable=False, null=True, verbose_name="创建时间")
    updated_time = models.DateTimeField(editable=False, null=True, verbose_name="更新时间")
    message = models.CharField(max_length=512, blank=True, null=True, verbose_name="消息")
    has_read = models.BooleanField(default=False, verbose_name="是否已读")

    class Meta:
        verbose_name = "消息"
        verbose_name_plural = verbose_name
        ordering = ['id']

    def __str__(self):
        return str(self.message)

    def save(self, *args, **kwargs):
        ''' On save, update timestamps '''
        if not self.created_time:
            self.created_time = timezone.now()
        self.updated_time = timezone.now()

        return super().save(*args, **kwargs)


# 药品基本信息表
class Medicine(HsscPymBase):
    yp_code = models.CharField(max_length=10, null=True, verbose_name="药品编码")
    specification = models.CharField(max_length=100, null=True, verbose_name="规格")
    measure = models.CharField(max_length=30, null=True, verbose_name="单位")
    mz_price = models.DecimalField(max_digits=10, decimal_places=2, null=True, verbose_name="门诊参考单价")
    usage = models.CharField(max_length=60, null=True, verbose_name="用法")
    dosage = models.CharField(max_length=60, null=True, verbose_name="用量")
    type = models.CharField(max_length=40, null=True, verbose_name="药剂类型")
    yp_sort = models.CharField(max_length=60, null=True, verbose_name="药品分类名称")
    current_storage = models.DecimalField(max_digits=10, decimal_places=2, null=True, verbose_name="当前库存")
    cf_measure = models.CharField(max_length=30, null=True, verbose_name="处方计量单位")
    xs_measure = models.CharField(max_length=30, null=True, verbose_name="销售计量单位")
    cf_dosage = models.DecimalField(max_digits=10, decimal_places=2, null=True, verbose_name="常用单次处方用量(处方单位)")
    not_cfyp = models.BooleanField(default=False, verbose_name="非处方药标记")
    mzcf_price = models.DecimalField(max_digits=10, decimal_places=2, null=True, verbose_name="门诊处方价格")
    is_use = models.BooleanField(default=True, verbose_name="是否使用中")
    ypty_name = models.CharField(max_length=200, null=True, verbose_name="药品通用名称")
    gjjbyp = models.CharField(max_length=100, null=True, verbose_name="国家基本药品目录名称")
    ybypbm = models.CharField(max_length=100, null=True, verbose_name="医保药品目录对应药品编码")
    ybyplb = models.CharField(max_length=2, null=True, verbose_name="药品报销类别（甲类、乙类）")

    class Meta:
        verbose_name = "药品基本信息表"
        verbose_name_plural = verbose_name
        ordering = ['id']

    def __str__(self):
        return self.label


class HsscFormModel(HsscBase):
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE, blank=True, null=True, related_name='%(class)s_customer', verbose_name="客户")
    operator = models.ForeignKey(Customer, on_delete=models.CASCADE, blank=True, null=True, related_name='%(class)s_operator', verbose_name="操作员")
    creater = models.ForeignKey(Customer, on_delete=models.CASCADE, blank=True, null=True, related_name='%(class)s_creater', verbose_name="创建者")
    pid = models.ForeignKey(OperationProc, on_delete=models.SET_NULL, blank=True, null=True, related_name='%(class)s_pid', verbose_name="作业进程id")
    cpid = models.ForeignKey(ContractServiceProc, on_delete=models.SET_NULL, blank=True, null=True, related_name='%(class)s_sid', verbose_name="服务进程id")
    slug = models.SlugField(max_length=250, blank=True, null=True, verbose_name="slug")
    created_time = models.DateTimeField(editable=False, null=True, verbose_name="创建时间")
    updated_time = models.DateTimeField(editable=False, null=True, verbose_name="更新时间")

    class Meta:
        abstract = True

    def save(self, *args, **kwargs):
        ''' On save, update timestamps '''
        if not self.id:
            self.slug = slugify(self._meta.model_name, allow_unicode=True) + f'-{int(time())}'
        if not self.created_time:
            self.created_time = timezone.now()
        self.updated_time = timezone.now()

        # 检查label字段，如果为空，则将label赋值为verbose_name和customer.name的组合，以'-'分隔
        if not self.label:
            self.label = f"{self._meta.verbose_name}-{self.customer.name}"
        if not self.name:
            self.name = f"{type(self).__name__}-{self.hssc_id}"

        return super().save(*args, **kwargs)

    def get_autocomplete_fields(self):
        autocompelte_fields_name=[]
        for field in self.__class__._meta.get_fields():
            if (field.one_to_one or field.many_to_one):  # 一对一、多对一字段
                autocompelte_fields_name.append(field.name)
        return autocompelte_fields_name

    def get_absolute_url(self):
        return reverse(f'{self.__class__.__name__}_detail_url', kwargs={'slug':self.slug})


# 保险服务专用
# 承保人员清单
class ChengBaoRenYuanQingDan(models.Model):
    序号=models.CharField(max_length=255, blank=True, null=True, verbose_name="序号")
    保单号=models.CharField(max_length=255, blank=True, null=True, verbose_name="保单号")
    被保人姓名=models.CharField(max_length=255, blank=True, null=True, verbose_name="被保人姓名")
    证件类型=models.CharField(max_length=255, blank=True, null=True, verbose_name="证件类型")
    身份证号=models.CharField(max_length=255, blank=True, null=True, verbose_name="身份证号")
    出生日期=models.CharField(max_length=255, blank=True, null=True, verbose_name="出生日期")
    保险责任=models.CharField(max_length=255, blank=True, null=True, verbose_name="保险责任")
    保险有效期=models.CharField(max_length=255, blank=True, null=True, verbose_name="保险有效期")
    联系方式=models.CharField(max_length=255, blank=True, null=True, verbose_name="联系方式")

    class Meta:
        verbose_name = "导入表-承保人员清单"
        verbose_name_plural = verbose_name
        ordering = ['id']

    def __str__(self):
        return str(self.被保人姓名)


# **********************************************************************************************************************
# 业务数据备份
# **********************************************************************************************************************
class BackupData(models.Model):
    name = models.CharField(max_length=255, unique=True, null=True, verbose_name="版本")
    label = models.CharField(max_length=255, null=True, blank=True, verbose_name="版本名称")
    code = models.TextField(null=True, verbose_name="源代码")
    description = models.TextField(max_length=255, verbose_name="描述", null=True, blank=True)
    create_time = models.DateTimeField(auto_now_add=True, verbose_name="创建时间")  

    class Meta:
        verbose_name = "业务数据备份"
        verbose_name_plural = verbose_name
        ordering = ['id']

    def __str__(self):
        return str(self.create_time)

********************************************************************************
File: core/consumers.py
********************************************************************************

from channels.generic.websocket import AsyncWebsocketConsumer
from asgiref.sync import sync_to_async

import json

from core.models import Customer
from core.business_functions import update_unassigned_procs, get_operator_permitted_services
# 职员任务工作台待分配服务进程列表
class UnassignedProcsConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        await self.channel_layer.group_add('unassigned_procs', self.channel_name)
        await self.accept()
        
        # 获取操作员，获取有操作权限的服务id列表，发送给客户端
        operator = await sync_to_async(Customer.objects.get)(user=self.scope['user'])
        permitted_services_id = await sync_to_async(get_operator_permitted_services)(operator)
        await self.send(json.dumps({'permittedServicesId': permitted_services_id}))

        # 初始化更新职员任务工作台待分配服务进程列表
        await sync_to_async(update_unassigned_procs)()

    async def disconnect(self, close_code):
        await self.channel_layer.group_discard('unassigned_procs', self.channel_name)
        self.close()

    async def send_unassigned_procs(self, event):
        new_data = event['data']
        await self.send(json.dumps(new_data))

from core.business_functions import update_staff_todo_list
# 职员任务工作台Consumer，实时更新职员任务列表
class StaffTodoConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        operator = await sync_to_async(Customer.objects.get)(user=self.scope['user'])
        await self.channel_layer.group_add(operator.hssc_id, self.channel_name)
        await self.accept()
        
        # 初始化更新职员任务列表
        await sync_to_async(update_staff_todo_list)(operator)

    async def disconnect(self, close_code):
        operator = await sync_to_async(Customer.objects.get)(user=self.scope['user'])
        await self.channel_layer.group_discard(operator.hssc_id, self.channel_name)
        self.close()

    async def send_staff_todo_list(self, event):
        new_data = event['data']
        await self.send(json.dumps(new_data))


from core.business_functions import update_customer_recommended_services_list 
# 客户服务病例首页Consumer，实时更新客户服务小组的客户各项服务项目
class CustomerRecommendedServicesListConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        customer_id = self.scope['url_route']['kwargs']['customer_id']
        await self.channel_layer.group_add(f'customer_recommended_services_{customer_id}', self.channel_name)
        await self.accept()

        # 初始化更新客户可选服务列表
        customer = await sync_to_async(Customer.objects.get)(id=customer_id)
        await sync_to_async(update_customer_recommended_services_list)(customer)

    async def disconnect(self, close_code):
        customer_id = self.scope['url_route']['kwargs']['customer_id']
        await self.channel_layer.group_discard(f'customer_recommended_services_{customer_id}', self.channel_name)
        self.close()

    async def send_customer_recommended_services_list(self, event):
        new_data = event['data']
        await self.send(json.dumps(new_data))


from core.business_functions import update_customer_services_list 
class CustomerServicesListConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        customer_id = self.scope['url_route']['kwargs']['customer_id']
        await self.channel_layer.group_add(f'customer_services_{customer_id}', self.channel_name)
        await self.accept()

        # 初始化更新客户可选服务列表
        customer = await sync_to_async(Customer.objects.get)(id=customer_id)
        await sync_to_async(update_customer_services_list)(customer)

    async def disconnect(self, close_code):
        customer_id = self.scope['url_route']['kwargs']['customer_id']
        await self.channel_layer.group_discard(f'customer_services_{customer_id}', self.channel_name)
        self.close()

    async def send_customer_services_list(self, event):
        new_data = event['data']
        await self.send(json.dumps(new_data))

********************************************************************************
File: core/__init__.py
********************************************************************************

default_app_config = 'core.apps.CoreConfig'
********************************************************************************
File: core/apps.py
********************************************************************************

from django.apps import AppConfig


class CoreConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core'

    def ready(self):
        # 启动应用后导入业务调度器: scheduler
        import core.scheduler

********************************************************************************
File: core/business_functions.py
********************************************************************************

from service.models import *

def copy_previous_form_data(form, previous_form_data):
    # 获取父进程表单
    
    if form.pid.parent_proc:
        previous_form = form.pid.parent_proc.content_object
    else:
        previous_form = None

    if previous_form:
        # 如果有父进程表单，获取父进程表单字段
        from core.models import HsscFormModel
        # 获取父进程表单和当前进程表单字段的交集
        base_fields_name = {field.name for field in HsscFormModel._meta.fields}  # 表单基础字段集合
        base_fields_name.add('id')

        previous_form_fields_name = {field.name for field in previous_form._meta.fields} - base_fields_name
        form_fields_name = {field.name for field in form._meta.fields} - base_fields_name
        copy_fields_name = previous_form_fields_name.intersection(form_fields_name)

        previous_form_fields_name_m2m = {field.name for field in previous_form._meta.many_to_many}
        form_fields_name_m2m = {field.name for field in form._meta.many_to_many}
        copy_fields_name_m2m = previous_form_fields_name_m2m.intersection(form_fields_name_m2m)
    else:
        # 否则是外部进程表单，获取表单字段
        copy_fields_name_m2m = {field.name for field in form._meta.many_to_many}
        copy_fields_name = {key for key in previous_form_data.keys()} - copy_fields_name_m2m

    # 向当前进程表单写入交集字段内容
    for field_name in copy_fields_name:
        field_value = previous_form_data.get(field_name)
        if field_value:
            exec(f'form.{field_name} = field_value')
    form.save()

    # 向当前进程表单写入交集多对多字段内容
    for field_name in copy_fields_name_m2m:
        m2m_objs = previous_form_data.get(field_name)
        print('copy_fields_name_m2m', copy_fields_name_m2m, 'field_name', field_name, 'm2m_objs', m2m_objs)
        if m2m_objs:
            if m2m_objs.__class__.__name__ == 'QuerySet':
                exec(f'form.{field_name}.add(*m2m_objs)')
            else:
                # 如果m2m_objs不是QuerySet和List类型，转换为列表类型，以适配外部表单copy_form_data
                if not isinstance(m2m_objs, list):
                    m2m_objs = [m2m_objs]

    return form


# 创建服务表单实例
def create_form_instance(operation_proc, passing_data, form_data):
    # 1. 创建空表单
    model_name = operation_proc.service.name.capitalize()
    form_instance = eval(model_name).objects.create(
        customer=operation_proc.customer,
        creater=operation_proc.operator,
        pid=operation_proc,
        cpid=operation_proc.contract_service_proc,
    )

    # 2. 如果不是基本信息表作业(作业服务表单!=作业服务的实体基本信息表单)，则为属性表，填入表头字段
    # service = operation_proc.service
    # if service.buessiness_forms.all().first() != service.managed_entity.base_form:
    #     # 判断当前实体，填入实体基本信息表头字段
    #     # 通用代码里customer应改为entity
    #     base_info = eval(service.managed_entity.base_form.service_set.all().first().name.capitalize()).objects.filter(customer=operation_proc.customer).first()
    #     # *********以下应为生成代码！生成所属实体表头信息************
    #     form_instance.boolfield_chang_zhu_di_zhi = base_info.boolfield_chang_zhu_di_zhi
    #     # form_instance.characterfield_contact_number = base_info.boolfield_lian_xi_dian_hua
    #     form_instance.characterfield_name = base_info.characterfield_name
    #     form_instance.characterfield_gender = base_info.characterfield_gender
    #     form_instance.datetimefield_date_of_birth = base_info.datetimefield_date_of_birth
    #     form_instance.save()

    # 3. 如果passing_data>0, copy父进程表单数据
    if passing_data > 0 and form_data:  # passing_data: 传递表单数据：(0, '否'), (1, '接收，不可编辑', 复制父进程表单控制信息), (2, '接收，可以编辑', 复制父进程表单控制信息), (3, 复制form_data)
        print('copy_previous_form_data:', 'form_instance:', form_instance, 'form_data:', form_data)
        copy_previous_form_data(form_instance, form_data)

    return form_instance


# 创建服务进程实例
def create_service_proc(**kwargs):
    import json
    # 检查父进程表单是否携带进程控制信息(检查api_fields字段)，如果有，整合所有表单的进程控制信息(charge_staff, operator, scheduled_time)
    # 提取进程控制信息，更新相应控制项内容。Api_field = [('charge_staff', '责任人'), ('operator', '作业人员'), ('scheduled_time', '计划执行时间')]
    form_data = kwargs['form_data']
    if kwargs['passing_data'] in [1, 2]:
        # 获取父进程中api_fields不为空的表单, 并获取其中的进程控制信息api_fields
        _forms = [form for form in kwargs['parent_proc'].service.buessiness_forms.all() if form.api_fields is not None and form.api_fields != 'null']
        api_fields = []
        for _form in _forms:
            api_fields.extend(json.loads(_form.api_fields))
        # 逐一获取api接口字段的值，赋给相应控制字段
        for api_field in api_fields:
            for system_field, form_field in api_field.items():
                if form_data.get(form_field):
                    if system_field == 'operator':  # operator: 作业人员                    
                        operator = form_data.get(form_field).customer
                        kwargs['operator'] = operator
                    elif system_field == 'scheduled_time':  # scheduled_time: 计划执行时间
                        scheduled_time = form_data.get(form_field)
                        kwargs['scheduled_time'] = scheduled_time
                    elif system_field=='charge_staff':  # charge_staff: 责任人
                        charge_staff = form_data.get(form_field).customer
                        kwargs['customer'].charge_staff = charge_staff
                        kwargs['customer'].save()                        
                    else:
                        pass

    # 创建新的服务作业进程
    from core.models import OperationProc
    parent_proc=kwargs.get('parent_proc')
    if parent_proc:
        new_proc=OperationProc.objects.create(
            service=kwargs['service'],
            customer=kwargs['customer'],
            creater=kwargs['creater'],
            operator=kwargs['operator'],
            state=kwargs['state'],
            scheduled_time=kwargs['scheduled_time'],
            parent_proc=parent_proc,
            contract_service_proc=kwargs.get('contract_service_proc'),
            content_type=kwargs['content_type'],
            overtime=kwargs['service'].overtime,  # 超时时间
            working_hours=kwargs['service'].working_hours,  # 工作时间
        )
    else:
        new_proc=OperationProc.objects.create(
            service=kwargs['service'],
            customer=kwargs['customer'],
            creater=kwargs['creater'],
            operator=kwargs['operator'],
            state=kwargs['state'],
            scheduled_time=kwargs['scheduled_time'],
            contract_service_proc=kwargs.get('contract_service_proc'),
            content_type=kwargs['content_type'],
            overtime=kwargs['service'].overtime,  # 超时时间
            working_hours=kwargs['service'].working_hours,  # 工作时间
        )
    # Here postsave signal in service.models
    # 更新允许作业岗位
    role = kwargs['service'].role.all()
    new_proc.role.set(role)

    print('create_form_instance:', 'new_proc:', new_proc, 'kwargs["passing_data"]:', kwargs['passing_data'], 'form_data:', form_data)
    form = create_form_instance(new_proc, kwargs['passing_data'], form_data)
    # 更新OperationProc服务进程的form实例信息
    new_proc.object_id = form.id
    new_proc.entry = f'/clinic/service/{new_proc.service.name.lower()}/{form.id}/change'
    new_proc.save()

    return new_proc


# 创建客户服务日志：把服务表单内容写入客户服务日志
def create_customer_service_log(form_data, form_instance):
    from django.db.models.query import QuerySet
    from django.core.exceptions import ObjectDoesNotExist
    from core.models import CustomerServiceLog
    from core.hsscbase_class import FieldsType

    def _get_set_value(field_type, id_list):
        # 转换id列表为对应的字典值列表
        app_label = field_type.split('.')[0]  # 分割模型名称field_type: app_label.model_name，获得应用名称
        val_iterator = []
        if isinstance(id_list, QuerySet):
            if app_label == 'icpc':
                val_iterator = map(lambda x: x.iname, id_list)
            elif app_label == 'dictionaries':
                val_iterator = map(lambda x: x.value, id_list)
            else:
                val_iterator = map(lambda x: x.name, id_list)
        else:
            if app_label == 'icpc':
                val_iterator = [id_list.iname]
            elif app_label == 'dictionaries':
                val_iterator = [id_list.value]
            elif app_label == 'core':
                val_iterator = [id_list.label]  # 适配core.Service
            else:
                val_iterator = [id_list.name]  # 适配entities.Stuff
        return f'{set(val_iterator)}'

    # 数据格式预处理
    for field_name, field_val in form_data.items():
        # 根据字段类型做字段值的格式转换
        field_type = eval(f'FieldsType.{field_name}').value
        if field_type == 'Datetime' or field_type == 'Date' or field_type == 'Boolean':  # 日期/布尔类型暂时不处理
            form_data[field_name] = f'{field_val}'
        elif field_type == 'Numbers':  # 如果字段类型是Numbers，直接使用字符串数值
            form_data[field_name] = str({field_val}) if field_val != None else '{}'
        elif field_type == 'String':  # 如果字段类型是String，转换为集合字符串
            form_data[field_name] = str({field_val}) if field_val and field_val!=[''] else '{}'
        else:  # 如果字段类型是关联字段，转换为集合字符串
            # if field_type == 'entities.Service':
            #     field_val = field_val.label
            form_data[field_name] = _get_set_value(field_type, field_val) if field_val and field_val!=['']  else '{}'

    print('完成预处理form_data:', form_data)
    # 保存form_data
    try:
        log = CustomerServiceLog.objects.get(pid = form_instance.pid)
        log.data = form_data
        log.save()
    except ObjectDoesNotExist:
        log = CustomerServiceLog.objects.create(
            name=form_instance.name,
            label=form_instance.label,
            customer=form_instance.customer,
            operator=form_instance.operator,
            creater=form_instance.creater,
            pid=form_instance.pid,
            cpid=form_instance.cpid,
            data=form_data,
        )


# 获取客户基本信息
def get_customer_profile(customer):
    from core.models import ManagedEntity
    from service.forms import Ju_min_ji_ben_xin_xi_diao_cha_HeaderForm
    # 获取客户的基本信息表单
    base_form = ManagedEntity.objects.get(name='customer').base_form
    base_form_service_name = base_form.service_set.all().first().name
    instance = eval(f'{base_form_service_name.capitalize()}.objects.filter(customer=customer).last()')
    header_form = eval(f'{base_form_service_name.capitalize()}_HeaderForm(instance=instance)')
    url = f'/clinic/service/{base_form_service_name}/{instance.id}/change'
    profile = {
        'id': customer.id,
        'charge_staff': '',
        'workgroup': instance.customer.workgroup.label if instance.customer.workgroup else '',
        'url': url,
        'form': header_form,
    }

    return profile


# 为新服务分配操作员
def dispatch_operator(customer, service, current_operator):
    from django.core.exceptions import ObjectDoesNotExist
    operator = None

    # 当前客户如有责任人，且责任人具有新增服务岗位权限，则开单给责任人
    charge_staff = customer.charge_staff
    if charge_staff:
        if set(charge_staff.staff.role.all()).intersection(set(service.role.all())):
            operator = charge_staff
            return operator
    
    # 否则，如当前作业员具有新增服务岗位权限务岗位权限，则开单给作业员
    try:
        if set(current_operator.staff.role.all()).intersection(set(service.role.all())):
            operator = current_operator
            return operator
    except ObjectDoesNotExist:
        return None

    # 否则，操作员为空，进入共享队列
    return None


# 获取操作员有操作权限的服务id列表
def get_operator_permitted_services(operator):
    from core.models import Service
    return [
        service.id
        for service in Service.objects.filter(service_type__in=[1,2]) 
        if set(service.role.all()).intersection(set(operator.staff.role.all()))
    ]


# 发送channel_message
def send_channel_message(group_name, message):
    from asgiref.sync import async_to_sync
    from channels.layers import get_channel_layer
    channel_layer = get_channel_layer()
    async_to_sync(channel_layer.group_send)(group_name, message)


from core.models import OperationProc
def update_unassigned_procs():
    # 可申领的服务作业
    unassigned_procs = {
        'unassignedProcs': [
            {
                'id': proc.id,
                'service_id': proc.service.id,
                'service_label': proc.service.label,
                'customer_name': proc.customer.name,
                'workgroup_name': proc.customer.workgroup.label if proc.customer.workgroup else '',
                'acceptance_timeout': proc.acceptance_timeout,
            } for proc in OperationProc.objects.filter(state=0, operator=None)
        ]
    }

    # 发送channel_message给操作员
    send_channel_message('unassigned_procs', {'type': 'send_unassigned_procs', 'data': unassigned_procs})

from core.models import StaffTodo
# 更新工作台职员任务列表
def update_staff_todo_list(operator):
    # 根据operator过滤出操作员的今日安排、紧要安排、本周安排
    layout_items = [
        {'title': '今日服务安排', 'todos': StaffTodo.objects.today_todos(operator)},
        {'title': '紧要服务安排', 'todos': StaffTodo.objects.urgent_todos(operator)},
        {'title': '本周服务安排', 'todos': StaffTodo.objects.week_todos(operator)},
    ]

    # 构造channel_message items
    items = []
    for _item in layout_items:
        todos = []
        for todo in _item['todos']:
            todos.append({
                'id': todo.id,
                'customer_id': todo.operation_proc.customer.id,
                'customer_number': todo.customer_number,
                'customer_name': todo.customer_name,
                'service_label': todo.service_label,
                'customer_phone': todo.customer_phone,
                'customer_address': todo.customer_address,
                'completion_timeout': todo.operation_proc.completion_timeout,
                'scheduled_time': todo.scheduled_time.strftime("%m.%d %H:%M"),
            })
        items.append({'title': _item['title'], 'todos': todos})

    # 发送channel_message给操作员
    send_channel_message(operator.hssc_id, {'type': 'send_staff_todo_list', 'data': items})

# 搜索给定关键字的客户基本信息列表
def search_customer_profile_list(search_text):
    from core.models import Customer, ManagedEntity
    import json
    # 获取客户实体对象
    customer_entity = ManagedEntity.objects.get(name='customer')

    # 获取客户基本信息表model，用于后续查询
    customer_profile_model = customer_entity.base_form.service_set.all()[0].name.capitalize()

    # 获取客户基本信息的展示表头
    customer_profile_fields = json.loads(customer_entity.header_fields_json)
    # 构造客户基本信息表头
    customer_profile_fields_header = ['用户名']
    for field in customer_profile_fields:
        customer_profile_fields_header.append(field['label'])

    customer_profiles = []
    for customer in Customer.objects.filter(name__icontains=search_text):
        # 获取客户最新基本信息
        profile = eval(customer_profile_model).objects.filter(customer=customer).last()

        selected_profile = []
        for field in customer_profile_fields:
            selected_profile.append(getattr(profile, field['name']))

        # 构造客户基本信息列表
        customer_profile = {'id': customer.id, 'name': customer.name, 'selected_profile': selected_profile}
        customer_profiles.append(customer_profile)

    # 返回客户基本信息列表和表头
    return customer_profiles, customer_profile_fields_header


# 更新客户服务列表
def update_customer_services_list(customer):
    from core.models import HsscFormModel

    # 判断服务表单是否已经完成，已完成返回空字符串''，否则返回'*'
    def is_service_form_completed(proc):
        content_object = proc.content_object
        # 表单所有字段
        content_object_fields = [field.name for field in content_object._meta.get_fields()]

        # 表单基类字段
        base_class_fields = [field.name for field in HsscFormModel._meta.get_fields()]

        # 表单非基类字段
        non_base_class_fields = [field for field in content_object_fields if field not in base_class_fields]

        for field in non_base_class_fields:
            field_value = getattr(content_object, field)
            if field_value is None or field_value == '':
                return '*'

        return ''

    # 已安排服务
    scheduled_services = [
        {
            'service_entry': proc.entry,
            'service_label': proc.service.label,
            'service_id': proc.service.id,
            'completion_timeout': proc.completion_timeout,
        } for proc in customer.get_scheduled_services()
    ]

    # 历史服务
    history_services = []
    # 如果service是安排服务包和安排服务，则获取所安排服务包或服务的label，并添加到service.label后面；否则获取service的label
    for proc in customer.get_history_services():
        service_label = proc.service.label
        if proc.service.name == 'CustomerSchedulePackage':
            service_label = service_label + ' -- ' + proc.content_object.servicepackage.label
        elif proc.service.name == 'CustomerSchedule':
            service_label = service_label + ' -- ' + proc.content_object.service.label

        # 判断服务表单是否已经完成
        is_completed = is_service_form_completed(proc)

        # 构造历史服务列表
        history_services.append({
            'service_entry': proc.entry,
            'service_label': f'{service_label} {is_completed}',
            'service_id': proc.service.id,
        })

    servicesList = {
        'scheduled_services': scheduled_services,
        'history_services': history_services,
    }
    # 发送channel_message给操作员
    send_channel_message(f'customer_services_{customer.id}', {'type': 'send_customer_services_list', 'data': servicesList})

# 更新客户推荐服务项目列表
def update_customer_recommended_services_list(customer):
    # # 推荐服务
    recommendedServices = [
        {
            'id': recommend_service.id,
            'customer_id': customer.id,
            'service_id': recommend_service.service.id,
            'service_label': recommend_service.service.label,
            'enable_queue_counter': recommend_service.service.enable_queue_counter,
            'queue_count': OperationProc.objects.get_service_queue_count(recommend_service.service),
            'counter': recommend_service.counter,
        } for recommend_service in customer.get_recommended_services()
    ]

    # 发送channel_message给操作员
    send_channel_message(f'customer_recommended_services_{customer.id}', {'type': 'send_customer_recommended_services_list', 'data': recommendedServices})


# 把客户服务项目安排转为客户服务日程
def get_services_schedule(instances):
    def _get_schedule_times(instance, idx, first_start_time, previous_end_time):
        # 返回: 计划时间列表
        def _add_base_interval(time, interval):
            if interval:
                time = time + interval
            return time
            
        unit_days = instance.cycle_unit.days  # 周期单位天数
        cycle_frequency = instance.cycle_frequency  # 每周期频次
        total_days = instance.cycle_times  # 总天数
        begin_option = instance.default_beginning_time  # 执行时间基准
        base_interval = instance.base_interval  # 基准间隔

        if idx == 0:  # 调整首个服务的开始时间
            if begin_option in [2,3]:
                begin_option = 1

        # 计算开始时间
        start_time = None
        # (0, '无'), (1, '当前系统时间'), (2, '首个服务开始时间'), (3, '上个服务结束时间'), (4, '客户出生日期')
        from django.utils import timezone
        if begin_option == 1:
            start_time = _add_base_interval(timezone.now(), base_interval)
        elif begin_option == 2:
            start_time = _add_base_interval(first_start_time, base_interval)
        elif begin_option == 3:
            start_time = _add_base_interval(previous_end_time, base_interval)
        elif begin_option == 4:
            start_time = _add_base_interval(timezone.now(), base_interval)  # TODO: 客户出生日期

        if start_time:
            # 计算总次数
            times = total_days // unit_days * cycle_frequency
            # 计算每次间隔小时数
            interval_hours = unit_days * 24 // cycle_frequency
            # 从开始时间开始，每次间隔interval_hours小时，给出时间列表
            schedule_times = []
            from datetime import timedelta
            for i in range(times):
                schedule_times.append(start_time + timedelta(hours=interval_hours * i))

            return schedule_times
        else:
            return []

    schedule = []  # 客户服务日程:[{'customer': customer, 'servicepackage': servicepackage, 'service': service, 'scheduled_time': scheduled_time, 'scheduled_operator': scheduled_operator, 'overtime': overtime}, ]
    first_start_time = None
    previous_end_time = None

    for idx, instance in enumerate(instances):
        schedule_times = _get_schedule_times(
            instance,
            idx,  
            first_start_time,  # 首个服务开始时间
            previous_end_time,  # 上个服务结束时间
            )

        if schedule_times:
            if idx == 0:
                first_start_time = schedule_times[0]  # 获取首个服务开始时间
            previous_end_time = schedule_times[-1]  # 获取上个服务结束时间

        for time in schedule_times:
            schedule.append({
                'scheduled_draft': instance,
                'service': instance.service,  # 服务项目
                'scheduled_time': time,
                'scheduled_operator': instance.scheduled_operator,
                'overtime': instance.overtime,
            })

    return schedule


from django.dispatch import receiver
from django.db.models.signals import post_save, post_delete

@receiver(post_save, sender=StaffTodo)
def staff_todo_post_save_handler(sender, instance, created, **kwargs):
    # 根据operator过滤出操作员的今日安排、紧要安排、本周安排
    update_staff_todo_list(instance.operator)

@receiver(post_delete, sender=StaffTodo)
def staff_todo_post_delete_handler(sender, instance, **kwargs):
    # 根据operator过滤出操作员的今日安排、紧要安排、本周安排
    update_staff_todo_list(instance.operator)

from core.models import RecommendedService

@receiver(post_save, sender=RecommendedService)
def recommended_service_post_save_handler(sender, instance, created, **kwargs):
    # 根据customer过滤出用户的可选服务，发送channel_message给“用户服务组”
    update_customer_recommended_services_list(instance.customer)

@receiver(post_delete, sender=RecommendedService)
def recommended_service_post_delete_handler(sender, instance, **kwargs):
    # 根据customer过滤出用户的可选服务，发送channel_message给“用户服务组”
    update_customer_recommended_services_list(instance.customer)


# **********************************************************************************************************************
# KMP算法：查找字段名在表达式（字符串）中的位置，并用字段值替换
# **********************************************************************************************************************
def field_name_replace(s, replace_dict):
    import re
    next = []
    changed_str = s

    def buildNext():
        next.append(0)
        x = 1
        now = 0
        while x < len(p):
            if p[now] == p[x]:
                now += 1
                x += 1
                next.append(now)
            elif now:
                now = next[now-1]
            else:
                next.append(0)
                x += 1

    def search(new_str):
        tar = 0
        pos = 0
        while tar < len(s):
            if s[tar] == p[pos]:
                tar += 1
                pos += 1
            elif pos:
                pos = next[pos-1]
            else:
                tar += 1
            if pos == len(p):   # 匹配成功
                next_str = re.sub(p, replace_dict[p], new_str)
                pos = next[pos-1]
                return next_str

    for p in replace_dict:
        buildNext()
        changed_str = search(changed_str)

    return changed_str

# KMP算法：查找字典中的关键词在字符串中的位置
def keyword_search(s, keywords_list):
    next = []
    match = []

    def buildNext():
        next.append(0)
        x = 1
        now = 0
        while x < len(p):
            if p[now] == p[x]:
                now += 1
                x += 1
                next.append(now)
            elif now:
                now = next[now-1]
            else:
                next.append(0)
                x += 1

    def search():
        tar = 0
        pos = 0
        while tar < len(s):
            if s[tar] == p[pos]:
                tar += 1
                pos += 1
            elif pos:
                pos = next[pos-1]
            else:
                tar += 1
            if pos == len(p):   # 匹配成功
                match.append(p)
                pos = next[pos-1]

    for p in keywords_list:
        buildNext()
        search()
    keywords = sorted(set(match), key=match.index)
    return keywords

********************************************************************************
File: core/admin.py
********************************************************************************

from django.contrib import admin
from django.shortcuts import render, redirect
from django.urls import path
from django.contrib.auth.models import User

from core.models import *


class ClinicSite(admin.AdminSite):
    site_header = '智益诊所管理系统'
    site_title = 'Hssc Clinic'
    index_title = '诊所工作台'
    enable_nav_sidebar = False
    index_template = 'admin/index_clinic.html'
    site_url = None

    def get_urls(self):
        urls = super().get_urls()
        my_urls = [
            path('receive_task/<int:proc_id>/', self.receive_task),
            path('customer_service/<int:customer_id>/', self.customer_service),
            path('search_customers/', self.search_customers),
        	path('search_services/<int:customer_id>/', self.search_services, name='search_services'),
            path('new_service/<int:customer_id>/<int:service_id>/<int:recommended_service_id>/', self.new_service, name='new_service'),
            path('new_service_schedule/<int:customer_id>/<int:service_id>/', self.new_service_schedule, name='new_service_schedule'),
            path('new_service_package_schedule/<int:customer_id>/<int:service_package_id>/', self.new_service_package_schedule, name='new_service_package_schedule'),
            path('update_customer_schedules/<int:customer_schedule_package_id>/', self.update_customer_schedules, name='update_customer_schedules'),
        ]
        return my_urls + urls

    # 职员登录后的首页
    def index(self, request, extra_context=None):
        # extra_context = extra_context or {}
        # user = User.objects.get(username=request.user).customer

        return super().index(request, extra_context=extra_context)

    # 接受任务：把任务放入当前用户的待办列表中
    def receive_task(self, request, **kwargs):
        operation_proc = OperationProc.objects.get(id = kwargs['proc_id'])
        operation_proc.operator = User.objects.get(username=request.user).customer
        operation_proc.state = 1
        operation_proc.save()
        return redirect('/clinic/')

    # 客户服务首页
    def customer_service(self, request, **kwargs):
        context = {}
        customer = Customer.objects.get(id = kwargs['customer_id'])
        operator = User.objects.get(username=request.user).customer
        
        # 病例首页
        from core.business_functions import get_customer_profile
        context['profile'] = get_customer_profile(customer)

        # 生成响应对象
        response = render(request, 'customer_service.html', context)

        # 向sessionStorage写入customer_id
        response.set_cookie('customer_id', kwargs['customer_id'])
        
        # 获取操作员有操作权限的服务id列表, 写入cookie
        from core.business_functions import get_operator_permitted_services
        permitted_services_id = get_operator_permitted_services(operator)
        response.set_cookie('permitted_services_id', permitted_services_id)

        return response

    # 搜索客户，返回客户列表
    def search_customers(self, request):
        from django.db.models import Q
        from core.business_functions import search_customer_profile_list
        # 从request.POST获取search
        print('request.POST:', request.POST)
        search_text = request.POST.get('search')
        context = {}
        if search_text is None or search_text == '':
            context['customer_profiles'] = None
        else:
            # 获取客户基本信息
            customer_profiles, customer_profile_fields_header = search_customer_profile_list(search_text)
            context['customer_profiles'] = customer_profiles
            context['customer_profile_fields_header'] = customer_profile_fields_header
        return render(request, 'customers_list.html', context)

    # 搜索服务，返回服务/服务包列表
    def search_services(self, request, **kwargs):
        # 从request.POST获取search
        print('request.POST:', request.POST)
        search_text = request.POST.get('search')

        context = {}
        context['services'] = [
            {
                'id': service.id, 
                'label': service.label,
                'enable_queue_counter': service.enable_queue_counter,
                'queue_count': OperationProc.objects.get_service_queue_count(service)
            } for service in Service.objects.filter(Q(service_type=2) & (Q(label__icontains=search_text) | Q(pym__icontains=search_text)))
        ]        
        context['service_packages'] = [
            {
                'id': service_package.id, 
                'label': service_package.label,
            } for service_package in ServicePackage.objects.filter(Q(label__icontains=search_text) | Q(pym__icontains=search_text))
        ]
        context['customer_id'] = kwargs['customer_id']

        return render(request, 'services_list.html', context)

    # 创建服务
    def new_service(self, request, **kwargs):
        '''
        人工创建新服务：作业进程+表单进程
        从kwargs获取参数：customer_id, service_id
        '''
        from core.business_functions import create_service_proc, dispatch_operator
        # 从request获取参数：customer, service, operator
        customer = Customer.objects.get(id=kwargs['customer_id'])
        current_operator = User.objects.get(username=request.user).customer
        service = Service.objects.get(id=kwargs['service_id'])
        service_operator = dispatch_operator(customer, service, current_operator)
        content_type = ContentType.objects.get(app_label='service', model=service.name.lower())

        # 准备新的服务作业进程参数
        proc_params = {}
        proc_params['service'] = service
        proc_params['customer'] = customer
        proc_params['creater'] = current_operator
        proc_params['operator'] = service_operator
        proc_params['state'] = 0  # or 0 根据服务作业权限判断
        proc_params['scheduled_time'] = timezone.now() # or None 根据服务作业权限判断
        proc_params['contract_service_proc'] = None
        proc_params['content_type'] = content_type
        proc_params['form_data'] = None

        # 如果是推荐服务，解析parent_proc和passing_data
        if kwargs['recommended_service_id']:
            recommended_service = RecommendedService.objects.get(id=kwargs['recommended_service_id'])
            proc_params['parent_proc'] = recommended_service.pid
            proc_params['passing_data'] = recommended_service.passing_data
        else:
            # 人工创建服务，没有父进程
            proc_params['parent_proc'] = None
            # 人工创建服务，没有传递数据
            proc_params['passing_data'] = 0

        # 创建新的OperationProc服务作业进程实例
        new_proc = create_service_proc(**proc_params)

        # 如果请求来自可选服务，从可选服务队列中删除服务
        if kwargs['recommended_service_id']:
            RecommendedService.objects.get(id=kwargs['recommended_service_id']).delete()

        # 如果开单给作业员本人，进入修改界面
        if service_operator == current_operator:
            # 重定向到/clinic/service/model/id/change
            return redirect(new_proc.entry)
        else:  # 否则显示提示消息：开单成功
            from django.contrib import messages
            messages.add_message(request, messages.INFO, f'{service.label}已开单')
            return redirect(customer)

    # 创建新的服务日程
    def new_service_schedule(self, request, **kwargs):
        # 1. 创建"安排服务计划"服务进程
        customer_id = kwargs['customer_id']
        customer = Customer.objects.get(id=customer_id)
        current_operator = User.objects.get(username=request.user).customer
        service = Service.objects.get(name='CustomerSchedule')
        content_type = ContentType.objects.get(app_label='service', model='customerschedule')
        # 创建一个状态为“运行”的“安排服务计划”作业进程
        new_proc=OperationProc.objects.create(
            service=service,  # 服务
            customer=customer,  # 客户
            operator=current_operator,  # 作业人员
            creater=current_operator,  # 创建者
            state=2,  # 进程状态：运行
            content_type=content_type,  # 内容类型
            overtime=service.overtime,  # 超时时间
            working_hours=service.working_hours,  # 工作时间
        )

        # 2. 创建服务计划安排: CustomerSchedule
        from service.models import CustomerSchedule
        customerschedule = CustomerSchedule.objects.create(
            customer=customer,  # 客户
            operator=current_operator,  # 作业人员
            creater=current_operator,  # 创建者
            pid=new_proc,  # 服务作业进程
            cpid=None,
            service=Service.objects.get(id=kwargs['service_id']),  # 服务
        )

        # 3. 更新OperationProc服务进程的form实例信息
        new_proc.object_id = customerschedule.id
        new_proc.entry = f'/clinic/service/customerschedule/{customerschedule.id}/change'
        new_proc.save()

        return redirect(new_proc.entry)

    # 创建新的服务包计划
    def new_service_package_schedule(self, request, **kwargs):
        # 1. 创建"安排服务计划"服务进程
        customer_id = kwargs['customer_id']
        customer = Customer.objects.get(id=customer_id)
        current_operator = User.objects.get(username=request.user).customer
        service = Service.objects.get(name='CustomerSchedulePackage')
        content_type = ContentType.objects.get(app_label='service', model='customerschedulepackage')
        # 创建一个状态为“运行”的“安排服务计划”作业进程
        new_proc=OperationProc.objects.create(
            service=service,  # 服务
            customer=customer,  # 客户
            operator=current_operator,  # 作业人员
            creater=current_operator,  # 创建者
            state=2,  # 进程状态：运行
            content_type=content_type,  # 内容类型
            overtime=service.overtime,  # 超时时间
            working_hours=service.working_hours,  # 工作时间
        )

        # 2. 创建客户服务包和服务项目安排: CustomerSchedulePackage, CustomerScheduleDraft
        # 获取服务包信息: ServicePackage, ServicePackageDetail
        service_package_id = kwargs['service_package_id']
        servicepackage = ServicePackage.objects.get(id=service_package_id)
        servicepackagedetails = ServicePackageDetail.objects.filter(servicepackage=servicepackage)
        # 创建客户服务包
        from service.models import CustomerSchedulePackage, CustomerScheduleDraft
        customerschedulepackage = CustomerSchedulePackage.objects.create(
            customer=customer,  # 客户
            operator=current_operator,  # 作业人员
            creater=current_operator,  # 创建者
            pid=new_proc,  # 服务作业进程
            cpid=None,
            servicepackage=servicepackage,  # 服务包
        )
        # 创建服务项目安排
        for servicepackagedetail in servicepackagedetails:
            print('servicepackagedetail:', servicepackagedetail.cycle_frequency, type(servicepackagedetail.cycle_frequency), servicepackagedetail.cycle_times, type(servicepackagedetail.cycle_times))
            CustomerScheduleDraft.objects.create(
                schedule_package=customerschedulepackage,  # 客户服务包
                service=servicepackagedetail.service,  # 服务项目
                cycle_unit=servicepackagedetail.cycle_unit,  # 周期单位
                cycle_frequency=servicepackagedetail.cycle_frequency,  # 每周期频次
                cycle_times=servicepackagedetail.cycle_times,  # 周期总数/天数
                default_beginning_time=servicepackagedetail.default_beginning_time,  # 执行时间基准
                base_interval=servicepackagedetail.base_interval,  # 基准间隔
            )

        # 3. 更新OperationProc服务进程的form实例信息
        new_proc.object_id = customerschedulepackage.id
        new_proc.entry = f'/clinic/service/customerschedulepackage/{customerschedulepackage.id}/change'
        new_proc.save()

        return redirect(new_proc.entry)

    # 更新客户服务日程
    def update_customer_schedules(self, request, **kwargs):
        from django.forms import ModelForm, modelformset_factory
        from service.models import CustomerSchedulePackage, CustomerSchedule
        class CustomerSchedulePackageForm(ModelForm):
            class Meta:
                model = CustomerSchedulePackage
                fields = ('customer', 'servicepackage', )

        CustomerScheduleFormset = modelformset_factory(CustomerSchedule, fields=('service', 'scheduled_time', 'scheduled_operator',), extra=0, can_delete=False)
        customerschedulepackage = CustomerSchedulePackage.objects.get(id=kwargs['customer_schedule_package_id'])
        customer_form = CustomerSchedulePackageForm(instance=customerschedulepackage)
        queryset = CustomerSchedule.objects.filter(schedule_package=customerschedulepackage).order_by('scheduled_time')
        if request.method == 'POST':
            customer_schedules_formset = CustomerScheduleFormset(request.POST)
            if customer_schedules_formset.is_valid():
                customer_schedules_formset.save()        
            return redirect(customerschedulepackage.customer)
        else:
            customer_schedules_formset = CustomerScheduleFormset(queryset=queryset)
            context = {
                'customer_form': customer_form,
                'formset': customer_schedules_formset,
            }
            return render(request, 'customerschedule_update.html', context)

clinic_site = ClinicSite(name = 'ClinicSite')


# **********************************************************************************************************************
# Service 配置 Admin
# **********************************************************************************************************************
@admin.register(Medicine)
class MedicineAdmin(admin.ModelAdmin):
    search_fields = ('name', 'pym')
clinic_site.register(Medicine, MedicineAdmin)


@admin.register(Role)
class RoleAdmin(admin.ModelAdmin):
    search_fields = ('name', 'pym')
clinic_site.register(Role, RoleAdmin)


@admin.register(BuessinessForm)
class BuessinessFormAdmin(admin.ModelAdmin):
    list_display = ['name_icpc', 'label', 'name', 'id']
    list_display_links = ['label', 'name',]
    fieldsets = (
        (None, {
            'fields': (('label', 'name_icpc'), 'description', ('api_fields', 'name', 'hssc_id'), )
        }),
    )
    search_fields = ['name', 'label', 'pym']
    readonly_fields = ['api_fields', 'name', 'hssc_id']
    autocomplete_fields = ['name_icpc',]
clinic_site.register(BuessinessForm, BuessinessFormAdmin)

@admin.register(ManagedEntity)
class ManagedEntityAdmin(admin.ModelAdmin):
    readonly_fields = ['hssc_id', 'pym', 'name', 'model_name', 'header_fields_json']


class BuessinessFormsSettingInline(admin.TabularInline):
    model = BuessinessFormsSetting
    exclude = ['name', 'label', 'hssc_id']
    autocomplete_fields = ['buessiness_form']

@admin.register(Service)
class ServiceAdmin(admin.ModelAdmin):
    list_display = ['name_icpc', 'label', 'name', 'id']
    list_display_links = ['label', 'name',]
    fieldsets = (
        ('基本信息', {
            'fields': (('label', 'name_icpc'), ('managed_entity', 'priority', 'service_type'), 'role', 'history_services_display', 'enable_queue_counter', 'route_to', ('working_hours' ,'overtime'), ('name', 'hssc_id'))
        }),
        ('作业管理', {
            'fields': ('suppliers', 'not_suitable', 'cost', 'load_feedback')
        }),
        ('资源配置', {
            'fields': ('resource_materials','resource_devices','resource_knowledge')
        }),
    )
    search_fields=['label', 'pym']
    ordering = ['id']
    readonly_fields = ['name', 'hssc_id']
    inlines = [BuessinessFormsSettingInline]
    filter_horizontal = ("role",)
    autocomplete_fields = ["name_icpc"]
clinic_site.register(Service, ServiceAdmin)


@admin.register(CycleUnit)
class CycleUnitAdmin(admin.ModelAdmin):
    list_display = ['cycle_unit', 'days',]
    list_display_links = ['cycle_unit', 'days',]
    readonly_fields = ['hssc_id', 'name', 'pym']

class ServicePackageDetailInline(admin.TabularInline):
    model = ServicePackageDetail
    exclude = ['name', 'label', 'hssc_id', 'pym']
    autocomplete_fields = ['service']

@admin.register(ServicePackage)
class ServicePackageAdmin(admin.ModelAdmin):
    list_display = ['name_icpc', 'label', 'id']
    list_display_links = ['label', ]
    fieldsets = (
        (None, {
            'fields': (('label', 'name_icpc'), ('name', 'hssc_id'))
        }),
    )
    search_fields=['label', 'pym']
    readonly_fields = ['name', 'hssc_id']
    inlines = [ServicePackageDetailInline]
    ordering = ['id']


admin.site.register(SystemOperand)

@admin.register(EventRule)
class EventRuleAdmin(admin.ModelAdmin):
    list_display = ('label', 'description', 'expression', 'detection_scope', 'weight')
    list_display_links = ['label', 'description']
    search_fields=['label', 'name', 'pym']
    readonly_fields = ['hssc_id']
    ordering = ('id',)


@admin.register(ServiceRule)
class ServiceRuleAdmin(admin.ModelAdmin):
    list_display = ['label', 'service', 'event_rule', 'system_operand', 'next_service', 'passing_data', 'complete_feedback', 'is_active']
    list_editable = ['service', 'event_rule', 'system_operand', 'next_service', 'passing_data', 'complete_feedback', 'is_active']
    list_display_links = ['label', ]
    readonly_fields = ['name', 'hssc_id']
    autocomplete_fields = ['service', 'next_service', 'event_rule']
    ordering = ['id']


admin.site.register(ContractService)


# **********************************************************************************************************************
# Service 进程管理 Admin
# **********************************************************************************************************************
admin.site.register(ContractServiceProc)
clinic_site.register(ContractServiceProc)

@admin.register(OperationProc)
class OperationProcAdmin(admin.ModelAdmin):
    list_display = ['id', 'service', 'operator', 'customer', 'state', 'entry', 'parent_proc', 'contract_service_proc']
    list_display_links = ['service', 'operator', 'customer', 'state', 'entry', 'parent_proc', 'contract_service_proc']
    ordering = ['id']
clinic_site.register(OperationProc, OperationProcAdmin)


admin.site.register(StaffTodo)
clinic_site.register(StaffTodo)

@admin.register(Customer)
class CustomerAdmin(admin.ModelAdmin):
    search_fields = ['name', 'phone']
clinic_site.register(Customer, CustomerAdmin)

@admin.register(Staff)
class StaffAdmin(admin.ModelAdmin):
    search_fields = ['name']
clinic_site.register(Staff, StaffAdmin)

@admin.register(Workgroup)
class WorkgroupAdmin(admin.ModelAdmin):
    list_display = ('label', 'leader')
    readonly_fields = ['name']
clinic_site.register(Workgroup, WorkgroupAdmin)

@admin.register(Institution)
class InstitutionAdmin(admin.ModelAdmin):
    search_fields = ['name']
clinic_site.register(Institution, InstitutionAdmin)

admin.site.register(CustomerServiceLog)
clinic_site.register(CustomerServiceLog)

admin.site.register(RecommendedService)
clinic_site.register(RecommendedService)

admin.site.register(Message)
clinic_site.register(Message)

admin.site.register(ExternalServiceMapping)
clinic_site.register(ExternalServiceMapping)


# 承保人员清单可导入
from import_export import resources
from import_export.admin import ImportExportModelAdmin

class ChengBaoRenYuanQingDanResource(resources.ModelResource):
    class Meta:
        model = ChengBaoRenYuanQingDan
        # exclude = ['LastCycleDate']

class ChengBaoRenYuanQingDanAdmin(ImportExportModelAdmin):
    resource_class = ChengBaoRenYuanQingDanResource
admin.site.register(ChengBaoRenYuanQingDan, ChengBaoRenYuanQingDanAdmin)



# **********************************************************************************************************************
# 业务数据备份
# **********************************************************************************************************************

from django.http import HttpResponseRedirect
from django.core.serializers.json import DjangoJSONEncoder
import json
from time import time

# 每个需要备份的model都需要在这里添加
# 不备份在其他表新增内容时自动插入内容的表，Component, RelateFieldModel
Backup_models = [
    Customer,
    ContractServiceProc,
    OperationProc,
    StaffTodo,
    Institution,
    Staff,
    Workgroup,
    CustomerServiceLog,
    RecommendedService,
    Message,
]

@admin.register(BackupData)
class BackupDataAdmin(admin.ModelAdmin):
    list_display = ('name', 'create_time')
    # 增加一个自定义按钮“备份设计数据”
    change_list_template = 'backup_data_changelist.html'

    def get_urls(self):
        urls = super().get_urls()
        my_urls = [
            path('backup_data/', self.backup_data),
        ]
        return my_urls + urls

    # 备份设计数据
    def backup_data(self, request):
        backup_data = {}
        for model in Backup_models:
            _model = model.__name__.lower()
            backup_data[_model]=model.objects.backup_data()
            json.dumps(backup_data[_model], indent=4, ensure_ascii=False, cls=DjangoJSONEncoder)
        
        backup_name = str(int(time()))
        # 写入数据库
        result = BackupData.objects.create(
            name = backup_name,
            code = json.dumps(backup_data, indent=4, ensure_ascii=False, cls=DjangoJSONEncoder),
        )
        print(f'设计数据备份成功, id: {result}')

        # 写入json文件
        print('开始写入json文件...')
        with open(f'./core/backup/data_{backup_name}.json', 'w', encoding='utf-8') as f:
            json.dump(backup_data, f, indent=4, ensure_ascii=False, cls=DjangoJSONEncoder)
            print(f'ICPC写入成功, id: {backup_name}')

        return HttpResponseRedirect("../")

********************************************************************************
File: core/utils.py
********************************************************************************

from hssc.settings import env

# 构造公众号模板消息data
def get_wechat_template_message_data(open_id, message, form_data):
    # open_id: oh-n76oPPMqx21HoXNW0T1kEACGQ
    data =  {
        "touser": open_id,
        "template_id": "",
        "url":"",
        "data":{
                "first": {
                    "value": "",
                    "color": "#173177"
                },
                "remark":{
                    "value": "",
                    "color":"#173177"
                }
        }
    }

    data['template_id'] = message.pop('template_id', None)  # 从message中取出模板参数template_id
    data['data']['first']['value'] = message.pop('title', None)  # 从message中取出模板参数title
    data['data']['remark']['value'] = message.pop('remark', None)  # 从message中取出模板参数remark
    print('template_id:', data['template_id'])
    print('title:', data['data']['first']['value'])
    print('remark:', data['data']['remark']['value'])

    # 构造模板参数keyword
    for key in message:
        print(key, form_data[message[key]])
        data['data'][key] = {"value": "", "color":"#173177"}

        # 获取模板参数keyword包含的表单字段的值
        data['data'][key]['value'] = form_data[message[key]]

    return data


# 发送公众号模板消息
from django.views.decorators.csrf import csrf_exempt
@csrf_exempt
def send_wechat_template_message(data):
    import requests
    import json

    access_token = ''
    # exp_time = 0
    def get_access_token():
        # global exp_time
        APPID = env('WECHAT_APP_ID')
        APPSECRET = env('WECHAT_APP_SECRET')
        # if time.time() > exp_time:
        _url = f'https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid={APPID}&secret={APPSECRET}'
        _r = requests.get(_url)
        _d = json.loads(_r.text)
        print('get access token:', _d)
        access_token = _d['access_token']
            # exp_time = time.time() + _d['expires_in'] - 10  # 减一点防止快到时间的时候已经失效了
        return access_token

    access_token = get_access_token()
    url = f'https://api.weixin.qq.com/cgi-bin/message/template/send?access_token={access_token}'
    result = requests.post(url, json.dumps(data))
    
    return result


# 发送企业微信消息
def send_wecom_message(uid, message):
    from wechatpy.enterprise import WeChatClient
    from wechatpy.session.redisstorage import RedisStorage
    from redis import Redis

    redis_client = Redis.from_url(env('REDIS_URL'))
    session_interface = RedisStorage(
        redis_client,
        prefix="wechatpy"
    )

    wechat_client = WeChatClient(
        env('CORP_ID'),
        env('SECRET'),
        session=session_interface
    )

    uid = 'XiaoMai'  # 待修改
    result = wechat_client.message.send_text(env('AGENT_ID'), uid, message)
    # user = wechat_client.user.get('user id')
    # menu = wechat_client.menu.get()
    return result


def get_customer_status(open_id):
    """
    查找是否有对应的用户
    如果查到对应用户，返回服务状态
    param open_id
    return: 服务状态 Boolean
    """
    from django.core.exceptions import ObjectDoesNotExist
    from core.models import Customer
    try:
        # open_id: oh-n76oPPMqx21HoXNW0T1kEACGQ
        customer = Customer.objects.get(weixin_openid=open_id)
        return customer, True  # 找到对应用户
    except ObjectDoesNotExist:
        return None, False  # 没有对应用户
********************************************************************************
File: core/routing.py
********************************************************************************

from django.urls import path, re_path

from core.consumers import UnassignedProcsConsumer, StaffTodoConsumer, CustomerRecommendedServicesListConsumer, CustomerServicesListConsumer


ws_urlpatterns = [
    path('ws/unassigned_procs/', UnassignedProcsConsumer.as_asgi()),
    path('ws/staff_todos_list/', StaffTodoConsumer.as_asgi()),
    path('ws/customer_recommended_services_list/<int:customer_id>/', CustomerRecommendedServicesListConsumer.as_asgi()),
    path('ws/customer_services_list/<int:customer_id>/', CustomerServicesListConsumer.as_asgi()),
]
********************************************************************************
File: core/scheduler.py
********************************************************************************

from django.contrib.contenttypes.models import ContentType
from django.dispatch import receiver
from django.db.models.signals import post_save, post_delete
from django.contrib.auth.signals import user_logged_in, user_logged_out
from django.contrib.auth.models import User
from django.utils import timezone
from datetime import timedelta, datetime
from django.forms import model_to_dict
from enum import Enum
from registration.signals import user_registered, user_activated, user_approved

from core.models import Service, ServiceRule, Staff, Customer, CustomerServiceLog, OperationProc, StaffTodo, RecommendedService, Message, ChengBaoRenYuanQingDan
from core.business_functions import field_name_replace
from core.signals import operand_started, operand_finished  # 自定义作业完成信号


# 数据导入ChengBaoRenYuanQingDan时，自动插入service.models.Ju_min_ji_ben_xin_xi_diao_cha
@receiver(post_save, sender=ChengBaoRenYuanQingDan)
def chengbao_renyuan_qingdan_post_save_handler(sender, instance, created, **kwargs):
    from service.models import Ju_min_ji_ben_xin_xi_diao_cha
    if created:
        # 字段对应关系
        cheng_bao_ren_yuan_qing_dan_map = {
            '序号': 'boolfield_xu_hao',
            '保单号': 'boolfield_bao_dan_hao',
            '被保人姓名': 'boolfield_bei_bao_ren_xing_ming',
            '证件类型': 'boolfield_zheng_jian_lei_xing',
            '身份证号': 'boolfield_zheng_jian_hao_ma',
            '出生日期': 'boolfield_chu_sheng_ri_qi',
            '保险责任': 'boolfield_bao_xian_ze_ren',
            '保险有效期': 'boolfield_bao_xian_you_xiao_qi',
            '联系方式': 'boolfield_lian_xi_dian_hua',
        }

        # 创建User实例
        user = User.objects.create_user(instance.被保人姓名, None, instance.联系方式)

        # # 创建客户档案
        # customer = Customer.objects.create(
        #     user=user,
        #     name=instance.被保人姓名,
        #     phone=instance.联系方式,
        # )
        customer = user.customer

        # 创建参保人员
        ju_min_ji_ben_xin_xi_diao_cha = Ju_min_ji_ben_xin_xi_diao_cha.objects.create(
            customer=customer,
            boolfield_xu_hao=instance.序号,
            boolfield_bao_dan_hao=instance.保单号,
            boolfield_bei_bao_ren_xing_ming=instance.被保人姓名,
            # boolfield_zheng_jian_lei_xing=instance.证件类型,
            boolfield_zheng_jian_hao_ma=instance.身份证号,
            boolfield_chu_sheng_ri_qi=datetime.strptime(instance.出生日期, "%Y-%m-%d"),
            boolfield_bao_xian_ze_ren=instance.保险责任,
            boolfield_bao_xian_you_xiao_qi=datetime.strptime(instance.保险有效期, "%Y-%m-%d"),
            boolfield_lian_xi_dian_hua=instance.联系方式,
        )


@receiver(user_logged_in)
def user_logged_in_handler(sender, user, request, **kwargs):
    '''
    系统内置业务事件的信号处理：用户注册，用户登录，员工登录
    收到登录信号，生成用户/职员登录事件
    '''
    # 用户登录Session登记
    from analytics.models import record_login
    record_login(request, user)

    # 获得登陆作业进程参数
    if user.is_staff:  # 职员登录
        event_name = 'doctor_login'
        customer = None
        operator = creater = user.customer
        print('职员登录', user, event_name)
    else:
        event_name = 'user_login'   # 客户登录
        customer = operator = creater = user.customer
        print('客户登录', user, event_name)

    # 创建一个状态为“已完成”的职员/客户登录作业进程
    new_proc=OperationProc.objects.create(
        service=Service.objects.get(name=event_name),  # 服务
        customer=customer,  # 客户
        operator=operator,  # 作业人员
        creater=creater,  # 创建者
        state=4,  # 进程状态：登录完成
    )

    # 发送登录作业完成信号
    operand_finished.send(sender=user_logged_in_handler, pid=new_proc, request=request, form_data=None)


# 收到注册成功信号，生成用户注册事件：registration.signals.user_registered
@receiver(user_registered)
def user_registered_handler(sender, user, request, **kwargs):
    # 获得注册作业进程参数
    if user.is_staff:  # 职员注册
        event_name = 'staff_registered'
        customer = None
        operator = creater = user.customer
        print('职员注册', user, event_name)
    else:
        event_name = 'Z6201'   # 客户注册
        customer = operator = creater = user.customer
        print('客户注册', user, event_name)

    # 创建一个状态为“已完成”的职员/客户注册作业进程
    new_proc=OperationProc.objects.create(
        service=Service.objects.get(name=event_name),  # 服务
        customer=customer,  # 客户
        operator=operator,  # 作业人员
        creater=creater,  # 创建者
        state=4,  # 进程状态：注册完成
    )

    # 发送注册作业完成信号
    operand_finished.send(sender=user_registered_handler, pid=new_proc, request=request, form_data=None)


@receiver(post_save, sender=User)
def user_post_save_handler(sender, instance, created, **kwargs):
    if created:  # 创建用户
        if instance.is_staff:  # 新建职员
            print('创建员工信息', instance)
            customer = Customer.objects.create(
                user=instance,
                name=instance.last_name+instance.first_name,
            )
            Staff.objects.create(
                customer=customer,
                email=instance.email,
            )
        else:  # 新建客户
            print('创建客户信息', instance)
            name = instance.last_name+instance.first_name if instance.last_name+instance.first_name else instance.username
            Customer.objects.create(
                user=instance,
                name=name,
            )
    # else:   # 更新用户
    #     if instance.is_staff:
    #         print('更新员工信息', instance)
    #         customer = instance.customer
    #         customer.name = instance.last_name+instance.first_name
    #         customer.save()
    #         customer.staff.email = instance.email
    #         customer.staff.save()
    #     else:   # 客户
    #         print('更新客户信息', instance)
    #         customer = instance.customer
    #         customer.name = instance.last_name+instance.first_name
    #         customer.save()


@receiver(post_delete, sender=User)
def user_post_delete_handler(sender, instance, **kwargs):
    '''
    删除用户后同步删除Customer和Staff相关信息
    '''
    if instance.is_staff:
        print('删除员工信息', instance)
        try:
            customer = instance.customer
            customer.staff.delete()
            instance.customer.delete()
        except:
            pass
    else:
        try:
            print('删除客户信息', instance)
            instance.customer.delete()
        except:
            pass


@receiver(post_save, sender=OperationProc)
def operation_proc_post_save_handler(sender, instance, created, **kwargs):
    from core.business_functions import update_unassigned_procs, update_customer_services_list
    # 更新职员任务工作台可申领的服务作业
    update_unassigned_procs()

    # 根据customer过滤出用户的已安排服务和历史服务，发送channel_message给“用户服务组”
    if instance.service.service_type in [1,2]:
        update_customer_services_list(instance.customer)

    # 根据服务进程创建待办事项: sync_proc_todo_list
    if instance.operator and instance.customer and instance.state < 4:
        try :
            todo = instance.stafftodo
            todo.scheduled_time = instance.scheduled_time
            todo.state = instance.state
            todo.priority = instance.priority
            todo.save()
        except StaffTodo.DoesNotExist:
            todo = StaffTodo.objects.create(
                operation_proc=instance,
                operator=instance.operator,
                scheduled_time=instance.scheduled_time,
                state=instance.state,
                customer_number=instance.customer.name,
                customer_name=instance.customer.name,
                service_label=instance.service.label,
                customer_phone=instance.customer.phone,
                customer_address=instance.customer.address,
                priority = instance.priority
            )



@receiver(operand_started)
def operand_started_handler(sender, **kwargs):
    operation_proc = kwargs['operation_proc']  # 作业进程
    operation_proc.update_state(kwargs['ocode'])  # 更新作业进程操作码    
    operation_proc.operator = kwargs['operator']  # 设置当前用户为作业进程操作员
    operation_proc.save()


@receiver(operand_finished)
def operand_finished_handler(sender, **kwargs):
    def _is_rule_satified(event_rule, operation_proc):
        '''
        检查表达式是否满足 return: Boolean
        parameters: form_data, self.expression
		'''
        def _get_scanned_data(event_rule, operation_proc, expression_fields_set):
            print('检测表单范围：', event_rule.detection_scope)
            # 1. 根据detection_scope生成待检测数据集合
            if event_rule.detection_scope == 'CURRENT_SERVICE':
                _scanned_data = operation_proc.customerservicelog.data
            else:
                '''
                获取一个时间段健康记录，按时间从早到晚的顺序合并成一个dict
                '''
                period = None  # 意味着self.detection_scope == 'ALL'表示获取全部健康记录
                if event_rule.detection_scope == 'LAST_WEEK_SERVICES':  # 获取表示指定时间段内的健康记录
                    start_time = timezone.now() + timedelta(days=-7)
                    end_time = timezone.now()
                    period = (start_time, end_time)

                # 取客户健康档案记录构造检测数据dict
                _scanned_data = {}
                logs = CustomerServiceLog.logs.get_customer_service_log(operation_proc.customer, period)            
                for log in logs:
                    _scanned_data = {**_scanned_data, **log.data}
                    
            print('From scheduler._get_scanned_data: 1. _scanned_data:', event_rule.detection_scope, _scanned_data)

            # 2. 根据表达式字段集合剪裁生成待检测数据字典
            scanned_data = {}
            for field_name in expression_fields_set:
                _value = _scanned_data.get(field_name, '')
                scanned_data[field_name] = _value if bool(_value) else '{}'
            print('From scheduler._get_scanned_data: 2. scanned_data:', scanned_data)

            return scanned_data

        if event_rule.expression == 'completed':  # 完成事件直接返回
            return True
        else:  # 判断是否发生其他业务事件
            # 数据预处理
            expression_fields_set = set(event_rule.expression_fields.strip().split(','))  # self.expression_fields: 去除空格，转为数组，再转为集合去重
            scanned_data_dict = _get_scanned_data(event_rule, operation_proc, expression_fields_set)  # 获取待扫描字段数据的字符格式字典，适配field_name_replace()的格式要求
            print('扫描内容:', scanned_data_dict)

            expression_fields_val_dict = {}  # 构造一个仅存储表达式内的字段及值的字典
            for field_name in expression_fields_set:
                expression_fields_val_dict[field_name] = scanned_data_dict.get(field_name, '')            

            print('检查表达式及值:', event_rule.expression, expression_fields_val_dict)
            _expression = field_name_replace(event_rule.expression, expression_fields_val_dict)
            print('eval表达式:', _expression)
            try:
                result = eval(_expression)  # 待检查的字段值带入表达式，并执行返回结果
                return result
            except TypeError:
                result = False

    def _execute_system_operand(system_operand, **kwargs):
        '''
        执行系统自动作业
        '''
        def _create_next_service(**kwargs):
            '''
            生成后续服务
            '''
            from core.business_functions import create_service_proc, dispatch_operator
            # 准备新的服务作业进程参数
            operation_proc = kwargs['operation_proc']
            service = kwargs['next_service']
            customer = operation_proc.customer
            current_operator = kwargs['operator']
            service_operator = dispatch_operator(customer, service, current_operator)
            content_type = ContentType.objects.get(app_label='service', model=kwargs['next_service'].name.lower())  # 表单类型

            proc_params = {}
            proc_params['service'] = service  # 进程所属服务
            proc_params['customer'] = customer  # 客户
            proc_params['creater'] = current_operator   # 创建者  
            proc_params['operator'] = service_operator  # 操作者 or 根据 责任人 和 服务作业权限判断 
            proc_params['state'] = 0  # or 根据服务作业权限判断
            proc_params['scheduled_time'] = timezone.now()  # 创建时间 or 根据服务作业逻辑判断
            proc_params['parent_proc'] = operation_proc  # 当前进程是被创建进程的父进程
            proc_params['contract_service_proc'] = operation_proc.contract_service_proc  # 所属合约服务进程
            proc_params['content_type'] = content_type
            proc_params['passing_data'] = kwargs['passing_data']  # 传递表单数据：(0, '否'), (1, '接收，不可编辑'), (2, '接收，可以编辑')
            proc_params['form_data'] = kwargs['form_data']  # 表单数据

            print('Debug: _create_next_service(proc_params):', proc_params)

            # 创建新的服务作业进程
            new_proc = create_service_proc(**proc_params)

            # 显示提示消息：开单成功
            from django.contrib import messages
            messages.add_message(kwargs['request'], messages.INFO, f'{service.label}已开单')

            return f'创建服务作业进程: {new_proc}'
        
        def _recommend_next_service(**kwargs):  # 由GPT-4重构的推荐服务函数
            '''
            推荐后续服务
            '''
            # 准备新的服务作业进程参数
            operation_proc = kwargs['operation_proc']
            
            # 创建新的推荐服务条目前先删除此客户的历史推荐服务条目
            # 获取当前客户的所有推荐服务条目并删除
            RecommendedService.objects.filter(customer=operation_proc.customer).delete()

            # 创建新的推荐服务条目
            obj = RecommendedService(
                service=kwargs['next_service'],  # 推荐的服务
                customer=operation_proc.customer,  # 客户
                creater=kwargs['operator'],  # 创建者
                pid=operation_proc,  # 当前进程是被推荐服务的父进程
                cpid=operation_proc.contract_service_proc,  # 所属合约服务进程
                passing_data=kwargs['passing_data']
            )
            obj.save()

            return f'推荐服务作业: {obj}'

        def _send_wechat_template_message(**kwargs):
            '''
            发送公众号模板消息
            模板参数格式: {"template_id":"xxxxx", "title":"xxxxxx", "remark":"xxxxxx", "keyword1":"字段名1",  "keyword2":"字段名2", ...}
            '''
            from core.utils import get_wechat_template_message_data, send_wechat_template_message
            # 获取用户微信open_id
            open_id = kwargs['operation_proc'].customer.weixin_openid

            message = eval(kwargs['message'])  # 把kwargs['message']从字符串转换为字典
            form_data = kwargs['form_data']  # 表单数据

            # 用open_id 和 message 构造消息data
            data = get_wechat_template_message_data(open_id, message, form_data)

            # 发送消息
            result = send_wechat_template_message(data)

            print('发送公众号模板消息:', kwargs['message'], '结果:', result)
            return result

        def _send_wecom_message(**kwargs):
            '''
            发送企业微信提醒
            '''
            from core.utils import send_wecom_message
            
            # 获取作业员企业微信id
            wecom_uid = kwargs['operator'].staff.wecom_id

            # 获取消息内容
            message = kwargs['message']

            # 发送消息
            result = send_wecom_message(wecom_uid, message)
            print('发送企业微信提醒:', kwargs['message'])

            return result


        class SystemOperandFunc(Enum):
            CREATE_NEXT_SERVICE = _create_next_service  # 生成后续服务
            RECOMMEND_NEXT_SERVICE = _recommend_next_service  # 推荐后续服务
            SEND_WECHART_TEMPLATE_MESSAGE = _send_wechat_template_message  # 发送公众号消息
            SEND_WECOM_MESSAGE = _send_wecom_message  # 发送企业微信消息

		# 调用OperandFuncMixin中的系统自动作业函数
        return eval(f'SystemOperandFunc.{system_operand}')(**kwargs)

    operation_proc = kwargs['pid']
    request = kwargs['request']

    # 根据服务规则检查业务事件是否发生，执行系统作业
    # 逐一检查service_rule.event_rule.expression是否满足
    for service_rule in ServiceRule.objects.filter(service=operation_proc.service, is_active=True):
        # 如果event_rule.expression为真，则构造事件参数，生成业务事件
        print('*****************************')
        print('From check_rules 扫描规则：', service_rule.service, service_rule.event_rule)
        if _is_rule_satified(service_rule.event_rule, operation_proc):
            print('From check_rules 满足规则：', service_rule.service, service_rule.event_rule)
            # 构造作业参数
            print('operation_proc.operator:', operation_proc.operator)
            operation_params = {
                'operation_proc': operation_proc,
                'operator': operation_proc.operator,
                'service': service_rule.service,
                'next_service': service_rule.next_service,
                'passing_data': service_rule.passing_data,
                'complete_feedback': service_rule.complete_feedback,
                'reminders': service_rule.reminders,
                'message': service_rule.message,
                'interval_rule': service_rule.interval_rule,
                'interval_time': service_rule.interval_time,
                'request': request,
                'form_data': kwargs['form_data'],
            }
            # 执行系统自动作业。传入：作业指令，作业参数；返回：String，描述执行结果
            _result = _execute_system_operand(service_rule.system_operand.func, **operation_params)
            print('From check_rules 执行结果:', _result)
    
********************************************************************************
File: core/tests.py
********************************************************************************

from django.test import TestCase

# Create your tests here.
********************************************************************************
File: core/urls.py
********************************************************************************

from django.urls import path
from django.conf.urls import url
from django.urls.resolvers import URLPattern
from .views import index_customer, jinshuju_post

# app_name = 'service'
urlpatterns = [	
	path('index_customer/', index_customer, name='index_customer'),
	path('jinshuju_post/', jinshuju_post, name='jinshuju_post'),
    # url("message/$", Message.as_view(), name='message'),
    # url("access/token/$", AccessToken.as_view(), name='token'),
]

********************************************************************************
File: core/hsscbase_class.py
********************************************************************************

from django.db import models
from django.forms.models import model_to_dict
from datetime import timedelta
import uuid
import re
from pypinyin import Style, lazy_pinyin

# 自定义管理器：设计数据备份、恢复
class HsscBackupManager(models.Manager):
    def backup_data(self, queryset=None):
        backup_data = []
        
        if queryset is None:
            queryset = self.all()
            
        for item in queryset:
            item_dict = model_to_dict(item)

            # 遍历模型非多对多字段，如果是外键，则用外键的hssc_id替换外键id
            for field in self.model._meta.fields:
                # if item_dict[field.name] or field.__class__.__name__ == 'DurationField':  # 如果字段不为空或字段为DurationField类型，进行检查替换
                if item_dict[field.name]:  # 如果字段不为空或字段为DurationField类型，进行检查替换
                    if field.name in ['name_icpc', 'icpc']:  # 如果是ICPC外键，获取icpc_code
                        _object = field.related_model.objects.get(id=item_dict[field.name])
                        item_dict[field.name] = _object.icpc_code
                    else:
                        if (field.one_to_one or field.many_to_one):  # 一对一、多对一字段, 获取外键的hssc_id
                            _object = field.related_model.objects.get(id=item_dict[field.name])
                            item_dict[field.name] = _object.hssc_id
                        elif field.__class__.__name__ == 'DurationField':  # duration字段
                            item_dict[field.name] = str(item_dict[field.name])


            # 遍历模型多对多字段，用hssc_id或icpc_code替换外键id
            for field in self.model._meta.many_to_many:
                if item_dict[field.name]:  # 如果字段不为空，进行检查替换
                    # 先获取多对多字段对象的id List
                    _ids = []
                    for _field in item_dict[field.name]:
                        _ids.append(_field.id)
                    ids = []
                    for _object in field.related_model.objects.filter(id__in=_ids):
                        # 如果是ICPC外键，获取icpc_code，否则获取hssc_id
                        if field.name in ['name_icpc', 'icpc']:
                            ids.append(_object.icpc_code)
                        else:
                            ids.append(_object.hssc_id)
                    item_dict[field.name] = ids

            item_dict.pop('id')  # 删除id字段
            backup_data.append(item_dict)
        return backup_data

    def restore_data(self, data):
        print('开始恢复：', self.model.__name__)
        self.all().delete()

        if data is None or len(data) == 0:
            return 'No data to restore'

        for item_dict in data:
            item = {}
            # 遍历模型非多对多字段，如果是外键，则用外键的hssc_id找回关联对象
            for field in self.model._meta.fields:
                if item_dict.get(field.name) is not None:  # 如果字段不为空，进行检查替换                    
                    if field.name in ['name_icpc', 'icpc']:  # 如果是ICPC外键，用icpc_code获取对象
                        _object = field.related_model.objects.get(icpc_code=item_dict[field.name])
                        item[field.name] = _object
                    else:
                        if (field.one_to_one or field.many_to_one):  # 一对一、多对一字段, 用hssc_id获取对象
                            try:
                                _object = field.related_model.objects.get(hssc_id=item_dict[field.name])
                            except field.related_model.DoesNotExist:  # ManagedEntity.base_form中的hssc_id可能为空
                                _object = None
                            item[field.name] = _object
                        elif field.__class__.__name__ == 'DurationField':  # duration字段
                            item[field.name] = self._parse_timedelta(item_dict[field.name])
                        else:
                            item[field.name] = item_dict[field.name]

            # 插入构造好的记录，不包括多对多字段
            _instance=self.model.objects.create(**item)

            # 遍历模型多对多字段，用hssc_id或icpc_code获取对象
            for field in self.model._meta.many_to_many:
                if item_dict.get(field.name):  # 如果字段不为空，进行检查替换
                    objects = []
                    # 如果是ICPC外键，用icpc_code获取对象，否则用hssc_id获取对象
                    if field.name in ['name_icpc', 'icpc']:
                        for _object in field.related_model.objects.filter(icpc_code__in=item_dict[field.name]):
                            objects.append(_object)
                    else:
                        for _object in field.related_model.objects.filter(hssc_id__in=item_dict[field.name]):
                            objects.append(_object)

                    # 将对象添加到多对多字段中
                    eval(f'_instance.{field.name}').set(objects)
            
        return f'{self.model} 已恢复'

    def merge_data(self, data):
        if data is None or len(data) == 0:
            return 'No data to restore'

        print('开始合并：', self.model.__name__)
        new_data_hssc_id = []
        for item_dict in data:
            # 用hssc_id判断当前记录是否已存在
            try:
                if self.model.__name__ == 'FormComponentsSetting':                    
                    print('formcomponentssetting:', item_dict)
                    new_data_hssc_id.append(item_dict['hssc_id'])
                else:
                    _instance = self.get(hssc_id=item_dict['hssc_id'])
            except self.model.DoesNotExist:
                _instance = None
                print('正在合并：',item_dict)
                
                # 保存添加记录的hssc_id，用于生成queryset
                new_data_hssc_id.append(item_dict['hssc_id'])
                
                item = {}
                # 遍历模型非多对多字段，如果是外键，则用外键的hssc_id找回关联对象
                for field in self.model._meta.fields:
                    if item_dict.get(field.name) is not None:  # 如果字段不为空，进行检查替换                    
                        if field.name in ['name_icpc', 'icpc']:  # 如果是ICPC外键，用icpc_code获取对象
                            _object = field.related_model.objects.get(icpc_code=item_dict[field.name])
                            item[field.name] = _object
                        else:
                            if (field.one_to_one or field.many_to_one):  # 一对一、多对一字段, 用hssc_id获取对象
                                try:
                                    _object = field.related_model.objects.get(hssc_id=item_dict[field.name])
                                except field.related_model.DoesNotExist:  # ManagedEntity.base_form中的hssc_id可能为空
                                    _object = None
                                item[field.name] = _object
                            elif field.__class__.__name__ == 'DurationField':  # duration字段
                                item[field.name] = self._parse_timedelta(item_dict[field.name])
                            else:
                                item[field.name] = item_dict[field.name]

                # 插入构造好的记录，不包括多对多字段
                _instance=self.model.objects.create(**item)

                # 遍历模型多对多字段，用hssc_id或icpc_code获取对象
                for field in self.model._meta.many_to_many:
                    if item_dict.get(field.name):  # 如果字段不为空，进行检查替换
                        objects = []
                        # 如果是ICPC外键，用icpc_code获取对象，否则用hssc_id获取对象
                        if field.name in ['name_icpc', 'icpc']:
                            for _object in field.related_model.objects.filter(icpc_code__in=item_dict[field.name]):
                                objects.append(_object)
                        else:
                            for _object in field.related_model.objects.filter(hssc_id__in=item_dict[field.name]):
                                objects.append(_object)

                        # 将对象添加到多对多字段中
                        eval(f'_instance.{field.name}').set(objects)

        # 返回新增记录的hssc_id
        return new_data_hssc_id


    @staticmethod
    def _parse_timedelta(stamp):
    # 转换string to timedelta
        if 'day' in stamp:
            m = re.match(r'(?P<d>[-\d]+) day[s]*, (?P<h>\d+):'
                        r'(?P<m>\d+):(?P<s>\d[\.\d+]*)', stamp)
        else:
            m = re.match(r'(?P<h>\d+):(?P<m>\d+):'
                        r'(?P<s>\d[\.\d+]*)', stamp)
        if not m:
            return ''

        time_dict = {key: float(val) for key, val in m.groupdict().items()}
        if 'd' in time_dict:
            return timedelta(days=time_dict['d'], hours=time_dict['h'],
                            minutes=time_dict['m'], seconds=time_dict['s'])
        else:
            return timedelta(hours=time_dict['h'],
                            minutes=time_dict['m'], seconds=time_dict['s'])


# Hssc基类
class HsscBase(models.Model):
    label = models.CharField(max_length=255, null=True, verbose_name="名称")
    name = models.CharField(max_length=255, blank=True, null=True, verbose_name="name")
    hssc_id = models.CharField(max_length=50, unique=True, null=True, blank=True, verbose_name="hsscID")
    objects = HsscBackupManager()

    class Meta:
        abstract = True

    def __str__(self):
        return str(self.label)

    def save(self, *args, **kwargs):
        if self.hssc_id is None:
            self.hssc_id = uuid.uuid1()
        super().save(*args, **kwargs)


class HsscPymBase(HsscBase):
    pym = models.CharField(max_length=255, blank=True, null=True, verbose_name="拼音码")

    class Meta:
        abstract = True

    def save(self, *args, **kwargs):
        if self.label:
            self.pym = ''.join(lazy_pinyin(self.label, style=Style.FIRST_LETTER))
            if self.name is None or self.name=='':
                self.name = "_".join(lazy_pinyin(self.label))
        super().save(*args, **kwargs)



from enum import Enum
class FieldsType(Enum):
    # 手工添加CustomerSchedule字段数据类型
    scheduled_time = "Datetime"  # 计划执行时间
    overtime = "Datetime"  # 超期时限
    scheduled_operator = "entities.Stuff"  # 计划执行人员
    service = "core.Service"  # 服务
    is_assigned = 'Boolean'  # 是否已生成任务

    # 自动生成字段数据类型
    boolfield_yao_pin_tong_yong_ming = "String"  # 药品通用名
    boolfield_shen_fen_zheng_hao_ma = "String"  # 身份证号码
    boolfield_yao_pin_ming_cheng = "String"  # 药品名称
    boolfield_yong_yao_pin_ci = "String"  # 用药频次
    boolfield_bing_qing_bu_chong_miao_shu = "String"  # 病情补充描述
    boolfield_mei_tian_gong_zuo_ji_gong_zuo_wang_fan_zong_shi_chang = "String"  # 每天工作及工作往返总时长
    boolfield_ping_jun_shui_mian_shi_chang = "String"  # 平均睡眠时长
    boolfield_chi_xu_shi_mian_shi_jian = "String"  # 持续失眠时间
    boolfield_lian_xi_di_zhi = "String"  # 联系地址
    boolfield_zhi_ye_zi_zhi = "String"  # 执业资质
    boolfield_mi_ma_she_zhi = "String"  # 密码设置
    boolfield_que_ren_mi_ma = "String"  # 确认密码
    boolfield_zhuan_chang = "String"  # 专长
    boolfield_zhi_ye_shi_jian = "String"  # 执业时间
    boolfield_yong_hu_ming = "String"  # 用户名
    boolfield_mi_ma = "String"  # 密码
    boolfield_ju_min_dang_an_hao = "String"  # 居民档案号
    boolfield_jia_ting_di_zhi = "String"  # 家庭地址
    boolfield_yi_liao_ic_ka_hao = "String"  # 医疗ic卡号
    boolfield_jia_ting_qian_yue_fu_wu_xie_yi = "String"  # 家庭签约服务协议
    boolfield_yao_pin_bian_ma = "String"  # 药品编码
    boolfield_yao_pin_gui_ge = "String"  # 药品规格
    boolfield_zhi_yuan_bian_ma = "String"  # 职员编码
    boolfield_ji_gou_bian_ma = "String"  # 机构编码
    boolfield_ji_gou_ming_cheng = "String"  # 机构名称
    boolfield_ji_gou_dai_ma = "String"  # 机构代码
    boolfield_ji_gou_shu_xing = "String"  # 机构属性
    boolfield_ji_gou_ceng_ji = "String"  # 机构层级
    boolfield_suo_zai_hang_zheng_qu_hua_dai_ma = "String"  # 所在行政区划代码
    boolfield_xing_zheng_qu_hua_gui_shu = "String"  # 行政区划归属
    boolfield_fa_ding_fu_ze_ren = "String"  # 法定负责人
    boolfield_gong_ying_shang_bian_ma = "String"  # 供应商编码
    boolfield_zhu_yao_gong_ying_chan_pin = "String"  # 主要供应产品
    boolfield_gong_huo_zhou_qi = "String"  # 供货周期
    boolfield_zhuan_ye_fu_wu = "String"  # 专业服务
    boolfield_she_bei_bian_ma = "String"  # 设备编码
    boolfield_sheng_chan_chang_jia = "String"  # 生产厂家
    boolfield_she_bei_fu_wu_dan_wei_hao_shi = "String"  # 设备服务单位耗时
    boolfield_she_bei_jian_xiu_zhou_qi = "String"  # 设备检修周期
    boolfield_she_bei_shi_yong_cheng_ben = "String"  # 设备使用成本
    boolfield_chang_yong_chu_fang_liang = "String"  # 常用处方量
    boolfield_dui_zhao_yi_bao_ming_cheng = "String"  # 对照医保名称
    boolfield_dui_zhao_ji_yao_ming_cheng = "String"  # 对照基药名称
    boolfield_huan_suan_gui_ze = "String"  # 换算规则
    boolfield_zhi_xing_qian_ming = "String"  # 执行签名
    boolfield_yong_yao_liao_cheng = "String"  # 用药疗程
    boolfield_she_bei_ming_cheng = "String"  # 设备名称
    boolfield_gong_ying_shang_ming_cheng = "String"  # 供应商名称
    boolfield_lian_xi_dian_hua = "String"  # 联系电话
    boolfield_xing_ming = "String"  # 姓名
    boolfield_nian_ling = "String"  # 年龄
    boolfield_ti_wen = "Numbers"  # 体温
    boolfield_mai_bo = "Numbers"  # 脉搏
    boolfield_hu_xi_pin_lv = "Numbers"  # 呼吸频率
    boolfield_shen_gao = "Numbers"  # 身高
    boolfield_ti_zhong = "Numbers"  # 体重
    boolfield_ti_zhi_zhi_shu = "Numbers"  # 体质指数
    boolfield_shu_xue_liang = "Numbers"  # 输血量
    boolfield_shou_suo_ya = "Numbers"  # 收缩压
    boolfield_tang_hua_xue_hong_dan_bai = "Numbers"  # 糖化血红蛋白
    boolfield_kong_fu_xue_tang = "Numbers"  # 空腹血糖
    boolfield_shu_zhang_ya = "Numbers"  # 舒张压
    boolfield_yao_wei = "Numbers"  # 腰围
    boolfield_dang_qian_pai_dui_ren_shu = "Numbers"  # 当前排队人数
    boolfield_yu_ji_deng_hou_shi_jian = "Numbers"  # 预计等候时间
    boolfield_kong_fu_xue_tang_ping_jun_zhi = "Numbers"  # 空腹血糖平均值
    boolfield_can_hou_2_xiao_shi_xue_tang_ping_jun_zhi = "Numbers"  # 餐后2小时血糖平均值
    boolfield_can_hou_2_xiao_shi_xue_tang = "Numbers"  # 餐后2小时血糖
    boolfield_shou_shu_ri_qi = "Date"  # 手术日期
    boolfield_shu_xue_ri_qi = "Date"  # 输血日期
    boolfield_wai_shang_ri_qi = "Date"  # 外伤日期
    boolfield_que_zhen_shi_jian = "Datetime"  # 确诊时间
    boolfield_chu_sheng_ri_qi = "Date"  # 出生日期
    boolfield_yu_yue_shi_jian = "Datetime"  # 预约时间
    boolfield_zhu_she_ri_qi = "Datetime"  # 注射日期
    boolfield_yao_pin_dan_wei = "dictionaries.Yao_pin_dan_wei"  # 药品单位
    boolfield_xin_yu_ping_ji = "dictionaries.Xin_yu_ping_ji"  # 信誉评级
    boolfield_chu_fang_ji_liang_dan_wei = "dictionaries.Yao_pin_dan_wei"  # 处方计量单位
    boolfield_ru_ku_ji_liang_dan_wei = "dictionaries.Yao_pin_dan_wei"  # 入库计量单位
    boolfield_xiao_shou_ji_liang_dan_wei = "dictionaries.Yao_pin_dan_wei"  # 销售计量单位
    boolfield_she_bei_shi_yong_fu_wu_gong_neng = "icpc.Icpc4_physical_examination_and_tests"  # 设备适用服务功能
    boolfield_suo_shu_ji_gou = "entities.Ji_gou_ji_ben_xin_xi_biao"  # 所属机构
    boolfield_zheng_zhuang = "icpc.Icpc3_symptoms_and_problems"  # 症状
    boolfield_xing_bie = "dictionaries.Gender"  # 性别
    boolfield_min_zu = "dictionaries.Nationality"  # 民族
    boolfield_hun_yin_zhuang_kuang = "dictionaries.Marital_status"  # 婚姻状况
    boolfield_wen_hua_cheng_du = "dictionaries.Education"  # 文化程度
    boolfield_zhi_ye_zhuang_kuang = "dictionaries.Occupational_status"  # 职业状况
    boolfield_yi_liao_fei_yong_fu_dan = "dictionaries.Medical_expenses_burden"  # 医疗费用负担
    boolfield_ju_zhu_lei_xing = "dictionaries.Type_of_residence"  # 居住类型
    boolfield_xue_xing = "dictionaries.Blood_type"  # 血型
    boolfield_qian_yue_jia_ting_yi_sheng = "entities.Zhi_yuan_ji_ben_xin_xi_biao"  # 签约家庭医生
    boolfield_xing_ge_qing_xiang = "dictionaries.Character"  # 性格倾向
    boolfield_dui_mu_qian_sheng_huo_he_gong_zuo_man_yi_ma = "dictionaries.Satisfaction"  # 对目前生活和工作满意吗
    boolfield_dui_zi_ji_de_shi_ying_neng_li_man_yi_ma = "dictionaries.Satisfaction"  # 对自己的适应能力满意吗
    boolfield_yin_jiu_pin_ci = "dictionaries.Frequency"  # 饮酒频次
    boolfield_xi_yan_pin_ci = "dictionaries.Frequency"  # 吸烟频次
    boolfield_jue_de_zi_shen_jian_kang_zhuang_kuang_ru_he = "dictionaries.State_degree"  # 觉得自身健康状况如何
    boolfield_jiao_zhi_guo_qu_yi_nian_zhuang_tai_ru_he = "dictionaries.Comparative_expression"  # 较之过去一年状态如何
    boolfield_yun_dong_pian_hao = "dictionaries.Sports_preference"  # 运动偏好
    boolfield_yun_dong_shi_chang = "dictionaries.Exercise_time"  # 运动时长
    boolfield_jin_lai_you_wu_shen_ti_bu_shi_zheng_zhuang = "icpc.Icpc3_symptoms_and_problems"  # 近来有无身体不适症状
    boolfield_nin_dui_ju_zhu_huan_jing_man_yi_ma = "dictionaries.Satisfaction"  # 您对居住环境满意吗
    boolfield_nin_suo_zai_de_she_qu_jiao_tong_fang_bian_ma = "dictionaries.Convenience"  # 您所在的社区交通方便吗
    boolfield_jia_ting_cheng_yuan_guan_xi = "dictionaries.Family_relationship"  # 家庭成员关系
    boolfield_ji_bing_ming_cheng = "icpc.Icpc5_evaluation_and_diagnoses"  # 疾病名称
    boolfield_yan_di = "dictionaries.Normality"  # 眼底
    boolfield_zuo_jiao = "dictionaries.Dorsal_artery_pulsation"  # 左脚
    boolfield_you_jiao = "dictionaries.Dorsal_artery_pulsation"  # 右脚
    boolfield_shou_shu_ming_cheng = "icpc.Icpc7_treatments"  # 手术名称
    boolfield_yan_bu = "dictionaries.Pharynx"  # 咽部
    boolfield_xia_zhi_shui_zhong = "dictionaries.Edema"  # 下肢水肿
    boolfield_ke_neng_zhen_duan = "icpc.Icpc5_evaluation_and_diagnoses"  # 可能诊断
    boolfield_pai_chu_zhen_duan = "icpc.Icpc5_evaluation_and_diagnoses"  # 排除诊断
    boolfield_chang_yong_zheng_zhuang = "dictionaries.Chang_yong_zheng_zhuang"  # 常用症状
    boolfield_tang_niao_bing_zheng_zhuang = "dictionaries.Tang_niao_bing_zheng_zhuang"  # 糖尿病症状
    boolfield_qian_dao_que_ren = "dictionaries.Qian_dao_que_ren"  # 签到确认
    boolfield_shi_mian_qing_kuang = "dictionaries.Shi_mian_qing_kuang"  # 失眠情况
    boolfield_sheng_huo_gong_zuo_ya_li_qing_kuang = "dictionaries.Ya_li_qing_kuang"  # 生活工作压力情况
    boolfield_shi_fou_ji_xu_shi_yong = "dictionaries.Ji_xu_shi_yong_qing_kuang"  # 是否继续使用
    boolfield_qian_yue_que_ren = "dictionaries.Qian_yue_que_ren"  # 签约确认
    boolfield_ze_ren_ren = "entities.Zhi_yuan_ji_ben_xin_xi_biao"  # 责任人
    boolfield_xue_ya_jian_ce_ping_gu = "dictionaries.Sui_fang_ping_gu"  # 血压监测评估
    boolfield_niao_tang = "dictionaries.Niao_tang"  # 尿糖
    boolfield_dan_bai_zhi = "dictionaries.Dan_bai_zhi"  # 蛋白质
    boolfield_niao_tong_ti = "dictionaries.Tong_ti"  # 尿酮体
    boolfield_yong_yao_tu_jing = "dictionaries.Yong_yao_tu_jing"  # 用药途径
    boolfield_yao_pin_fen_lei = "dictionaries.Yao_pin_fen_lei"  # 药品分类
    boolfield_fu_wu_jue_se = "dictionaries.Fu_wu_jue_se"  # 服务角色
    boolfield_ge_ren_bing_shi = "icpc.Icpc5_evaluation_and_diagnoses"  # 个人病史
    boolfield_yi_chuan_xing_ji_bing = "icpc.Icpc5_evaluation_and_diagnoses"  # 遗传性疾病
    boolfield_jia_zu_xing_ji_bing = "icpc.Icpc5_evaluation_and_diagnoses"  # 家族性疾病
    boolfield_wai_shang_xing_ji_bing = "icpc.Icpc5_evaluation_and_diagnoses"  # 外伤性疾病
    boolfield_jia_zu_bing_shi_cheng_yuan = "dictionaries.Qin_shu_guan_xi"  # 家族病史成员
    boolfield_yi_chuan_bing_shi_cheng_yuan = "dictionaries.Qin_shu_guan_xi"  # 遗传病史成员
    boolfield_fu_wu_xiang_mu_ming_cheng = "icpc.Icpc4_physical_examination_and_tests"  # 服务项目名称
    boolfield_an_pai_que_ren = "dictionaries.An_pai_que_ren"  # 安排确认
    boolfield_yao_pin_ming = "entities.Yao_pin_ji_ben_xin_xi_biao"  # 药品名
    boolfield_tang_niao_bing_kong_zhi_xiao_guo_ping_gu = "dictionaries.Tang_niao_bing_kong_zhi_xiao_guo_ping_gu"  # 糖尿病控制效果评估
********************************************************************************
File: core/views.py
********************************************************************************

from urllib import response
from django.http import HttpResponse, JsonResponse
from django.shortcuts import render, redirect
from django.urls import reverse
from django.contrib.auth.models import User
from django.contrib.contenttypes.models import ContentType
from django.utils import timezone
from django.db.models import Q

from enum import Enum
from requests import Response

from django_celery_beat.models import PeriodicTask, CrontabSchedule

from core.models import Service, ServicePackage, Customer, OperationProc, RecommendedService

from dictionaries.models import *
from service.models import *


def index_customer(request):
    context = {}
    customer = Customer.objects.get(user=request.user)
    context ['customer'] = customer.name
    # 获取当前用户所属的所有作业进程
    procs = OperationProc.objects.exclude(state=4).filter(customer=customer)
    todos = []
    for proc in procs:
        todo = {}
        todo['service'] = proc.service.label
        todos.append(todo)
    context['todos'] = todos

    return render(request, 'index_customer.html', context)


from django.views.decorators.csrf import csrf_exempt
@csrf_exempt
def jinshuju_post(request, **kwargs):
    # 测试接口
    import json
    from django.core.exceptions import ObjectDoesNotExist
    from core.models import ExternalServiceMapping    
    from core.utils import get_customer_status
    from core.business_functions import create_service_proc
    from core.signals import operand_finished
    from core.hsscbase_class import FieldsType
    # xmlhttp.setRequestHeader("Content-type","application/json")

    def _convert_type(_type, _value):
        # 将字符串转换为对应的类型
        if _type == 'Datetime':  # 日期时间类型
            from datetime import datetime
            # 把_value从字符串转换为datetime类型
            _value = datetime.strptime(_value, '%Y-%m-%d %H:%M')
            return _value
        elif _type == 'Numbers':  # 数字类型
            return float(_value)
        elif _type == 'String':  # 字符串类型
            return _value
        else:  # 如果字段类型是关联类型，返回对应字典实例对象
            # 如果是外键关联类型，返回对应的字典实例对象
            model = eval(_type.split('.')[1]).objects.get(value=_value)
            # 如果是多对多关联类型，返回对应的字典实例对象列表
            # model = eval(_type.split('.')[1]).objects.filter(value=_value)
            return model

    if(request.method == 'POST'):
        print("收到POST请求")
        postBody = request.body
        json_result = json.loads(postBody)
        print('Bodys:', json_result)

        # 接收到外部表单，查找用户服务状态，查找表单，复制表单内容，或创建错误日志
        external_form_id = json_result.get('form')
        entry = json_result.get('entry')
        weixin_openid = entry.get('x_field_weixin_openid')
        print('微信ID：', weixin_openid)

        # 1. 用微信OpenID获取用户服务状态
        customer, customer_service_status = get_customer_status(weixin_openid)

        # 2. 如果服务状态在服务期，则完成一个服务进程（创建服务进程，填写表单，置服务进程完成）
        if customer_service_status:
            # 用外部表单名称在表单映射表中查找内部对应表单，如果查到，则复制表单内容（待补充：如果没查到，则创建新的映射记录，并通知管理员补充映射表）
            try:
                mapping = ExternalServiceMapping.objects.get(external_form_id = external_form_id)
                _service = mapping.service
                model = eval(_service.name.capitalize())
                form = _service.buessiness_forms.first()
                print('查到映射记录：', mapping, _service.name, form)

                # 提取表单内容
                fields_mapping = json.loads(mapping.fields_mapping)
                print('fields_mapping:', fields_mapping)
                form_data = {}
                for field_map in fields_mapping:
                    (external_field, internal_field), = field_map.items()
                    # 查找内部表单字段类型，转换外部传入的字段值的格式                    
                    _type = eval(f'FieldsType.{internal_field}').value
                    _value = entry.get(external_field)                    
                    form_data[internal_field] = _convert_type(_type, _value)
                    print('内部字段：', internal_field, '类型：', _type, '转换后内容：', form_data[internal_field])

                print('表单数据：', form_data)

                # 新建mapping.service
                print('创建service:', _service, _service.name)
                # 准备新的服务作业进程参数
                content_type = ContentType.objects.get(app_label='service', model=_service.name.lower())
                proc_params = {}
                proc_params['service'] = _service
                proc_params['customer'] = customer
                proc_params['creater'] = customer
                proc_params['operator'] = customer
                proc_params['state'] = 0  # or 0 根据服务作业权限判断
                proc_params['scheduled_time'] = timezone.now() # or None 根据服务作业权限判断
                proc_params['content_type'] = content_type
                proc_params['passing_data'] = 3  # 传递表单数据：(0, '否'), (1, '接收，不可编辑', 复制父进程表单控制信息), (2, '接收，可以编辑', 复制父进程表单控制信息), (3, 复制form_data)
                proc_params['form_data'] = form_data

                # # 创建新的服务作业进程
                # new_proc = create_service_proc(**proc_params)
                # print('Debug: jinshuju_post: 创建新的服务作业进程：', new_proc, 'proc_params:', proc_params)

                # # 置服务进程完成
                # new_proc.update_state('RTC')

                # # 发送服务完成信号
                # print('发送操作完成信号, 收到金数据表单，form_data:', form_data)
                # operand_finished.send(sender=jinshuju_post, pid=new_proc, request=request, form_data=form_data)

            except ObjectDoesNotExist:
                pass

    response = HttpResponse()
    response.content = 'Hi, this is Jinshuju Test 127.0.0.1:8000'
    # response.status_code = 200 # 默认值是200
    return response


# # 微信消息接口
# from rest_framework.views import APIView
# import redis
# import requests
# import configparser

# r = redis.Redis(host='localhost', port=6379, db=1, decode_responses=True)  # 创建redis对象
# config = configparser.ConfigParser()
# config.read('config.ini', encoding="utf-8")
# wx_config = config.items("wechat")
# wx_config = dict(map(lambda x: [x[0], x[1]], wx_config))
# wx_config.update({"token_exp": int(wx_config.get("token_exp"))})


# class AccessToken(APIView):
#     def get(self, request):
#         access_token = r.get("access_token")  # 从redis中获取ACCESS_TOKEN
#         if not access_token:
#             appid = wx_config.get("appid")
#             appsecret = wx_config.get("appsecret")
#             token_api = wx_config.get("token_api")
#             exp = wx_config.get("token_exp")
#             api = token_api.format(appid=appid, secret=appsecret)
#             response = requests.get(api, headers=settings.HEADER).json()
#             access_token = response.get("access_token")
#             r.setex('access_token', exp, access_token)
#         return JsonResponse({"code": 1, "token": access_token})



# from wechatpy.utils import check_signature
# from wechatpy import parse_message, create_reply
# from wechatpy.exceptions import InvalidSignatureException


# class Message(APIView):
#     def get(self, request):
#         signature = request.GET.get('signature', '')
#         timestamp = request.GET.get('timestamp', '')
#         nonce = request.GET.get('nonce', '')
#         echostr = request.GET.get('echostr', '')
#         token = wx_config.get("token")
#         try:
#             check_signature(token, signature, timestamp, nonce)
#         except InvalidSignatureException:
#             echostr = '错误的请求'
#         response = HttpResponse(echostr)
#         return response

#     def post(self, request):
#         msg = parse_message(request.body)
#         wel_msg = "欢迎关注微信公众号：程序员9527"
#         openid = msg.source  # 获取用户openid
#         if msg.type == 'text':
#             reply = create_reply(content, msg)
#         elif msg.type == 'image':
#             reply = create_reply(content, msg)
#         elif msg.type == 'voice':
#             reply = create_reply(content, msg)
#         else:
#             reply = create_reply(content, msg)
#         if hasattr(msg, 'event') and msg.event == "subscribe":
#             print("用户关注", openid)
#         elif hasattr(msg, 'event') and msg.event == 'unsubscribe':
#             print("取消关注", openid)
#         response = HttpResponse(reply.render(), content_type="application/xml")
#         return response
********************************************************************************
File: core/management/commands/import_design.py
********************************************************************************

from django.core.management import BaseCommand
import requests
import json

class Command(BaseCommand):
    help = '从设计系统导入脚本'
    def handle(self, *args, **kwargs):
        '''
        获取Hssc源码，创建脚本文件
        '''
        # 导入项目的项目id
        project_name = 'Clinic'
        
        print('开始导入脚本')
        # SOURCECODE_URL = f'http://design.tpacn.com/define_backup/source_codes_list/{project_name}/'
        SOURCECODE_URL = f'http://127.0.0.1:8001/define_backup/source_codes_list/{project_name}/'
        res = requests.get(SOURCECODE_URL)
        res_json = res.json()[0]
        source_code =json.loads(res_json['code'])

        self._create_code_file(source_code['script'])  # 创建脚本文件
        self._create_data_file(source_code['data'])  # 创建数据文件

        print('导入脚本成功！')

    def _create_code_file(self, code_script):
        print('写入脚本文件...')
        for app_name, scripts in code_script.items():
            for file_name, script in scripts.items():
                self._write_file(f'./{app_name}/{file_name}.py', script)

    def _create_data_file(self, data_script):
        print('写入json数据文件...')
        for app_name, _json_data in data_script.items():
            if app_name in ['dictionaries', 'icpc']:
                _file_name = f'./{app_name}/fixtures/initial_data.json'
            elif app_name == 'core':
                _file_name = './core/initial_data.json'
            json_data = json.dumps(_json_data, ensure_ascii=False, indent=4)
            self._write_file(_file_name, json_data)

    @staticmethod
    def _write_file(file_name, content):
        with open(file_name, 'w', encoding='utf-8') as f:
            _r = f.write(content)
            if _r:
                print(f'{file_name}    ok')
            else:
                print(f'文件{file_name}写入失败！！！')
********************************************************************************
File: core/management/commands/init_core_data.py
********************************************************************************

from django.core.management import BaseCommand
import json

from core.models import *
from icpc.models import Icpc
# from service.models import Yao_pin_ji_ben_xin_xi_biao

test_user_data = {
    'user': [
        {
            'username': '林管家',
            'password': 'info1234',
            'email': 'test@test.com',
            'is_superuser': False,
            'is_staff': True,
            'first_name': '管家',
            'last_name': '林',
            'role': ['健康管理师', '医生助理'],
        },
        {
            'username': '黄医生',
            'password': 'info1234',
            'email': 'test@test.com',
            'is_superuser': False,
            'is_staff': True,
            'first_name': '医生',
            'last_name': '黄',
            'role': ['健康管理师', '医生', '医生助理'],
        },
        {
            'username': '陈医生',
            'password': 'info1234',
            'email': 'test@test.com',
            'is_superuser': False,
            'is_staff': True,
            'first_name': '医生',
            'last_name': '陈',
            'role': ['健康管理师', '医生', '医生助理'],
        },
        {
            'username': '杨医生',
            'password': 'info1234',
            'email': 'test@test.com',
            'is_superuser': False,
            'is_staff': True,
            'first_name': '医生',
            'last_name': '杨',
            'role': ['健康管理师', '医生', '医生助理', '公卫'],
        },
        {
            'username': '孙护士',
            'password': 'info1234',
            'email': 'test@test.com',
            'is_superuser': False,
            'is_staff': True,
            'first_name': '护士',
            'last_name': '孙',
            'role': ['护士', '医生助理'],
        },
        {
            'username': '周药师',
            'password': 'info1234',
            'email': 'test@test.com',
            'is_superuser': False,
            'is_staff': True,
            'first_name': '药师',
            'last_name': '周',
            'role': ['药士', '药剂师'],
        },
        {
            'username': '林丽',
            'password': 'info1234',
            'email': 'test@test.com',
            'is_superuser': False,
            'is_staff': True,
            'first_name': '丽',
            'last_name': '林',
            'role': ['检验师'],
        },
        {
            'username': '化验小李',
            'password': 'info1234',
            'email': 'test@test.com',
            'is_superuser': False,
            'is_staff': True,
            'first_name': '小李',
            'last_name': '化验',
            'role': ['检验师'],
        },
        # {
        #     'username': '金盘口腔诊所',
        #     'password': 'info1234',
        #     'email': 'test@test.com',
        #     'is_superuser': False,
        #     'is_staff': True,
        #     'first_name': '口腔诊所',
        #     'last_name': '金盘',
        #     'role': ['牙科诊所管理员'],
        # },
        # {
        #     'username': '金盘口腔小王',
        #     'password': 'info1234',
        #     'email': 'test@test.com',
        #     'is_superuser': False,
        #     'is_staff': True,
        #     'first_name': '小王',
        #     'last_name': '金盘口腔',
        #     'role': ['牙科诊所管理员'],
        # },
        # {
        #     'username': '金盘口腔小赵',
        #     'password': 'info1234',
        #     'email': 'test@test.com',
        #     'is_superuser': False,
        #     'is_staff': True,
        #     'first_name': '小赵',
        #     'last_name': '金盘口腔',
        #     'role': ['牙科诊所管理员'],
        # },
        # {
        #     'username': '张三',
        #     'password': 'info1234',
        #     'email': 'test@test.com',
        #     'is_superuser': False,
        #     'is_staff': True,
        #     'first_name': '三',
        #     'last_name': '张',
        #     'role': ['保险人员'],
        # },
    ],
}

class Command(BaseCommand):
    help = 'Restore design data from backuped json file'

    def handle(self, *args, **options):
        # 读取初始业务定义数据文件
        with open('core/initial_data.json', encoding="utf8") as f:
            initial_data = json.loads(f.read())

        initial_models=[
            SystemOperand,
            CycleUnit,
            Role,
            BuessinessForm,
            ManagedEntity,
            Service,
            BuessinessFormsSetting,
            ServicePackage,
            ServicePackageDetail,
            EventRule,
            ServiceRule,
            ExternalServiceMapping,
            Medicine,
        ]
        for model in initial_models:
            print(model._meta.model_name)
            result = model.objects.restore_data(initial_data[model._meta.model_name])
            print(result)
            
        print('恢复设计数据完成！')

        from django.contrib.auth.models import User, Group, Permission
        # 创建管理员组, 赋权管理员组所有权限
        admin_group, created = Group.objects.get_or_create(name='admin')
        admin_group.permissions.add(*Permission.objects.all())

        # 导入测试用户数据
        User.objects.all().exclude(username='admin').delete()
        for user_data in test_user_data['user']:
            user = User.objects.create_user(
                username=user_data['username'],
                password=user_data['password'],
                email=user_data['email'],
                is_superuser=user_data['is_superuser'],
                is_staff=user_data['is_staff'],
                first_name=user_data['first_name'],
                last_name=user_data['last_name'],
            )

            # 把测试用户增加到管理员组
            user.groups.add(admin_group)

            # 为测试用户的职员表增加角色
            staff = user.customer.staff
            for role_name in user_data['role']:
                print('role_name:', role_name)
                role = Role.objects.get(label=role_name)
                staff.role.add(role)
            staff.save()

        print('导入测试用户数据完成！')

        # 创建周期任务
        from django_celery_beat.models import PeriodicTask, IntervalSchedule
        # 创建检查服务进程等待超时的周期任务
        schedule, create = IntervalSchedule.objects.get_or_create(every=30, period='seconds')
        task, create = PeriodicTask.objects.get_or_create(
            interval=schedule, 
            name='check_proc_awaiting_timeout', 
            task='core.tasks.check_proc_awaiting_timeout'
        )

        print('创建周期任务完成！')


********************************************************************************
File: core/management/commands/wait_for_db.py
********************************************************************************

import time
from django.db import connections
from django.db.utils import OperationalError
from django.core.management import BaseCommand
 
class Command(BaseCommand):
    """Django command to pause execution until db is available"""
 
    def handle(self, *args, **options):
        self.stdout.write('Waiting for database...')
        db_conn = None
        while not db_conn:
            try:
                db_conn = connections['default']
            except OperationalError:
                self.stdout.write('Database unavailable, waititng 1 second...')
                time.sleep(1)
 
        self.stdout.write(self.style.SUCCESS('Database available!'))
********************************************************************************
File: hssc/asgi.py
********************************************************************************

"""
ASGI config for hssc project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/howto/deployment/asgi/
"""

import os
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hssc.settings')
django.setup()

from django.core.asgi import get_asgi_application
from channels.auth import AuthMiddlewareStack
from channels.routing import ProtocolTypeRouter, URLRouter
from core.routing import ws_urlpatterns

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hssc.settings')

application = ProtocolTypeRouter({
    'http': get_asgi_application(),
    'websocket': AuthMiddlewareStack(URLRouter(ws_urlpatterns)),
})


********************************************************************************
File: hssc/__init__.py
********************************************************************************

from .celery import app as celery_app

celery = celery_app

__all__ = ('celery_app',)
********************************************************************************
File: hssc/apps.py
********************************************************************************

from django.contrib import admin
from django.apps import apps, AppConfig


# 在管理后台注册显示所有字段
class ListAdminMixin(object):
	def __init__(self, model, admin_site):
		# 列表页自动显示所有的字段：
		self.list_display = [field.name for field in model._meta.fields]
		super(ListAdminMixin, self).__init__(model, admin_site)

# class AdminClass(admin.ModelAdmin):
# 	def __init__(self, model, admin_site):
# 		# 列表页自动显示所有的字段：
# 		self.list_display = [field.name for field in model._meta.fields]
# 		super(AdminClass, self).__init__(model, admin_site)

# automatically register all models
class UniversalManagerApp(AppConfig):
	"""
	应用配置在 所有应用的 Admin 都加载完之后执行
	"""
	name = 'hssc'

	# def ready(self):
	# 	models = apps.get_app_config('forms').get_models()
	# 	# models = apps.get_models()
	# 	for model in models:
	# 		admin_class = type('AdminClass', (ListAdminMixin, admin.ModelAdmin), {})
	# 		try:
	# 			admin.site.register(model, admin_class)
	# 		except admin.sites.AlreadyRegistered:
	# 			pass
********************************************************************************
File: hssc/celery.py
********************************************************************************

from __future__ import absolute_import, unicode_literals
import os
from celery import Celery
from celery.schedules import crontab
from django.conf import settings
from pytz import timezone

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hssc.settings')

app = Celery('hssc')
# app = Celery('hssc', backend='redis://localhost', broker='pyamqp://')
app.conf.enable_utc = False
app.conf.update(timezone = 'Asia/Shanghai')

app.config_from_object(settings, namespace='CELERY')

# Celery Beat Settings
app.conf.beat_schedule = {}

app.autodiscover_tasks()

@app.task(bind=True)
def debug_task(self):
    print(f'From celery.py, Request: {self.request!r}')
********************************************************************************
File: hssc/settings.py
********************************************************************************

"""
Django settings for hssc project.

Generated by 'django-admin startproject' using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path
from .router import *

import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialise environment variables
env = environ.Env()
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALLOWED_HOSTS = ['127.0.0.1', 'dental.tpacn.com', 'dental.tpahn.com']
ALLOWED_HOSTS = ['127.0.0.1', 'clinic-test.tpacn.com', 'clinic-test.tpahn.com', 'clinic.tpacn.com', 'clinic.tpahn.com', ]

# Application definition

INSTALLED_APPS = [
    # 'grappelli',
    # 'django.contrib.sites',
    'registration',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'channels',
    # our apps
    'analytics',
    'core',
    'dictionaries',
    'icpc',
    'service',

    'hssc.apps.UniversalManagerApp',
    'rest_framework',
    'django_celery_results',
    'django_celery_beat',
    'import_export',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# AUTH_USER_MODEL = 'core.User'

ROOT_URLCONF = 'hssc.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'hssc.wsgi.application'
ASGI_APPLICATION = 'hssc.asgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    },
}

# import dj_database_url
# db_from_env = dj_database_url.config(conn_max_age=600, ssl_require=True)
# DATABASES['default'].update(db_from_env)

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'HOST': os.environ.get('DB_HOST'),
#         'NAME': os.environ.get('DB_NAME'),
#         'USER': os.environ.get('DB_USER'),
#         'PASSWORD': os.environ.get('DB_PASS'),
#     }
# }

DATABASE_ROUTERS = ['hssc.router.DatabaseRouter']

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            # "hosts": [env('REDIS_URL')],
            'hosts': ['redis://default:redispw@localhost:32768']
        },
    },
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

USE_TZ = True
# USE_TZ = False

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'

# 上传文件路径
MEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')
MEDIA_URL = '/uploads/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# django-registration-redux
ACCOUNT_ACTIVATION_DAYS = 7 # One-week activation window; you may, of course, use a different value.
REGISTRATION_AUTO_LOGIN = True # Automatically log the user in.
LOGIN_REDIRECT_URL = '/core/index_customer/' # The page you want users to arrive at after they successful log in
LOGIN_URL = 'accounts/login/' # The page users are directed to if they are not logged in,
SIMPLE_BACKEND_REDIRECT_URL = '/'

# APPEND_SLASH=False

# CELERY SETTINGS
# CELERY_BROKER_URL = env('REDIS_URL')
CELERY_BROKER_URL = 'redis://default:redispw@localhost:32768'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Shanghai'
CELERY_RESULT_BACKEND = 'django-db'
# CELERY BEAT SETTINGS
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
# CELERY 的启动工作数量设置
# CELERY_WORKER_CONCURRENCY = 2
# 每个worker执行了多少任务就会死掉，默认是无限
# CELERY_WORKER_MAX_TASKS_PER_CHILD = 200
********************************************************************************
File: hssc/router.py
********************************************************************************

# 多数据库路由
# database router to multiple database by app label

class DatabaseRouter:
    route_app_labels = {'rcms'}

    def db_for_read(self, model, **hints):
        if model._meta.app_label in self.route_app_labels:
            return 'rcms'
        return 'default'

    def db_for_write(self, model, **hints):
        if model._meta.app_label in self.route_app_labels:
            return 'rcms'
        return 'default'

    def allow_relation(self, obj1, obj2, **hints):
        return None

    def allow_migrate(self, db, app_label, model_name=None, **hints):
        """
        rcms数据库中的表不允许migrate
        """
        if app_label in self.route_app_labels:
            return False
        return True
********************************************************************************
File: hssc/urls.py
********************************************************************************

from django.contrib import admin
from django.urls import path, include

from core.admin import clinic_site
from .views import index, check_signature

urlpatterns = [
    path('', index, name='index'),
    # path('', check_signature, name='check_signature'),
    path('accounts/', include('registration.backends.simple.urls')),
    path('admin/', admin.site.urls, name='admin'),
	path('clinic/customer_service/<int:customer_id>', clinic_site.customer_service, name='customer_homepage'),
    path('clinic/', clinic_site.urls, name='clinic:index'),
    path('core/', include('core.urls')),
    path("template/", include('core.urls')),
    # path('grappelli/', include('grappelli.urls')),
]

# from django.conf.urls.static import static
# from hssc import settings
# urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

admin.site.site_header = '智益医养服务供应链管理系统'
admin.site.site_title = 'HSSC'
admin.site.index_title = '系统管理控制台'
********************************************************************************
File: hssc/views.py
********************************************************************************

from django.shortcuts import render, redirect

def index(request):
    if request.user.is_authenticated:
        if request.user.is_staff:
            return redirect('/clinic/')
        else:
            return redirect('/core/index_customer/')
    else:
        return redirect('/accounts/login/')



# 接入微信公众平台服务器配置验证
from django.http.response import HttpResponse
import hashlib
from django.views.decorators.csrf import csrf_exempt

@csrf_exempt
def check_signature(request):
    if request.method == 'GET':
        signature = request.GET.get('signature')
        timestamp = request.GET.get('timestamp')
        nonce = request.GET.get('nonce')
        echostr = request.GET.get('echostr')
        token = 'hssc'

        hashlist = [token, timestamp, nonce]
        hashlist.sort()
        print('[token, timestamp, nonce]', hashlist)
        hashstr = ''.join([s for s in hashlist]).encode('utf-8')  #这里必须增加encode('utf-8'),否则会报错
        print('hashstr befor sha1', hashstr)
        hashstr = hashlib.sha1(hashstr).hexdigest()
        print('hashstr sha1', hashstr)
        if hashstr == signature:
            print('返回echostr')
            return HttpResponse(echostr)  #必须返回echostr
        else:
            print('error!!!')
            return HttpResponse('error')  #可根据实际需要返回
    else:
        return HttpResponse('chenggong')  #可根据实际需要返回

# 创建微信公众号菜单
def create_menu(request):
    from hssc.settings import env
    from wechatpy import WeChatClient
    client = WeChatClient(env('WECHAT_APP_ID'), env('WECHAT_APP_SECRET'))
    client.menu.create({
        "button": [
            {
                "name": "我的服务", 
                "sub_button": [
                    {
                        "type": "view", 
                        "name": "预约服务", 
                        "url": "https://jinshuju.net/f/E92p3G"
                    }
                ]
            },
            {
                "name": "个人中心", 
                "sub_button": [
                    {
                        "type": "view", 
                        "name": "基本信息", 
                        "url": "https://jinshuju.net/f/mXA5h0"
                    },
                    {
                        "type": "view", 
                        "name": "已安排服务", 
                        "url": "https://jinshuju.net/f/z5TFlG"
                    },
                    {
                        "type": "view", 
                        "name": "投诉建议", 
                        "url": "https://jinshuju.net/f/fiCaRb"
                    },
                ]
            },
        ]
    })
    return HttpResponse('ok')

********************************************************************************
File: hssc/wsgi.py
********************************************************************************

"""
WSGI config for hssc project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hssc.settings')

application = get_wsgi_application()

********************************************************************************
File: dictionaries/models.py
********************************************************************************

from django.db import models
from pypinyin import Style, lazy_pinyin


class DictBase(models.Model):
    label = models.CharField(max_length=255, null=True, verbose_name="名称")
    name = models.CharField(max_length=255, blank=True, null=True, verbose_name="name")
    hssc_id = models.CharField(max_length=50, unique=True, null=True, blank=True, verbose_name="hsscID")
    value = models.CharField(max_length=255, null=True, blank=True, verbose_name="值")
    icpc = models.CharField(max_length=5, null=True, blank=True, verbose_name="ICPC编码")
    pym = models.CharField(max_length=255, blank=True, null=True, verbose_name="拼音码")

    class Meta:
        abstract = True

    def __str__(self):
        return self.value

    def natural_key(self):
        return self.value

    def save(self, *args, **kwargs):
        if self.label:
            self.pym = ''.join(lazy_pinyin(self.label, style=Style.FIRST_LETTER))
            if self.name is None or self.name=='':
                self.name = "_".join(lazy_pinyin(self.label))
        super().save(*args, **kwargs)




class An_pai_que_ren(DictBase):
    class Meta:
        verbose_name = '安排确认'
        verbose_name_plural = verbose_name


class Character(DictBase):
    class Meta:
        verbose_name = '性格'
        verbose_name_plural = verbose_name


class Satisfaction(DictBase):
    class Meta:
        verbose_name = '满意度'
        verbose_name_plural = verbose_name


class Frequency(DictBase):
    class Meta:
        verbose_name = '频次'
        verbose_name_plural = verbose_name


class State_degree(DictBase):
    class Meta:
        verbose_name = '状态程度'
        verbose_name_plural = verbose_name


class Comparative_expression(DictBase):
    class Meta:
        verbose_name = '比较表达'
        verbose_name_plural = verbose_name


class Sports_preference(DictBase):
    class Meta:
        verbose_name = '运动类型'
        verbose_name_plural = verbose_name


class Exercise_time(DictBase):
    class Meta:
        verbose_name = '运动时长'
        verbose_name_plural = verbose_name


class Convenience(DictBase):
    class Meta:
        verbose_name = '便捷程度'
        verbose_name_plural = verbose_name


class Family_relationship(DictBase):
    class Meta:
        verbose_name = '家庭成员关系'
        verbose_name_plural = verbose_name


class Normality(DictBase):
    class Meta:
        verbose_name = '正常性判断'
        verbose_name_plural = verbose_name


class Dorsal_artery_pulsation(DictBase):
    class Meta:
        verbose_name = '足背动脉搏动情况'
        verbose_name_plural = verbose_name


class Pharynx(DictBase):
    class Meta:
        verbose_name = '咽部'
        verbose_name_plural = verbose_name


class Edema(DictBase):
    class Meta:
        verbose_name = '水肿情况'
        verbose_name_plural = verbose_name


class Gender(DictBase):
    class Meta:
        verbose_name = '性别'
        verbose_name_plural = verbose_name


class Nationality(DictBase):
    class Meta:
        verbose_name = '民族'
        verbose_name_plural = verbose_name


class Marital_status(DictBase):
    class Meta:
        verbose_name = '婚姻状况'
        verbose_name_plural = verbose_name


class Education(DictBase):
    class Meta:
        verbose_name = '文化程度'
        verbose_name_plural = verbose_name


class Occupational_status(DictBase):
    class Meta:
        verbose_name = '职业状况'
        verbose_name_plural = verbose_name


class Medical_expenses_burden(DictBase):
    class Meta:
        verbose_name = '医疗费用负担'
        verbose_name_plural = verbose_name


class Type_of_residence(DictBase):
    class Meta:
        verbose_name = '居住类型'
        verbose_name_plural = verbose_name


class Blood_type(DictBase):
    class Meta:
        verbose_name = '血型'
        verbose_name_plural = verbose_name


class Chang_yong_zheng_zhuang(DictBase):
    class Meta:
        verbose_name = '常用症状'
        verbose_name_plural = verbose_name


class Tang_niao_bing_zheng_zhuang(DictBase):
    class Meta:
        verbose_name = '糖尿病症状'
        verbose_name_plural = verbose_name


class Qian_dao_que_ren(DictBase):
    class Meta:
        verbose_name = '签到确认'
        verbose_name_plural = verbose_name


class Shi_mian_qing_kuang(DictBase):
    class Meta:
        verbose_name = '失眠情况'
        verbose_name_plural = verbose_name


class Ya_li_qing_kuang(DictBase):
    class Meta:
        verbose_name = '压力情况'
        verbose_name_plural = verbose_name


class Ji_xu_shi_yong_qing_kuang(DictBase):
    class Meta:
        verbose_name = '继续使用情况'
        verbose_name_plural = verbose_name


class Qian_yue_que_ren(DictBase):
    class Meta:
        verbose_name = '签约确认'
        verbose_name_plural = verbose_name


class Sui_fang_ping_gu(DictBase):
    class Meta:
        verbose_name = '血压监测评估'
        verbose_name_plural = verbose_name


class Tong_ti(DictBase):
    class Meta:
        verbose_name = '酮体'
        verbose_name_plural = verbose_name


class Niao_tang(DictBase):
    class Meta:
        verbose_name = '尿糖'
        verbose_name_plural = verbose_name


class Dan_bai_zhi(DictBase):
    class Meta:
        verbose_name = '蛋白质'
        verbose_name_plural = verbose_name


class Yong_yao_tu_jing(DictBase):
    class Meta:
        verbose_name = '用药途径'
        verbose_name_plural = verbose_name


class Xin_yu_ping_ji(DictBase):
    class Meta:
        verbose_name = '信誉评级'
        verbose_name_plural = verbose_name


class Yao_pin_dan_wei(DictBase):
    class Meta:
        verbose_name = '药品计量单位'
        verbose_name_plural = verbose_name


class Yao_pin_fen_lei(DictBase):
    class Meta:
        verbose_name = '药品分类'
        verbose_name_plural = verbose_name


class Fu_wu_jue_se(DictBase):
    class Meta:
        verbose_name = '服务角色'
        verbose_name_plural = verbose_name


class Qin_shu_guan_xi(DictBase):
    class Meta:
        verbose_name = '亲属关系'
        verbose_name_plural = verbose_name


class Tang_niao_bing_kong_zhi_xiao_guo_ping_gu(DictBase):
    class Meta:
        verbose_name = '糖尿病控制效果评估'
        verbose_name_plural = verbose_name
********************************************************************************
File: dictionaries/serializers.py
********************************************************************************

from rest_framework import serializers
from .models import *

class An_pai_que_renSerializer(serializers.ModelSerializer):
    class Meta:
        model = An_pai_que_ren
        fields = 'value'

class CharacterSerializer(serializers.ModelSerializer):
    class Meta:
        model = Character
        fields = 'value'

class SatisfactionSerializer(serializers.ModelSerializer):
    class Meta:
        model = Satisfaction
        fields = 'value'

class FrequencySerializer(serializers.ModelSerializer):
    class Meta:
        model = Frequency
        fields = 'value'

class State_degreeSerializer(serializers.ModelSerializer):
    class Meta:
        model = State_degree
        fields = 'value'

class Comparative_expressionSerializer(serializers.ModelSerializer):
    class Meta:
        model = Comparative_expression
        fields = 'value'

class Sports_preferenceSerializer(serializers.ModelSerializer):
    class Meta:
        model = Sports_preference
        fields = 'value'

class Exercise_timeSerializer(serializers.ModelSerializer):
    class Meta:
        model = Exercise_time
        fields = 'value'

class ConvenienceSerializer(serializers.ModelSerializer):
    class Meta:
        model = Convenience
        fields = 'value'

class Family_relationshipSerializer(serializers.ModelSerializer):
    class Meta:
        model = Family_relationship
        fields = 'value'

class NormalitySerializer(serializers.ModelSerializer):
    class Meta:
        model = Normality
        fields = 'value'

class Dorsal_artery_pulsationSerializer(serializers.ModelSerializer):
    class Meta:
        model = Dorsal_artery_pulsation
        fields = 'value'

class PharynxSerializer(serializers.ModelSerializer):
    class Meta:
        model = Pharynx
        fields = 'value'

class EdemaSerializer(serializers.ModelSerializer):
    class Meta:
        model = Edema
        fields = 'value'

class GenderSerializer(serializers.ModelSerializer):
    class Meta:
        model = Gender
        fields = 'value'

class NationalitySerializer(serializers.ModelSerializer):
    class Meta:
        model = Nationality
        fields = 'value'

class Marital_statusSerializer(serializers.ModelSerializer):
    class Meta:
        model = Marital_status
        fields = 'value'

class EducationSerializer(serializers.ModelSerializer):
    class Meta:
        model = Education
        fields = 'value'

class Occupational_statusSerializer(serializers.ModelSerializer):
    class Meta:
        model = Occupational_status
        fields = 'value'

class Medical_expenses_burdenSerializer(serializers.ModelSerializer):
    class Meta:
        model = Medical_expenses_burden
        fields = 'value'

class Type_of_residenceSerializer(serializers.ModelSerializer):
    class Meta:
        model = Type_of_residence
        fields = 'value'

class Blood_typeSerializer(serializers.ModelSerializer):
    class Meta:
        model = Blood_type
        fields = 'value'

class Chang_yong_zheng_zhuangSerializer(serializers.ModelSerializer):
    class Meta:
        model = Chang_yong_zheng_zhuang
        fields = 'value'

class Tang_niao_bing_zheng_zhuangSerializer(serializers.ModelSerializer):
    class Meta:
        model = Tang_niao_bing_zheng_zhuang
        fields = 'value'

class Qian_dao_que_renSerializer(serializers.ModelSerializer):
    class Meta:
        model = Qian_dao_que_ren
        fields = 'value'

class Shi_mian_qing_kuangSerializer(serializers.ModelSerializer):
    class Meta:
        model = Shi_mian_qing_kuang
        fields = 'value'

class Ya_li_qing_kuangSerializer(serializers.ModelSerializer):
    class Meta:
        model = Ya_li_qing_kuang
        fields = 'value'

class Ji_xu_shi_yong_qing_kuangSerializer(serializers.ModelSerializer):
    class Meta:
        model = Ji_xu_shi_yong_qing_kuang
        fields = 'value'

class Qian_yue_que_renSerializer(serializers.ModelSerializer):
    class Meta:
        model = Qian_yue_que_ren
        fields = 'value'

class Sui_fang_ping_guSerializer(serializers.ModelSerializer):
    class Meta:
        model = Sui_fang_ping_gu
        fields = 'value'

class Tong_tiSerializer(serializers.ModelSerializer):
    class Meta:
        model = Tong_ti
        fields = 'value'

class Niao_tangSerializer(serializers.ModelSerializer):
    class Meta:
        model = Niao_tang
        fields = 'value'

class Dan_bai_zhiSerializer(serializers.ModelSerializer):
    class Meta:
        model = Dan_bai_zhi
        fields = 'value'

class Yong_yao_tu_jingSerializer(serializers.ModelSerializer):
    class Meta:
        model = Yong_yao_tu_jing
        fields = 'value'

class Xin_yu_ping_jiSerializer(serializers.ModelSerializer):
    class Meta:
        model = Xin_yu_ping_ji
        fields = 'value'

class Yao_pin_dan_weiSerializer(serializers.ModelSerializer):
    class Meta:
        model = Yao_pin_dan_wei
        fields = 'value'

class Yao_pin_fen_leiSerializer(serializers.ModelSerializer):
    class Meta:
        model = Yao_pin_fen_lei
        fields = 'value'

class Fu_wu_jue_seSerializer(serializers.ModelSerializer):
    class Meta:
        model = Fu_wu_jue_se
        fields = 'value'

class Qin_shu_guan_xiSerializer(serializers.ModelSerializer):
    class Meta:
        model = Qin_shu_guan_xi
        fields = 'value'

class Tang_niao_bing_kong_zhi_xiao_guo_ping_guSerializer(serializers.ModelSerializer):
    class Meta:
        model = Tang_niao_bing_kong_zhi_xiao_guo_ping_gu
        fields = 'value'

********************************************************************************
File: dictionaries/__init__.py
********************************************************************************

from os import path
from django.apps import AppConfig
 
# VERBOSE_APP_NAME = "YOUR VERBOSE APP NAME HERE"
 
 
def get_current_app_name(file):
    return path.dirname(file).replace('\\', '/').split('/')[-1]
 
 
class AppVerboseNameConfig(AppConfig):
    name = get_current_app_name(__file__)
    verbose_name = u'其它字典'
 
 
default_app_config = get_current_app_name(__file__) + '.__init__.AppVerboseNameConfig'

********************************************************************************
File: dictionaries/apps.py
********************************************************************************

from django.apps import AppConfig


class DictionariesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'dictionaries'

********************************************************************************
File: dictionaries/forms.py
********************************************************************************


********************************************************************************
File: dictionaries/admin.py
********************************************************************************

from django.contrib import admin
from core.admin import clinic_site
from .models import *



@admin.register(An_pai_que_ren)
class An_pai_que_renAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(An_pai_que_ren, An_pai_que_renAdmin)


@admin.register(Character)
class CharacterAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Character, CharacterAdmin)


@admin.register(Satisfaction)
class SatisfactionAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Satisfaction, SatisfactionAdmin)


@admin.register(Frequency)
class FrequencyAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Frequency, FrequencyAdmin)


@admin.register(State_degree)
class State_degreeAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(State_degree, State_degreeAdmin)


@admin.register(Comparative_expression)
class Comparative_expressionAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Comparative_expression, Comparative_expressionAdmin)


@admin.register(Sports_preference)
class Sports_preferenceAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Sports_preference, Sports_preferenceAdmin)


@admin.register(Exercise_time)
class Exercise_timeAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Exercise_time, Exercise_timeAdmin)


@admin.register(Convenience)
class ConvenienceAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Convenience, ConvenienceAdmin)


@admin.register(Family_relationship)
class Family_relationshipAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Family_relationship, Family_relationshipAdmin)


@admin.register(Normality)
class NormalityAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Normality, NormalityAdmin)


@admin.register(Dorsal_artery_pulsation)
class Dorsal_artery_pulsationAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Dorsal_artery_pulsation, Dorsal_artery_pulsationAdmin)


@admin.register(Pharynx)
class PharynxAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Pharynx, PharynxAdmin)


@admin.register(Edema)
class EdemaAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Edema, EdemaAdmin)


@admin.register(Gender)
class GenderAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Gender, GenderAdmin)


@admin.register(Nationality)
class NationalityAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Nationality, NationalityAdmin)


@admin.register(Marital_status)
class Marital_statusAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Marital_status, Marital_statusAdmin)


@admin.register(Education)
class EducationAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Education, EducationAdmin)


@admin.register(Occupational_status)
class Occupational_statusAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Occupational_status, Occupational_statusAdmin)


@admin.register(Medical_expenses_burden)
class Medical_expenses_burdenAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Medical_expenses_burden, Medical_expenses_burdenAdmin)


@admin.register(Type_of_residence)
class Type_of_residenceAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Type_of_residence, Type_of_residenceAdmin)


@admin.register(Blood_type)
class Blood_typeAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Blood_type, Blood_typeAdmin)


@admin.register(Chang_yong_zheng_zhuang)
class Chang_yong_zheng_zhuangAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Chang_yong_zheng_zhuang, Chang_yong_zheng_zhuangAdmin)


@admin.register(Tang_niao_bing_zheng_zhuang)
class Tang_niao_bing_zheng_zhuangAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Tang_niao_bing_zheng_zhuang, Tang_niao_bing_zheng_zhuangAdmin)


@admin.register(Qian_dao_que_ren)
class Qian_dao_que_renAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Qian_dao_que_ren, Qian_dao_que_renAdmin)


@admin.register(Shi_mian_qing_kuang)
class Shi_mian_qing_kuangAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Shi_mian_qing_kuang, Shi_mian_qing_kuangAdmin)


@admin.register(Ya_li_qing_kuang)
class Ya_li_qing_kuangAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Ya_li_qing_kuang, Ya_li_qing_kuangAdmin)


@admin.register(Ji_xu_shi_yong_qing_kuang)
class Ji_xu_shi_yong_qing_kuangAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Ji_xu_shi_yong_qing_kuang, Ji_xu_shi_yong_qing_kuangAdmin)


@admin.register(Qian_yue_que_ren)
class Qian_yue_que_renAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Qian_yue_que_ren, Qian_yue_que_renAdmin)


@admin.register(Sui_fang_ping_gu)
class Sui_fang_ping_guAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Sui_fang_ping_gu, Sui_fang_ping_guAdmin)


@admin.register(Tong_ti)
class Tong_tiAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Tong_ti, Tong_tiAdmin)


@admin.register(Niao_tang)
class Niao_tangAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Niao_tang, Niao_tangAdmin)


@admin.register(Dan_bai_zhi)
class Dan_bai_zhiAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Dan_bai_zhi, Dan_bai_zhiAdmin)


@admin.register(Yong_yao_tu_jing)
class Yong_yao_tu_jingAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Yong_yao_tu_jing, Yong_yao_tu_jingAdmin)


@admin.register(Xin_yu_ping_ji)
class Xin_yu_ping_jiAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Xin_yu_ping_ji, Xin_yu_ping_jiAdmin)


@admin.register(Yao_pin_dan_wei)
class Yao_pin_dan_weiAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Yao_pin_dan_wei, Yao_pin_dan_weiAdmin)


@admin.register(Yao_pin_fen_lei)
class Yao_pin_fen_leiAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Yao_pin_fen_lei, Yao_pin_fen_leiAdmin)


@admin.register(Fu_wu_jue_se)
class Fu_wu_jue_seAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Fu_wu_jue_se, Fu_wu_jue_seAdmin)


@admin.register(Qin_shu_guan_xi)
class Qin_shu_guan_xiAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Qin_shu_guan_xi, Qin_shu_guan_xiAdmin)


@admin.register(Tang_niao_bing_kong_zhi_xiao_guo_ping_gu)
class Tang_niao_bing_kong_zhi_xiao_guo_ping_guAdmin(admin.ModelAdmin):
    search_fields = ['value', 'pym']
    list_display = ["value"]

clinic_site.register(Tang_niao_bing_kong_zhi_xiao_guo_ping_gu, Tang_niao_bing_kong_zhi_xiao_guo_ping_guAdmin)

********************************************************************************
File: dictionaries/tests.py
********************************************************************************

from django.test import TestCase

# Create your tests here.

********************************************************************************
File: dictionaries/views.py
********************************************************************************

from django.shortcuts import render

# Create your views here.

********************************************************************************
File: service/models.py
********************************************************************************

from django.db import models

from icpc.models import *
from dictionaries.models import *
from core.models import HsscFormModel, Staff, Institution, Service, ServicePackage, Customer, CycleUnit, Medicine
from core.hsscbase_class import HsscBase

from pypinyin import lazy_pinyin

class CustomerSchedulePackage(HsscFormModel):
    servicepackage = models.ForeignKey(ServicePackage, on_delete=models.CASCADE, verbose_name='服务包')
    
    class Meta:
        verbose_name = '安排服务包'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.servicepackage.label

class CustomerScheduleDraft(HsscBase):
    order = models.PositiveSmallIntegerField(default=100, verbose_name='顺序')
    schedule_package = models.ForeignKey(CustomerSchedulePackage, null=True, on_delete=models.CASCADE, verbose_name='服务包')
    service = models.ForeignKey(Service, on_delete=models.CASCADE, null=True, verbose_name='服务项目')
    cycle_unit = models.ForeignKey(CycleUnit, on_delete=models.CASCADE, default=1, blank=True, null=True, verbose_name='周期单位')
    cycle_frequency = models.PositiveSmallIntegerField(blank=True, null=True, default=1, verbose_name="每周期频次")
    cycle_times = models.PositiveSmallIntegerField(blank=True, null=True, default=1, verbose_name="天数")
    Default_beginning_time = [(0, '无'), (1, '当前系统时间'), (2, '首个服务开始时间'), (3, '上个服务结束时间'), (4, '客户出生日期')]
    default_beginning_time = models.PositiveSmallIntegerField(choices=Default_beginning_time, default=0, verbose_name='执行时间基准')
    base_interval = models.DurationField(blank=True, null=True, verbose_name='基准间隔', help_text='例如：3 days, 22:00:00')
    scheduled_operator = models.ForeignKey(Staff, on_delete=models.CASCADE, null=True, blank=True, verbose_name='服务人员')
    overtime = models.DurationField(blank=True, null=True, verbose_name='超期时限')
    
    class Meta:
        verbose_name = '服务项目安排'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.service.label

class CustomerScheduleList(HsscFormModel):
    plan_serial_number = models.CharField(max_length=255, null=True, blank=True, verbose_name='服务计划')
    schedule_package = models.ForeignKey(CustomerSchedulePackage, null=True, on_delete=models.CASCADE, verbose_name='服务包')
    
    class Meta:
        verbose_name = '客户服务计划'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.plan_serial_number

class CustomerSchedule(HsscFormModel):
    customer_schedule_list = models.ForeignKey(CustomerScheduleList, null=True, blank=True, on_delete=models.CASCADE, verbose_name='服务计划')
    schedule_package = models.ForeignKey(CustomerSchedulePackage, null=True, blank=True, on_delete=models.CASCADE, verbose_name='服务包')
    service = models.ForeignKey(Service, on_delete=models.CASCADE, null=True, verbose_name='服务项目')
    scheduled_time = models.DateTimeField(blank=True, null=True, verbose_name='计划执行时间')
    scheduled_operator = models.ForeignKey(Staff, on_delete=models.CASCADE, null=True, blank=True, verbose_name='服务人员')
    overtime = models.DurationField(blank=True, null=True, verbose_name='超期时限')
    is_assigned = models.BooleanField(default=False, verbose_name='已生成任务')

    class Meta:
        verbose_name = '客户服务日程'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.service.label


# **********************************************************************************************************************
# Service基本信息表单Model
# **********************************************************************************************************************
class Xue_ya_jian_ce_ping_gu(HsscFormModel):
    boolfield_xue_ya_jian_ce_ping_gu = models.ForeignKey(Sui_fang_ping_gu, related_name='sui_fang_ping_gu_for_boolfield_xue_ya_jian_ce_ping_gu_xue_ya_jian_ce_ping_gu', on_delete=models.CASCADE, null=True, blank=False, verbose_name='血压监测评估')

    class Meta:
        verbose_name = '血压监测评估'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
class Can_hou_2_xiao_shi_xue_tang(HsscFormModel):
    boolfield_can_hou_2_xiao_shi_xue_tang = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=False, verbose_name='餐后2小时血糖')

    class Meta:
        verbose_name = '餐后2小时血糖'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
class Ji_gou_ji_ben_xin_xi_biao(HsscFormModel):
    boolfield_lian_xi_di_zhi = models.CharField(max_length=255, null=True, blank=True, verbose_name='联系地址')
    boolfield_ji_gou_bian_ma = models.CharField(max_length=255, null=True, blank=True, verbose_name='机构编码')
    boolfield_ji_gou_ming_cheng = models.CharField(max_length=255, null=True, blank=True, verbose_name='机构名称')
    boolfield_ji_gou_dai_ma = models.CharField(max_length=255, null=True, blank=True, verbose_name='机构代码')
    boolfield_ji_gou_shu_xing = models.CharField(max_length=255, null=True, blank=True, verbose_name='机构属性')
    boolfield_ji_gou_ceng_ji = models.CharField(max_length=255, null=True, blank=True, verbose_name='机构层级')
    boolfield_suo_zai_hang_zheng_qu_hua_dai_ma = models.CharField(max_length=255, null=True, blank=True, verbose_name='所在行政区划代码')
    boolfield_xing_zheng_qu_hua_gui_shu = models.CharField(max_length=255, null=True, blank=True, verbose_name='行政区划归属')
    boolfield_fa_ding_fu_ze_ren = models.CharField(max_length=255, null=True, blank=True, verbose_name='法定负责人')
    boolfield_lian_xi_dian_hua = models.CharField(max_length=255, null=True, blank=True, verbose_name='联系电话')
    pym = models.CharField(max_length=255, blank=True, null=True, verbose_name="拼音码")
        

    class Meta:
        verbose_name = '机构基本信息维护'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
    def save(self, *args, **kwargs):
        if self.name:
            self.pym = ''.join(lazy_pinyin(self.label, style=Style.FIRST_LETTER))
        super().save(*args, **kwargs)
    
    def natural_key(self):
        return self.name

        
class Zhi_yuan_ji_ben_xin_xi_biao(HsscFormModel):
    boolfield_shen_fen_zheng_hao_ma = models.CharField(max_length=255, null=True, blank=True, verbose_name='身份证号码')
    boolfield_zhi_ye_zi_zhi = models.CharField(max_length=255, null=True, blank=True, verbose_name='执业资质')
    boolfield_zhuan_chang = models.CharField(max_length=255, null=True, blank=True, verbose_name='专长')
    boolfield_zhi_ye_shi_jian = models.CharField(max_length=255, null=True, blank=True, verbose_name='执业时间')
    boolfield_zhi_yuan_bian_ma = models.CharField(max_length=255, null=True, blank=True, verbose_name='职员编码')
    boolfield_lian_xi_dian_hua = models.CharField(max_length=255, null=True, blank=True, verbose_name='联系电话')
    boolfield_xing_ming = models.CharField(max_length=255, null=True, blank=True, verbose_name='姓名')
    boolfield_suo_shu_ji_gou = models.ForeignKey(Institution, related_name='institution_for_boolfield_suo_shu_ji_gou_zhi_yuan_ji_ben_xin_xi_biao', on_delete=models.CASCADE, null=True, blank=True, verbose_name='所属机构')
    boolfield_fu_wu_jue_se = models.ManyToManyField(Fu_wu_jue_se, related_name='fu_wu_jue_se_for_boolfield_fu_wu_jue_se_zhi_yuan_ji_ben_xin_xi_biao', blank=True, verbose_name='服务角色')
    pym = models.CharField(max_length=255, blank=True, null=True, verbose_name="拼音码")
        

    class Meta:
        verbose_name = '职员基本信息维护'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
    def save(self, *args, **kwargs):
        if self.name:
            self.pym = ''.join(lazy_pinyin(self.label, style=Style.FIRST_LETTER))
        super().save(*args, **kwargs)
    
    def natural_key(self):
        return self.name

        
class Fu_wu_fen_gong_ji_gou_ji_ben_xin_xi_diao_cha(HsscFormModel):
    boolfield_lian_xi_di_zhi = models.CharField(max_length=255, null=True, blank=True, verbose_name='联系地址')
    boolfield_ji_gou_dai_ma = models.CharField(max_length=255, null=True, blank=True, verbose_name='机构代码')
    boolfield_ji_gou_shu_xing = models.CharField(max_length=255, null=True, blank=True, verbose_name='机构属性')
    boolfield_gong_ying_shang_bian_ma = models.CharField(max_length=255, null=True, blank=True, verbose_name='供应商编码')
    boolfield_zhuan_ye_fu_wu = models.CharField(max_length=255, null=True, blank=True, verbose_name='专业服务')
    boolfield_gong_ying_shang_ming_cheng = models.CharField(max_length=255, null=True, blank=True, verbose_name='供应商名称')
    boolfield_lian_xi_dian_hua = models.CharField(max_length=255, null=True, blank=True, verbose_name='联系电话')
    boolfield_xin_yu_ping_ji = models.ForeignKey(Xin_yu_ping_ji, related_name='xin_yu_ping_ji_for_boolfield_xin_yu_ping_ji_fu_wu_fen_gong_ji_gou_ji_ben_xin_xi_diao_cha', on_delete=models.CASCADE, null=True, blank=True, verbose_name='信誉评级')

    class Meta:
        verbose_name = '服务分供机构基本信息维护'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
class She_bei_ji_ben_xin_xi_ji_lu(HsscFormModel):
    boolfield_she_bei_bian_ma = models.CharField(max_length=255, null=True, blank=True, verbose_name='设备编码')
    boolfield_sheng_chan_chang_jia = models.CharField(max_length=255, null=True, blank=True, verbose_name='生产厂家')
    boolfield_she_bei_fu_wu_dan_wei_hao_shi = models.CharField(max_length=255, null=True, blank=True, verbose_name='设备服务单位耗时')
    boolfield_she_bei_jian_xiu_zhou_qi = models.CharField(max_length=255, null=True, blank=True, verbose_name='设备检修周期')
    boolfield_she_bei_shi_yong_cheng_ben = models.CharField(max_length=255, null=True, blank=True, verbose_name='设备使用成本')
    boolfield_she_bei_ming_cheng = models.CharField(max_length=255, null=True, blank=True, verbose_name='设备名称')
    boolfield_lian_xi_dian_hua = models.CharField(max_length=255, null=True, blank=True, verbose_name='联系电话')
    boolfield_she_bei_shi_yong_fu_wu_gong_neng = models.ForeignKey(Icpc4_physical_examination_and_tests, related_name='icpc4_physical_examination_and_tests_for_boolfield_she_bei_shi_yong_fu_wu_gong_neng_she_bei_ji_ben_xin_xi_ji_lu', on_delete=models.CASCADE, null=True, blank=True, verbose_name='设备适用服务功能')
    pym = models.CharField(max_length=255, blank=True, null=True, verbose_name="拼音码")
        

    class Meta:
        verbose_name = '设备基本信息维护'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
    def save(self, *args, **kwargs):
        if self.name:
            self.pym = ''.join(lazy_pinyin(self.label, style=Style.FIRST_LETTER))
        super().save(*args, **kwargs)
    
    def natural_key(self):
        return self.name

        
class Gong_ying_shang_ji_ben_xin_xi_diao_cha(HsscFormModel):
    boolfield_lian_xi_di_zhi = models.CharField(max_length=255, null=True, blank=True, verbose_name='联系地址')
    boolfield_gong_ying_shang_bian_ma = models.CharField(max_length=255, null=True, blank=True, verbose_name='供应商编码')
    boolfield_zhu_yao_gong_ying_chan_pin = models.CharField(max_length=255, null=True, blank=True, verbose_name='主要供应产品')
    boolfield_gong_huo_zhou_qi = models.CharField(max_length=255, null=True, blank=True, verbose_name='供货周期')
    boolfield_gong_ying_shang_ming_cheng = models.CharField(max_length=255, null=True, blank=True, verbose_name='供应商名称')
    boolfield_lian_xi_dian_hua = models.CharField(max_length=255, null=True, blank=True, verbose_name='联系电话')
    boolfield_xin_yu_ping_ji = models.ForeignKey(Xin_yu_ping_ji, related_name='xin_yu_ping_ji_for_boolfield_xin_yu_ping_ji_gong_ying_shang_ji_ben_xin_xi_diao_cha', on_delete=models.CASCADE, null=True, blank=True, verbose_name='信誉评级')
    pym = models.CharField(max_length=255, blank=True, null=True, verbose_name="拼音码")
        

    class Meta:
        verbose_name = '物料供应商基本信息维护'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
    def save(self, *args, **kwargs):
        if self.name:
            self.pym = ''.join(lazy_pinyin(self.label, style=Style.FIRST_LETTER))
        super().save(*args, **kwargs)
    
    def natural_key(self):
        return self.name

        
class Yao_pin_ji_ben_xin_xi_biao(HsscFormModel):
    boolfield_yao_pin_tong_yong_ming = models.CharField(max_length=255, null=True, blank=True, verbose_name='药品通用名')
    boolfield_yao_pin_ming_cheng = models.CharField(max_length=255, null=True, blank=True, verbose_name='药品名称')
    boolfield_yong_yao_pin_ci = models.CharField(max_length=255, null=True, blank=True, verbose_name='用药频次')
    boolfield_yao_pin_bian_ma = models.CharField(max_length=255, null=True, blank=True, verbose_name='药品编码')
    boolfield_yao_pin_gui_ge = models.CharField(max_length=255, null=True, blank=True, verbose_name='药品规格')
    boolfield_chang_yong_chu_fang_liang = models.CharField(max_length=255, null=True, blank=True, verbose_name='常用处方量')
    boolfield_dui_zhao_yi_bao_ming_cheng = models.CharField(max_length=255, null=True, blank=True, verbose_name='对照医保名称')
    boolfield_dui_zhao_ji_yao_ming_cheng = models.CharField(max_length=255, null=True, blank=True, verbose_name='对照基药名称')
    boolfield_huan_suan_gui_ze = models.CharField(max_length=255, null=True, blank=True, verbose_name='换算规则')
    boolfield_yong_yao_liao_cheng = models.CharField(max_length=255, null=True, blank=True, verbose_name='用药疗程')
    boolfield_chu_fang_ji_liang_dan_wei = models.ForeignKey(Yao_pin_dan_wei, related_name='yao_pin_dan_wei_for_boolfield_chu_fang_ji_liang_dan_wei_yao_pin_ji_ben_xin_xi_biao', on_delete=models.CASCADE, null=True, blank=True, verbose_name='处方计量单位')
    boolfield_ru_ku_ji_liang_dan_wei = models.ForeignKey(Yao_pin_dan_wei, related_name='yao_pin_dan_wei_for_boolfield_ru_ku_ji_liang_dan_wei_yao_pin_ji_ben_xin_xi_biao', on_delete=models.CASCADE, null=True, blank=True, verbose_name='入库计量单位')
    boolfield_xiao_shou_ji_liang_dan_wei = models.ForeignKey(Yao_pin_dan_wei, related_name='yao_pin_dan_wei_for_boolfield_xiao_shou_ji_liang_dan_wei_yao_pin_ji_ben_xin_xi_biao', on_delete=models.CASCADE, null=True, blank=True, verbose_name='销售计量单位')
    boolfield_yong_yao_tu_jing = models.ForeignKey(Yong_yao_tu_jing, related_name='yong_yao_tu_jing_for_boolfield_yong_yao_tu_jing_yao_pin_ji_ben_xin_xi_biao', on_delete=models.CASCADE, null=True, blank=True, verbose_name='用药途径')
    boolfield_yao_pin_fen_lei = models.ForeignKey(Yao_pin_fen_lei, related_name='yao_pin_fen_lei_for_boolfield_yao_pin_fen_lei_yao_pin_ji_ben_xin_xi_biao', on_delete=models.CASCADE, null=True, blank=True, verbose_name='药品分类')
    pym = models.CharField(max_length=255, blank=True, null=True, verbose_name="拼音码")
        

    class Meta:
        verbose_name = '药品基本信息维护'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
    def save(self, *args, **kwargs):
        if self.name:
            self.pym = ''.join(lazy_pinyin(self.label, style=Style.FIRST_LETTER))
        super().save(*args, **kwargs)
    
    def natural_key(self):
        return self.name

        
class Shen_qing_kong_fu_xue_tang_jian_cha_fu_wu(HsscFormModel):
    boolfield_dang_qian_pai_dui_ren_shu = models.IntegerField(null=True, blank=True, verbose_name='当前排队人数')
    boolfield_yu_ji_deng_hou_shi_jian = models.IntegerField(null=True, blank=True, verbose_name='预计等候时间')
    boolfield_ze_ren_ren = models.ForeignKey(Staff, related_name='staff_for_boolfield_ze_ren_ren_shen_qing_kong_fu_xue_tang_jian_cha_fu_wu', on_delete=models.CASCADE, null=True, blank=True, verbose_name='责任人')
    boolfield_fu_wu_xiang_mu_ming_cheng = models.ForeignKey(Icpc4_physical_examination_and_tests, related_name='icpc4_physical_examination_and_tests_for_boolfield_fu_wu_xiang_mu_ming_cheng_shen_qing_kong_fu_xue_tang_jian_cha_fu_wu', on_delete=models.CASCADE, null=True, blank=True, verbose_name='服务项目名称')
    boolfield_an_pai_que_ren = models.ForeignKey(An_pai_que_ren, related_name='an_pai_que_ren_for_boolfield_an_pai_que_ren_shen_qing_kong_fu_xue_tang_jian_cha_fu_wu', on_delete=models.CASCADE, null=True, blank=True, verbose_name='安排确认')

    class Meta:
        verbose_name = '申请空腹血糖检查服务'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
class Ju_min_ji_ben_xin_xi_diao_cha(HsscFormModel):
    boolfield_xing_ming = models.CharField(max_length=255, null=True, blank=True, verbose_name='姓名')
    boolfield_chu_sheng_ri_qi = models.DateField(null=True, blank=True, verbose_name='出生日期')
    boolfield_xing_bie = models.ForeignKey(Gender, related_name='gender_for_boolfield_xing_bie_ju_min_ji_ben_xin_xi_diao_cha', on_delete=models.CASCADE, null=True, blank=True, verbose_name='性别')
    boolfield_jia_ting_di_zhi = models.CharField(max_length=255, null=True, blank=True, verbose_name='家庭地址')
    boolfield_lian_xi_dian_hua = models.CharField(max_length=255, null=True, blank=True, verbose_name='联系电话')
    boolfield_shen_fen_zheng_hao_ma = models.CharField(max_length=255, null=True, blank=True, verbose_name='身份证号码')
    boolfield_ju_min_dang_an_hao = models.CharField(max_length=255, null=True, blank=True, verbose_name='居民档案号')
    boolfield_yi_liao_ic_ka_hao = models.CharField(max_length=255, null=True, blank=True, verbose_name='医疗ic卡号')
    boolfield_min_zu = models.ForeignKey(Nationality, related_name='nationality_for_boolfield_min_zu_ju_min_ji_ben_xin_xi_diao_cha', on_delete=models.CASCADE, null=True, blank=True, verbose_name='民族')
    boolfield_hun_yin_zhuang_kuang = models.ForeignKey(Marital_status, related_name='marital_status_for_boolfield_hun_yin_zhuang_kuang_ju_min_ji_ben_xin_xi_diao_cha', on_delete=models.CASCADE, null=True, blank=True, verbose_name='婚姻状况')
    boolfield_wen_hua_cheng_du = models.ForeignKey(Education, related_name='education_for_boolfield_wen_hua_cheng_du_ju_min_ji_ben_xin_xi_diao_cha', on_delete=models.CASCADE, null=True, blank=True, verbose_name='文化程度')
    boolfield_zhi_ye_zhuang_kuang = models.ForeignKey(Occupational_status, related_name='occupational_status_for_boolfield_zhi_ye_zhuang_kuang_ju_min_ji_ben_xin_xi_diao_cha', on_delete=models.CASCADE, null=True, blank=True, verbose_name='职业状况')
    boolfield_yi_liao_fei_yong_fu_dan = models.ManyToManyField(Medical_expenses_burden, related_name='medical_expenses_burden_for_boolfield_yi_liao_fei_yong_fu_dan_ju_min_ji_ben_xin_xi_diao_cha', blank=True, verbose_name='医疗费用负担')
    boolfield_ju_zhu_lei_xing = models.ForeignKey(Type_of_residence, related_name='type_of_residence_for_boolfield_ju_zhu_lei_xing_ju_min_ji_ben_xin_xi_diao_cha', on_delete=models.CASCADE, null=True, blank=True, verbose_name='居住类型')
    boolfield_xue_xing = models.ForeignKey(Blood_type, related_name='blood_type_for_boolfield_xue_xing_ju_min_ji_ben_xin_xi_diao_cha', on_delete=models.CASCADE, null=True, blank=True, verbose_name='血型')
    boolfield_qian_yue_jia_ting_yi_sheng = models.ForeignKey(Staff, related_name='staff_for_boolfield_qian_yue_jia_ting_yi_sheng_ju_min_ji_ben_xin_xi_diao_cha', on_delete=models.CASCADE, null=True, blank=True, verbose_name='签约家庭医生')
    boolfield_jia_ting_cheng_yuan_guan_xi = models.ForeignKey(Family_relationship, related_name='family_relationship_for_boolfield_jia_ting_cheng_yuan_guan_xi_ju_min_ji_ben_xin_xi_diao_cha', on_delete=models.CASCADE, null=True, blank=True, verbose_name='家庭成员关系')
    pym = models.CharField(max_length=255, blank=True, null=True, verbose_name="拼音码")
        

    class Meta:
        verbose_name = '居民基本信息调查'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
    def save(self, *args, **kwargs):
        if self.name:
            self.pym = ''.join(lazy_pinyin(self.label, style=Style.FIRST_LETTER))
        super().save(*args, **kwargs)
    
    def natural_key(self):
        return self.name

        
class Shu_ye_zhu_she(HsscFormModel):
    boolfield_yong_yao_pin_ci = models.CharField(max_length=255, null=True, blank=True, verbose_name='用药频次')
    boolfield_yao_pin_gui_ge = models.CharField(max_length=255, null=True, blank=True, verbose_name='药品规格')
    boolfield_chang_yong_chu_fang_liang = models.CharField(max_length=255, null=True, blank=True, verbose_name='常用处方量')
    boolfield_zhi_xing_qian_ming = models.CharField(max_length=255, null=True, blank=True, verbose_name='执行签名')
    boolfield_yong_yao_liao_cheng = models.CharField(max_length=255, null=True, blank=True, verbose_name='用药疗程')
    boolfield_zhu_she_ri_qi = models.DateTimeField(null=True, blank=True, verbose_name='注射日期')
    boolfield_yao_pin_ming = models.ManyToManyField(Medicine, related_name='medicine_for_boolfield_yao_pin_ming_shu_ye_zhu_she', blank=True, verbose_name='药品名')

    class Meta:
        verbose_name = '输液注射'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
class Qian_yue_fu_wu(HsscFormModel):
    boolfield_jia_ting_qian_yue_fu_wu_xie_yi = models.CharField(max_length=255, null=True, blank=True, verbose_name='家庭签约服务协议')
    boolfield_qian_yue_que_ren = models.ForeignKey(Qian_yue_que_ren, related_name='qian_yue_que_ren_for_boolfield_qian_yue_que_ren_qian_yue_fu_wu', on_delete=models.CASCADE, null=True, blank=True, verbose_name='签约确认')
    boolfield_ze_ren_ren = models.ForeignKey(Staff, related_name='staff_for_boolfield_ze_ren_ren_qian_yue_fu_wu', on_delete=models.CASCADE, null=True, blank=True, verbose_name='责任人')

    class Meta:
        verbose_name = '签约服务'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
class T9001(HsscFormModel):
    boolfield_ji_bing_ming_cheng = models.ForeignKey(Icpc5_evaluation_and_diagnoses, related_name='icpc5_evaluation_and_diagnoses_for_boolfield_ji_bing_ming_cheng_T9001', on_delete=models.CASCADE, null=True, blank=True, verbose_name='疾病名称')
    boolfield_ke_neng_zhen_duan = models.ManyToManyField(Icpc5_evaluation_and_diagnoses, related_name='icpc5_evaluation_and_diagnoses_for_boolfield_ke_neng_zhen_duan_T9001', blank=True, verbose_name='可能诊断')
    boolfield_pai_chu_zhen_duan = models.ManyToManyField(Icpc5_evaluation_and_diagnoses, related_name='icpc5_evaluation_and_diagnoses_for_boolfield_pai_chu_zhen_duan_T9001', blank=True, verbose_name='排除诊断')

    class Meta:
        verbose_name = '非胰岛素依赖性糖尿病'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
class Tang_hua_xue_hong_dan_bai_jian_cha_biao(HsscFormModel):
    boolfield_tang_hua_xue_hong_dan_bai = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True, verbose_name='糖化血红蛋白')

    class Meta:
        verbose_name = '糖化血红蛋白检查表'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
class Kong_fu_xue_tang_jian_cha(HsscFormModel):
    boolfield_kong_fu_xue_tang = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True, verbose_name='空腹血糖')

    class Meta:
        verbose_name = '空腹血糖检查'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
class Xue_ya_jian_ce(HsscFormModel):
    boolfield_shou_suo_ya = models.IntegerField(null=True, blank=True, verbose_name='收缩压')
    boolfield_shu_zhang_ya = models.IntegerField(null=True, blank=True, verbose_name='舒张压')

    class Meta:
        verbose_name = '血压监测'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
class Tang_niao_bing_cha_ti(HsscFormModel):
    boolfield_yan_di = models.ForeignKey(Normality, related_name='normality_for_boolfield_yan_di_tang_niao_bing_cha_ti', on_delete=models.CASCADE, null=True, blank=True, verbose_name='眼底')
    boolfield_zuo_jiao = models.ForeignKey(Dorsal_artery_pulsation, related_name='dorsal_artery_pulsation_for_boolfield_zuo_jiao_tang_niao_bing_cha_ti', on_delete=models.CASCADE, null=True, blank=True, verbose_name='左脚')
    boolfield_you_jiao = models.ForeignKey(Dorsal_artery_pulsation, related_name='dorsal_artery_pulsation_for_boolfield_you_jiao_tang_niao_bing_cha_ti', on_delete=models.CASCADE, null=True, blank=True, verbose_name='右脚')

    class Meta:
        verbose_name = '糖尿病查体'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
class A3502(HsscFormModel):
    boolfield_niao_tang = models.ForeignKey(Niao_tang, related_name='niao_tang_for_boolfield_niao_tang_A3502', on_delete=models.CASCADE, null=True, blank=True, verbose_name='尿糖')
    boolfield_dan_bai_zhi = models.ForeignKey(Dan_bai_zhi, related_name='dan_bai_zhi_for_boolfield_dan_bai_zhi_A3502', on_delete=models.CASCADE, null=True, blank=True, verbose_name='蛋白质')
    boolfield_niao_tong_ti = models.ForeignKey(Tong_ti, related_name='tong_ti_for_boolfield_niao_tong_ti_A3502', on_delete=models.CASCADE, null=True, blank=True, verbose_name='尿酮体')

    class Meta:
        verbose_name = '尿常规检查'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
class A6299(HsscFormModel):
    boolfield_yi_chuan_xing_ji_bing = models.ForeignKey(Icpc5_evaluation_and_diagnoses, related_name='icpc5_evaluation_and_diagnoses_for_boolfield_yi_chuan_xing_ji_bing_A6299', on_delete=models.CASCADE, null=True, blank=True, verbose_name='遗传性疾病')
    boolfield_yi_chuan_bing_shi_cheng_yuan = models.ManyToManyField(Qin_shu_guan_xi, related_name='qin_shu_guan_xi_for_boolfield_yi_chuan_bing_shi_cheng_yuan_A6299', blank=True, verbose_name='遗传病史成员')
    boolfield_yao_pin_ming = models.ManyToManyField(Medicine, related_name='medicine_for_boolfield_yao_pin_ming_A6299', blank=True, verbose_name='药品名')
    boolfield_jia_zu_xing_ji_bing = models.ForeignKey(Icpc5_evaluation_and_diagnoses, related_name='icpc5_evaluation_and_diagnoses_for_boolfield_jia_zu_xing_ji_bing_A6299', on_delete=models.CASCADE, null=True, blank=True, verbose_name='家族性疾病')
    boolfield_jia_zu_bing_shi_cheng_yuan = models.ManyToManyField(Qin_shu_guan_xi, related_name='qin_shu_guan_xi_for_boolfield_jia_zu_bing_shi_cheng_yuan_A6299', blank=True, verbose_name='家族病史成员')
    boolfield_shou_shu_ri_qi = models.DateField(null=True, blank=True, verbose_name='手术日期')
    boolfield_shou_shu_ming_cheng = models.ForeignKey(Icpc7_treatments, related_name='icpc7_treatments_for_boolfield_shou_shu_ming_cheng_A6299', on_delete=models.CASCADE, null=True, blank=True, verbose_name='手术名称')
    boolfield_que_zhen_shi_jian = models.DateTimeField(null=True, blank=True, verbose_name='确诊时间')
    boolfield_ge_ren_bing_shi = models.ForeignKey(Icpc5_evaluation_and_diagnoses, related_name='icpc5_evaluation_and_diagnoses_for_boolfield_ge_ren_bing_shi_A6299', on_delete=models.CASCADE, null=True, blank=True, verbose_name='个人病史')
    boolfield_wai_shang_ri_qi = models.DateField(null=True, blank=True, verbose_name='外伤日期')
    boolfield_wai_shang_xing_ji_bing = models.ForeignKey(Icpc5_evaluation_and_diagnoses, related_name='icpc5_evaluation_and_diagnoses_for_boolfield_wai_shang_xing_ji_bing_A6299', on_delete=models.CASCADE, null=True, blank=True, verbose_name='外伤性疾病')
    boolfield_shu_xue_liang = models.IntegerField(null=True, blank=True, verbose_name='输血量')
    boolfield_shu_xue_ri_qi = models.DateField(null=True, blank=True, verbose_name='输血日期')
    boolfield_xing_ge_qing_xiang = models.ForeignKey(Character, related_name='character_for_boolfield_xing_ge_qing_xiang_A6299', on_delete=models.CASCADE, null=True, blank=True, verbose_name='性格倾向')
    boolfield_shi_mian_qing_kuang = models.ForeignKey(Shi_mian_qing_kuang, related_name='shi_mian_qing_kuang_for_boolfield_shi_mian_qing_kuang_A6299', on_delete=models.CASCADE, null=True, blank=True, verbose_name='失眠情况')
    boolfield_sheng_huo_gong_zuo_ya_li_qing_kuang = models.ForeignKey(Ya_li_qing_kuang, related_name='ya_li_qing_kuang_for_boolfield_sheng_huo_gong_zuo_ya_li_qing_kuang_A6299', on_delete=models.CASCADE, null=True, blank=True, verbose_name='生活工作压力情况')
    boolfield_mei_tian_gong_zuo_ji_gong_zuo_wang_fan_zong_shi_chang = models.TextField(max_length=255, null=True, blank=True, verbose_name='每天工作及工作往返总时长')
    boolfield_dui_mu_qian_sheng_huo_he_gong_zuo_man_yi_ma = models.ForeignKey(Satisfaction, related_name='satisfaction_for_boolfield_dui_mu_qian_sheng_huo_he_gong_zuo_man_yi_ma_A6299', on_delete=models.CASCADE, null=True, blank=True, verbose_name='对目前生活和工作满意吗')
    boolfield_dui_zi_ji_de_shi_ying_neng_li_man_yi_ma = models.ForeignKey(Satisfaction, related_name='satisfaction_for_boolfield_dui_zi_ji_de_shi_ying_neng_li_man_yi_ma_A6299', on_delete=models.CASCADE, null=True, blank=True, verbose_name='对自己的适应能力满意吗')
    boolfield_jue_de_zi_shen_jian_kang_zhuang_kuang_ru_he = models.ForeignKey(State_degree, related_name='state_degree_for_boolfield_jue_de_zi_shen_jian_kang_zhuang_kuang_ru_he_A6299', on_delete=models.CASCADE, null=True, blank=True, verbose_name='觉得自身健康状况如何')
    boolfield_jiao_zhi_guo_qu_yi_nian_zhuang_tai_ru_he = models.ForeignKey(Comparative_expression, related_name='comparative_expression_for_boolfield_jiao_zhi_guo_qu_yi_nian_zhuang_tai_ru_he_A6299', on_delete=models.CASCADE, null=True, blank=True, verbose_name='较之过去一年状态如何')
    boolfield_yun_dong_pian_hao = models.ForeignKey(Sports_preference, related_name='sports_preference_for_boolfield_yun_dong_pian_hao_A6299', on_delete=models.CASCADE, null=True, blank=True, verbose_name='运动偏好')
    boolfield_yun_dong_shi_chang = models.ForeignKey(Exercise_time, related_name='exercise_time_for_boolfield_yun_dong_shi_chang_A6299', on_delete=models.CASCADE, null=True, blank=True, verbose_name='运动时长')
    boolfield_jin_lai_you_wu_shen_ti_bu_shi_zheng_zhuang = models.ManyToManyField(Icpc3_symptoms_and_problems, related_name='icpc3_symptoms_and_problems_for_boolfield_jin_lai_you_wu_shen_ti_bu_shi_zheng_zhuang_A6299', blank=True, verbose_name='近来有无身体不适症状')
    boolfield_ping_jun_shui_mian_shi_chang = models.CharField(max_length=255, null=True, blank=True, verbose_name='平均睡眠时长')
    boolfield_chi_xu_shi_mian_shi_jian = models.CharField(max_length=255, null=True, blank=True, verbose_name='持续失眠时间')
    boolfield_yin_jiu_pin_ci = models.ForeignKey(Frequency, related_name='frequency_for_boolfield_yin_jiu_pin_ci_A6299', on_delete=models.CASCADE, null=True, blank=True, verbose_name='饮酒频次')
    boolfield_xi_yan_pin_ci = models.ForeignKey(Frequency, related_name='frequency_for_boolfield_xi_yan_pin_ci_A6299', on_delete=models.CASCADE, null=True, blank=True, verbose_name='吸烟频次')
    boolfield_nin_dui_ju_zhu_huan_jing_man_yi_ma = models.ForeignKey(Satisfaction, related_name='satisfaction_for_boolfield_nin_dui_ju_zhu_huan_jing_man_yi_ma_A6299', on_delete=models.CASCADE, null=True, blank=True, verbose_name='您对居住环境满意吗')
    boolfield_nin_suo_zai_de_she_qu_jiao_tong_fang_bian_ma = models.ForeignKey(Convenience, related_name='convenience_for_boolfield_nin_suo_zai_de_she_qu_jiao_tong_fang_bian_ma_A6299', on_delete=models.CASCADE, null=True, blank=True, verbose_name='您所在的社区交通方便吗')

    class Meta:
        verbose_name = '居民健康信息调查'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
class A6220(HsscFormModel):
    boolfield_kong_fu_xue_tang_ping_jun_zhi = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True, verbose_name='空腹血糖平均值')
    boolfield_can_hou_2_xiao_shi_xue_tang_ping_jun_zhi = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True, verbose_name='餐后2小时血糖平均值')
    boolfield_tang_niao_bing_kong_zhi_xiao_guo_ping_gu = models.ForeignKey(Tang_niao_bing_kong_zhi_xiao_guo_ping_gu, related_name='tang_niao_bing_kong_zhi_xiao_guo_ping_gu_for_boolfield_tang_niao_bing_kong_zhi_xiao_guo_ping_gu_A6220', on_delete=models.CASCADE, null=True, blank=False, verbose_name='糖尿病控制效果评估')
    boolfield_xue_ya_jian_ce_ping_gu = models.ForeignKey(Sui_fang_ping_gu, related_name='sui_fang_ping_gu_for_boolfield_xue_ya_jian_ce_ping_gu_A6220', on_delete=models.CASCADE, null=True, blank=True, verbose_name='血压监测评估')

    class Meta:
        verbose_name = '糖尿病监测评估'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
class A6202(HsscFormModel):
    boolfield_bing_qing_bu_chong_miao_shu = models.CharField(max_length=255, null=True, blank=True, verbose_name='病情补充描述')
    boolfield_zheng_zhuang = models.ManyToManyField(Icpc3_symptoms_and_problems, related_name='icpc3_symptoms_and_problems_for_boolfield_zheng_zhuang_A6202', blank=True, verbose_name='症状')

    class Meta:
        verbose_name = '院外辅助问诊'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
class T6301(HsscFormModel):
    boolfield_yong_yao_pin_ci = models.CharField(max_length=255, null=True, blank=True, verbose_name='用药频次')
    boolfield_yao_pin_dan_wei = models.ForeignKey(Yao_pin_dan_wei, related_name='yao_pin_dan_wei_for_boolfield_yao_pin_dan_wei_T6301', on_delete=models.CASCADE, null=True, blank=True, verbose_name='药品单位')
    boolfield_yin_jiu_pin_ci = models.ForeignKey(Frequency, related_name='frequency_for_boolfield_yin_jiu_pin_ci_T6301', on_delete=models.CASCADE, null=True, blank=True, verbose_name='饮酒频次')
    boolfield_xi_yan_pin_ci = models.ForeignKey(Frequency, related_name='frequency_for_boolfield_xi_yan_pin_ci_T6301', on_delete=models.CASCADE, null=True, blank=True, verbose_name='吸烟频次')
    boolfield_tang_niao_bing_zheng_zhuang = models.ManyToManyField(Tang_niao_bing_zheng_zhuang, related_name='tang_niao_bing_zheng_zhuang_for_boolfield_tang_niao_bing_zheng_zhuang_T6301', blank=True, verbose_name='糖尿病症状')
    boolfield_yao_pin_ming = models.ManyToManyField(Medicine, related_name='medicine_for_boolfield_yao_pin_ming_T6301', blank=True, verbose_name='药品名')
    boolfield_zuo_jiao = models.ForeignKey(Dorsal_artery_pulsation, related_name='dorsal_artery_pulsation_for_boolfield_zuo_jiao_T6301', on_delete=models.CASCADE, null=True, blank=True, verbose_name='左脚')
    boolfield_you_jiao = models.ForeignKey(Dorsal_artery_pulsation, related_name='dorsal_artery_pulsation_for_boolfield_you_jiao_T6301', on_delete=models.CASCADE, null=True, blank=True, verbose_name='右脚')
    boolfield_yan_di = models.ForeignKey(Normality, related_name='normality_for_boolfield_yan_di_T6301', on_delete=models.CASCADE, null=True, blank=True, verbose_name='眼底')
    boolfield_shou_suo_ya = models.IntegerField(null=True, blank=True, verbose_name='收缩压')
    boolfield_shu_zhang_ya = models.IntegerField(null=True, blank=True, verbose_name='舒张压')
    boolfield_kong_fu_xue_tang = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True, verbose_name='空腹血糖')

    class Meta:
        verbose_name = '糖尿病一般随访'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
class T8901(HsscFormModel):
    boolfield_ji_bing_ming_cheng = models.ForeignKey(Icpc5_evaluation_and_diagnoses, related_name='icpc5_evaluation_and_diagnoses_for_boolfield_ji_bing_ming_cheng_T8901', on_delete=models.CASCADE, null=True, blank=True, verbose_name='疾病名称')
    boolfield_ke_neng_zhen_duan = models.ManyToManyField(Icpc5_evaluation_and_diagnoses, related_name='icpc5_evaluation_and_diagnoses_for_boolfield_ke_neng_zhen_duan_T8901', blank=True, verbose_name='可能诊断')
    boolfield_pai_chu_zhen_duan = models.ManyToManyField(Icpc5_evaluation_and_diagnoses, related_name='icpc5_evaluation_and_diagnoses_for_boolfield_pai_chu_zhen_duan_T8901', blank=True, verbose_name='排除诊断')

    class Meta:
        verbose_name = '胰岛素依赖性糖尿病'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
class A6218(HsscFormModel):
    boolfield_bing_qing_bu_chong_miao_shu = models.CharField(max_length=255, null=True, blank=True, verbose_name='病情补充描述')
    boolfield_zheng_zhuang = models.ManyToManyField(Icpc3_symptoms_and_problems, related_name='icpc3_symptoms_and_problems_for_boolfield_zheng_zhuang_A6218', blank=True, verbose_name='症状')

    class Meta:
        verbose_name = '门诊医生问诊'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
class A6201(HsscFormModel):
    boolfield_bing_qing_bu_chong_miao_shu = models.CharField(max_length=255, null=True, blank=True, verbose_name='病情补充描述')
    boolfield_zheng_zhuang = models.ManyToManyField(Icpc3_symptoms_and_problems, related_name='icpc3_symptoms_and_problems_for_boolfield_zheng_zhuang_A6201', blank=True, verbose_name='症状')
    boolfield_chang_yong_zheng_zhuang = models.ManyToManyField(Chang_yong_zheng_zhuang, related_name='chang_yong_zheng_zhuang_for_boolfield_chang_yong_zheng_zhuang_A6201', blank=True, verbose_name='常用症状')

    class Meta:
        verbose_name = '院外咨询'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
class A6217(HsscFormModel):
    boolfield_bing_qing_bu_chong_miao_shu = models.CharField(max_length=255, null=True, blank=True, verbose_name='病情补充描述')
    boolfield_zheng_zhuang = models.ManyToManyField(Icpc3_symptoms_and_problems, related_name='icpc3_symptoms_and_problems_for_boolfield_zheng_zhuang_A6217', blank=True, verbose_name='症状')

    class Meta:
        verbose_name = '院内辅助问诊'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
class Tang_niao_bing_zi_wo_jian_ce(HsscFormModel):
    boolfield_kong_fu_xue_tang = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True, verbose_name='空腹血糖')

    class Meta:
        verbose_name = '糖尿病自我监测'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
class Yao_shi_fu_wu(HsscFormModel):
    boolfield_ji_bing_ming_cheng = models.ForeignKey(Icpc5_evaluation_and_diagnoses, related_name='icpc5_evaluation_and_diagnoses_for_boolfield_ji_bing_ming_cheng_yao_shi_fu_wu', on_delete=models.CASCADE, null=True, blank=True, verbose_name='疾病名称')
    boolfield_shi_fou_ji_xu_shi_yong = models.ForeignKey(Ji_xu_shi_yong_qing_kuang, related_name='ji_xu_shi_yong_qing_kuang_for_boolfield_shi_fou_ji_xu_shi_yong_yao_shi_fu_wu', on_delete=models.CASCADE, null=True, blank=True, verbose_name='是否继续使用')
    boolfield_yao_pin_ming = models.ManyToManyField(Medicine, related_name='medicine_for_boolfield_yao_pin_ming_yao_shi_fu_wu', blank=True, verbose_name='药品名')

    class Meta:
        verbose_name = '用药提醒服务'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
class Tang_niao_bing_zhuan_yong_wen_zhen(HsscFormModel):
    boolfield_bing_qing_bu_chong_miao_shu = models.CharField(max_length=255, null=True, blank=True, verbose_name='病情补充描述')
    boolfield_zheng_zhuang = models.ManyToManyField(Icpc3_symptoms_and_problems, related_name='icpc3_symptoms_and_problems_for_boolfield_zheng_zhuang_tang_niao_bing_zhuan_yong_wen_zhen', blank=True, verbose_name='症状')
    boolfield_tang_niao_bing_zheng_zhuang = models.ManyToManyField(Tang_niao_bing_zheng_zhuang, related_name='tang_niao_bing_zheng_zhuang_for_boolfield_tang_niao_bing_zheng_zhuang_tang_niao_bing_zhuan_yong_wen_zhen', blank=True, verbose_name='糖尿病症状')

    class Meta:
        verbose_name = '糖尿病专用问诊'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
class A3101(HsscFormModel):
    boolfield_ti_wen = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=False, verbose_name='体温')
    boolfield_mai_bo = models.IntegerField(null=True, blank=True, verbose_name='脉搏')
    boolfield_hu_xi_pin_lv = models.IntegerField(null=True, blank=True, verbose_name='呼吸频率')
    boolfield_shen_gao = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True, verbose_name='身高')
    boolfield_ti_zhong = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True, verbose_name='体重')
    boolfield_ti_zhi_zhi_shu = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True, verbose_name='体质指数')
    boolfield_shou_suo_ya = models.IntegerField(null=True, blank=True, verbose_name='收缩压')
    boolfield_shu_zhang_ya = models.IntegerField(null=True, blank=True, verbose_name='舒张压')
    boolfield_yao_wei = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True, verbose_name='腰围')
    boolfield_yan_bu = models.ForeignKey(Pharynx, related_name='pharynx_for_boolfield_yan_bu_A3101', on_delete=models.CASCADE, null=True, blank=True, verbose_name='咽部')
    boolfield_xia_zhi_shui_zhong = models.ForeignKey(Edema, related_name='edema_for_boolfield_xia_zhi_shui_zhong_A3101', on_delete=models.CASCADE, null=True, blank=True, verbose_name='下肢水肿')

    class Meta:
        verbose_name = '诊前检查'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
class A6502(HsscFormModel):
    boolfield_yu_yue_shi_jian = models.DateTimeField(null=True, blank=True, verbose_name='预约时间')
    boolfield_qian_dao_que_ren = models.ForeignKey(Qian_dao_que_ren, related_name='qian_dao_que_ren_for_boolfield_qian_dao_que_ren_A6502', on_delete=models.CASCADE, null=True, blank=True, verbose_name='签到确认')
    boolfield_ze_ren_ren = models.ForeignKey(Staff, related_name='staff_for_boolfield_ze_ren_ren_A6502', on_delete=models.CASCADE, null=True, blank=True, verbose_name='责任人')

    class Meta:
        verbose_name = '门诊分诊'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
class A6501(HsscFormModel):
    boolfield_yu_yue_shi_jian = models.DateTimeField(null=True, blank=True, verbose_name='预约时间')
    boolfield_ze_ren_ren = models.ForeignKey(Staff, related_name='staff_for_boolfield_ze_ren_ren_A6501', on_delete=models.CASCADE, null=True, blank=True, verbose_name='责任人')

    class Meta:
        verbose_name = '代人预约挂号'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        
class Men_zhen_chu_fang_biao(HsscFormModel):
    boolfield_yong_yao_pin_ci = models.CharField(max_length=255, null=True, blank=True, verbose_name='用药频次')
    boolfield_chang_yong_chu_fang_liang = models.CharField(max_length=255, null=True, blank=True, verbose_name='常用处方量')
    boolfield_yong_yao_liao_cheng = models.CharField(max_length=255, null=True, blank=True, verbose_name='用药疗程')
    boolfield_yong_yao_tu_jing = models.ForeignKey(Yong_yao_tu_jing, related_name='yong_yao_tu_jing_for_boolfield_yong_yao_tu_jing_men_zhen_chu_fang_biao', on_delete=models.CASCADE, null=True, blank=True, verbose_name='用药途径')
    boolfield_yao_pin_ming = models.ManyToManyField(Medicine, related_name='medicine_for_boolfield_yao_pin_ming_men_zhen_chu_fang_biao', blank=True, verbose_name='药品名')

    class Meta:
        verbose_name = '药物干预'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.customer.name

        

********************************************************************************
File: service/serializers.py
********************************************************************************

from rest_framework import serializers
from .models import *
class Xue_ya_jian_ce_ping_guSerializer(serializers.ModelSerializer):
    class Meta:
        model = Xue_ya_jian_ce_ping_gu
        fields = '__all__'
class Can_hou_2_xiao_shi_xue_tangSerializer(serializers.ModelSerializer):
    class Meta:
        model = Can_hou_2_xiao_shi_xue_tang
        fields = '__all__'
class Ji_gou_ji_ben_xin_xi_biaoSerializer(serializers.ModelSerializer):
    class Meta:
        model = Ji_gou_ji_ben_xin_xi_biao
        fields = '__all__'
class Zhi_yuan_ji_ben_xin_xi_biaoSerializer(serializers.ModelSerializer):
    class Meta:
        model = Zhi_yuan_ji_ben_xin_xi_biao
        fields = '__all__'
class Fu_wu_fen_gong_ji_gou_ji_ben_xin_xi_diao_chaSerializer(serializers.ModelSerializer):
    class Meta:
        model = Fu_wu_fen_gong_ji_gou_ji_ben_xin_xi_diao_cha
        fields = '__all__'
class She_bei_ji_ben_xin_xi_ji_luSerializer(serializers.ModelSerializer):
    class Meta:
        model = She_bei_ji_ben_xin_xi_ji_lu
        fields = '__all__'
class Gong_ying_shang_ji_ben_xin_xi_diao_chaSerializer(serializers.ModelSerializer):
    class Meta:
        model = Gong_ying_shang_ji_ben_xin_xi_diao_cha
        fields = '__all__'
class Yao_pin_ji_ben_xin_xi_biaoSerializer(serializers.ModelSerializer):
    class Meta:
        model = Yao_pin_ji_ben_xin_xi_biao
        fields = '__all__'
class Shen_qing_kong_fu_xue_tang_jian_cha_fu_wuSerializer(serializers.ModelSerializer):
    class Meta:
        model = Shen_qing_kong_fu_xue_tang_jian_cha_fu_wu
        fields = '__all__'
class Ju_min_ji_ben_xin_xi_diao_chaSerializer(serializers.ModelSerializer):
    class Meta:
        model = Ju_min_ji_ben_xin_xi_diao_cha
        fields = '__all__'
class Shu_ye_zhu_sheSerializer(serializers.ModelSerializer):
    class Meta:
        model = Shu_ye_zhu_she
        fields = '__all__'
class Qian_yue_fu_wuSerializer(serializers.ModelSerializer):
    class Meta:
        model = Qian_yue_fu_wu
        fields = '__all__'
class T9001Serializer(serializers.ModelSerializer):
    class Meta:
        model = T9001
        fields = '__all__'
class Tang_hua_xue_hong_dan_bai_jian_cha_biaoSerializer(serializers.ModelSerializer):
    class Meta:
        model = Tang_hua_xue_hong_dan_bai_jian_cha_biao
        fields = '__all__'
class Kong_fu_xue_tang_jian_chaSerializer(serializers.ModelSerializer):
    class Meta:
        model = Kong_fu_xue_tang_jian_cha
        fields = '__all__'
class Xue_ya_jian_ceSerializer(serializers.ModelSerializer):
    class Meta:
        model = Xue_ya_jian_ce
        fields = '__all__'
class Tang_niao_bing_cha_tiSerializer(serializers.ModelSerializer):
    class Meta:
        model = Tang_niao_bing_cha_ti
        fields = '__all__'
class A3502Serializer(serializers.ModelSerializer):
    class Meta:
        model = A3502
        fields = '__all__'
class A6299Serializer(serializers.ModelSerializer):
    class Meta:
        model = A6299
        fields = '__all__'
class A6220Serializer(serializers.ModelSerializer):
    class Meta:
        model = A6220
        fields = '__all__'
class A6202Serializer(serializers.ModelSerializer):
    class Meta:
        model = A6202
        fields = '__all__'
class T6301Serializer(serializers.ModelSerializer):
    class Meta:
        model = T6301
        fields = '__all__'
class T8901Serializer(serializers.ModelSerializer):
    class Meta:
        model = T8901
        fields = '__all__'
class A6218Serializer(serializers.ModelSerializer):
    class Meta:
        model = A6218
        fields = '__all__'
class A6201Serializer(serializers.ModelSerializer):
    class Meta:
        model = A6201
        fields = '__all__'
class A6217Serializer(serializers.ModelSerializer):
    class Meta:
        model = A6217
        fields = '__all__'
class Tang_niao_bing_zi_wo_jian_ceSerializer(serializers.ModelSerializer):
    class Meta:
        model = Tang_niao_bing_zi_wo_jian_ce
        fields = '__all__'
class Yao_shi_fu_wuSerializer(serializers.ModelSerializer):
    class Meta:
        model = Yao_shi_fu_wu
        fields = '__all__'
class Tang_niao_bing_zhuan_yong_wen_zhenSerializer(serializers.ModelSerializer):
    class Meta:
        model = Tang_niao_bing_zhuan_yong_wen_zhen
        fields = '__all__'
class A3101Serializer(serializers.ModelSerializer):
    class Meta:
        model = A3101
        fields = '__all__'
class A6502Serializer(serializers.ModelSerializer):
    class Meta:
        model = A6502
        fields = '__all__'
class A6501Serializer(serializers.ModelSerializer):
    class Meta:
        model = A6501
        fields = '__all__'
class Men_zhen_chu_fang_biaoSerializer(serializers.ModelSerializer):
    class Meta:
        model = Men_zhen_chu_fang_biao
        fields = '__all__'

********************************************************************************
File: service/__init__.py
********************************************************************************


********************************************************************************
File: service/apps.py
********************************************************************************

from django.apps import AppConfig


class ServiceConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'service'

********************************************************************************
File: service/forms.py
********************************************************************************

from django.forms import ModelForm


from service.models import Ji_gou_ji_ben_xin_xi_biao
class Ji_gou_ji_ben_xin_xi_biao_HeaderForm(ModelForm):
    class Meta:
        model = Ji_gou_ji_ben_xin_xi_biao
        fields = []
        
from service.models import Zhi_yuan_ji_ben_xin_xi_biao
class Zhi_yuan_ji_ben_xin_xi_biao_HeaderForm(ModelForm):
    class Meta:
        model = Zhi_yuan_ji_ben_xin_xi_biao
        fields = []
        
from service.models import She_bei_ji_ben_xin_xi_ji_lu
class She_bei_ji_ben_xin_xi_ji_lu_HeaderForm(ModelForm):
    class Meta:
        model = She_bei_ji_ben_xin_xi_ji_lu
        fields = []
        
from service.models import Gong_ying_shang_ji_ben_xin_xi_diao_cha
class Gong_ying_shang_ji_ben_xin_xi_diao_cha_HeaderForm(ModelForm):
    class Meta:
        model = Gong_ying_shang_ji_ben_xin_xi_diao_cha
        fields = []
        
from service.models import Yao_pin_ji_ben_xin_xi_biao
class Yao_pin_ji_ben_xin_xi_biao_HeaderForm(ModelForm):
    class Meta:
        model = Yao_pin_ji_ben_xin_xi_biao
        fields = []
        
from service.models import Ju_min_ji_ben_xin_xi_diao_cha
class Ju_min_ji_ben_xin_xi_diao_cha_HeaderForm(ModelForm):
    class Meta:
        model = Ju_min_ji_ben_xin_xi_diao_cha
        fields = ['boolfield_xing_ming', 'boolfield_chu_sheng_ri_qi', 'boolfield_xing_bie', 'boolfield_jia_ting_di_zhi', 'boolfield_lian_xi_dian_hua']
        
********************************************************************************
File: service/admin.py
********************************************************************************

from django.contrib import admin
from django.shortcuts import redirect

from core.admin import clinic_site
from core.signals import operand_finished
from core.business_functions import create_customer_service_log
from service.models import *


class HsscFormAdmin(admin.ModelAdmin):
    list_fields = ['name', 'id']
    exclude = ["hssc_id", "label", "name", "customer", "operator", "creater", "pid", "cpid", "slug", "created_time", "updated_time", "pym"]
    view_on_site = False

    def change_view(self, request, object_id, form_url='', extra_context=None):
        extra_context = extra_context or {}
        # base_form = 'base_form'
        # extra_context['base_form'] = base_form
        return super().change_view(
            request, object_id, form_url, extra_context=extra_context,
        )

    def save_model(self, request, obj, form, change):
        super().save_model(request, obj, form, change)

        # 把服务进程状态修改为已完成
        proc = obj.pid
        if proc:
            proc.update_state('RTC')

        import copy
        form_data1 = copy.copy(form.cleaned_data)
        form_data2 = copy.copy(form.cleaned_data)

        # 把表单内容存入CustomerServiceLog
        create_customer_service_log(form_data1, obj)

        # 发送服务作业完成信号
        print('发送操作完成信号, From service.admin.HsscFormAdmin.save_model：', obj.pid)
        operand_finished.send(sender=self, pid=obj.pid, request=request, form_data=form_data2)

    def render_change_form(self, request, context, add=False, change=False, form_url='', obj=None):
        context.update({
            'show_save': True,
            'show_save_and_continue': False,
            'show_save_and_add_another': False,
            'show_delete': False
        })
        return super().render_change_form(request, context, add, change, form_url, obj)

    def response_change(self, request, obj):
        # 如果是创建服务包计划，保存后跳转到修改服务计划列表的页面
        if obj.__class__.__name__ == 'CustomerSchedulePackage':
            schedule_list = CustomerScheduleList.objects.get(schedule_package=obj)
            print('Change CustomerSchedulePackage', obj, 'to', schedule_list)
            return redirect(f'/clinic/service/customerschedulelist/{schedule_list.id}/change/')

        # 按照service.route_to的配置跳转
        if obj.pid.service.route_to == 'CUSTOMER_HOMEPAGE':
            return redirect(obj.customer)
        else:
            return redirect('index')


class CustomerScheduleAdmin(HsscFormAdmin):
    exclude = ["hssc_id", "label", "name", "operator", "creater", "pid", "cpid", "slug", "created_time", "updated_time", "pym", 'customer_schedule_list', 'schedule_package', ]
    autocomplete_fields = ["scheduled_operator", ]
    list_display = ['service', 'scheduled_time', 'scheduled_operator', 'overtime', 'is_assigned']
    list_editable = ['scheduled_time', 'scheduled_operator', 'overtime', 'is_assigned']
    readonly_fields = ['customer', 'service']
    ordering = ('scheduled_time',)

clinic_site.register(CustomerSchedule, CustomerScheduleAdmin)
admin.site.register(CustomerSchedule, CustomerScheduleAdmin)

class CustomerScheduleInline(admin.TabularInline):
    model = CustomerSchedule
    extra = 0
    can_delete = False
    exclude = ["hssc_id", "label", "name", "operator", "creater", "pid", "cpid", "slug", 'customer', 'schedule_package', 'is_assigned']
    autocomplete_fields = ["scheduled_operator", ]


class CustomerScheduleListAdmin(admin.ModelAdmin):
    exclude = ["hssc_id", "label", "name", "operator", "creater", "pid", "cpid", "slug", "created_time", "updated_time", "pym"]
    fieldsets = ((None, {'fields': (('customer', 'plan_serial_number', ), )}),)
    readonly_fields = ['customer', 'plan_serial_number', ]
    inlines = [CustomerScheduleInline, ]

    def render_change_form(self, request, context, add=False, change=False, form_url='', obj=None):
        context.update({
            'show_save': True,
            'show_save_and_continue': False,
            'show_save_and_add_another': False,
            'show_delete': False
        })
        return super().render_change_form(request, context, add, change, form_url, obj)

    def response_change(self, request, obj):
        return redirect(obj.customer)

clinic_site.register(CustomerScheduleList, CustomerScheduleListAdmin)
admin.site.register(CustomerScheduleList, CustomerScheduleListAdmin)


class CustomerScheduleDraftAdmin(admin.ModelAdmin):
    autocomplete_fields = ["scheduled_operator", ]
clinic_site.register(CustomerScheduleDraft, CustomerScheduleDraftAdmin)
admin.site.register(CustomerScheduleDraft, CustomerScheduleDraftAdmin)

class CustomerScheduleDraftInline(admin.TabularInline):
    model = CustomerScheduleDraft
    extra = 0
    can_delete = False
    # verbose_name_plural = '服务项目安排'
    exclude = ["hssc_id", "label", "name", ]
    autocomplete_fields = ["scheduled_operator", ]

    def get_queryset(self, request):
        # 重写get_queryset方法，设置缺省overtime为服务的overtime
        qs = super().get_queryset(request)
        for item in qs:
            item.overtime = item.service.overtime
            item.save()
        return qs

class CustomerSchedulePackageAdmin(HsscFormAdmin):
    exclude = ["hssc_id", "label", "name", "operator", "creater", "pid", "cpid", "slug", "created_time", "updated_time", "pym"]
    fieldsets = ((None, {'fields': (('customer', 'servicepackage'), )}),)
    readonly_fields = ['customer', 'servicepackage']
    inlines = [CustomerScheduleDraftInline, ]

    def save_formset(self, request, form, formset, change):
        instances = formset.save()
        instances = formset.queryset

        if instances:
            schedule_package = instances[0].schedule_package

            # 生成CustomerScheduleList记录
            schedule_list = CustomerScheduleList.objects.create(
                customer = schedule_package.customer,
                operator = schedule_package.operator,
                creater = schedule_package.creater,
                plan_serial_number = schedule_package.servicepackage.label + '--' + schedule_package.created_time.strftime('%Y-%m-%d') + '--' + schedule_package.operator.name,
                schedule_package = schedule_package,
            )

            from core.business_functions import get_services_schedule
            schedule = get_services_schedule(instances)
            # 创建客户服务日程
            for item in schedule:
                CustomerSchedule.objects.create(
                    customer_schedule_list = schedule_list,
                    customer=schedule_package.customer,
                    operator=schedule_package.operator,
                    creater=schedule_package.creater,
                    schedule_package=schedule_package,
                    service=item['service'],
                    scheduled_time=item['scheduled_time'],
                    scheduled_operator=item['scheduled_operator'],
                    overtime=item['overtime'],
                    pid=schedule_package.pid
                )

            # 更新服务进程entry为'customerschedulelist/id/change/'
            schedule_list.schedule_package.pid.entry = f'/clinic/service/customerschedulelist/{schedule_list.id}/change'
            schedule_list.schedule_package.pid.save()

clinic_site.register(CustomerSchedulePackage, CustomerSchedulePackageAdmin)
admin.site.register(CustomerSchedulePackage, CustomerSchedulePackageAdmin)

# **********************************************************************************************************************
# Service表单Admin
# **********************************************************************************************************************

class Xue_ya_jian_ce_ping_guAdmin(HsscFormAdmin):
    fieldssets = [
        ("基本信息", {"fields": ((),)}), 
        ("血压监测评估", {"fields": ("boolfield_xue_ya_jian_ce_ping_gu", )}), ]

admin.site.register(Xue_ya_jian_ce_ping_gu, Xue_ya_jian_ce_ping_guAdmin)
clinic_site.register(Xue_ya_jian_ce_ping_gu, Xue_ya_jian_ce_ping_guAdmin)

class Can_hou_2_xiao_shi_xue_tangAdmin(HsscFormAdmin):
    fieldssets = [
        ("基本信息", {"fields": ((),)}), 
        ("餐后2小时血糖", {"fields": ("boolfield_can_hou_2_xiao_shi_xue_tang", )}), ]

admin.site.register(Can_hou_2_xiao_shi_xue_tang, Can_hou_2_xiao_shi_xue_tangAdmin)
clinic_site.register(Can_hou_2_xiao_shi_xue_tang, Can_hou_2_xiao_shi_xue_tangAdmin)

class Ji_gou_ji_ben_xin_xi_biaoAdmin(HsscFormAdmin):
    fieldssets = [
        ("机构基本信息表", {"fields": ("boolfield_lian_xi_di_zhi", "boolfield_ji_gou_bian_ma", "boolfield_ji_gou_ming_cheng", "boolfield_ji_gou_dai_ma", "boolfield_ji_gou_shu_xing", "boolfield_ji_gou_ceng_ji", "boolfield_suo_zai_hang_zheng_qu_hua_dai_ma", "boolfield_xing_zheng_qu_hua_gui_shu", "boolfield_fa_ding_fu_ze_ren", "boolfield_lian_xi_dian_hua", )}), ]
    search_fields = ["name", "pym", ]

admin.site.register(Ji_gou_ji_ben_xin_xi_biao, Ji_gou_ji_ben_xin_xi_biaoAdmin)
clinic_site.register(Ji_gou_ji_ben_xin_xi_biao, Ji_gou_ji_ben_xin_xi_biaoAdmin)

class Zhi_yuan_ji_ben_xin_xi_biaoAdmin(HsscFormAdmin):
    fieldssets = [
        ("职员基本信息表", {"fields": ("boolfield_shen_fen_zheng_hao_ma", "boolfield_zhi_ye_zi_zhi", "boolfield_zhuan_chang", "boolfield_zhi_ye_shi_jian", "boolfield_zhi_yuan_bian_ma", "boolfield_lian_xi_dian_hua", "boolfield_xing_ming", "boolfield_suo_shu_ji_gou", "boolfield_fu_wu_jue_se", )}), ]
    autocomplete_fields = ["boolfield_suo_shu_ji_gou", ]
    search_fields = ["name", "pym", ]

admin.site.register(Zhi_yuan_ji_ben_xin_xi_biao, Zhi_yuan_ji_ben_xin_xi_biaoAdmin)
clinic_site.register(Zhi_yuan_ji_ben_xin_xi_biao, Zhi_yuan_ji_ben_xin_xi_biaoAdmin)

class Fu_wu_fen_gong_ji_gou_ji_ben_xin_xi_diao_chaAdmin(HsscFormAdmin):
    fieldssets = [
        ("基本信息", {"fields": ((),)}), 
        ("服务分供机构基本信息表", {"fields": ("boolfield_lian_xi_di_zhi", "boolfield_ji_gou_dai_ma", "boolfield_ji_gou_shu_xing", "boolfield_gong_ying_shang_bian_ma", "boolfield_zhuan_ye_fu_wu", "boolfield_gong_ying_shang_ming_cheng", "boolfield_lian_xi_dian_hua", "boolfield_xin_yu_ping_ji", )}), ]

admin.site.register(Fu_wu_fen_gong_ji_gou_ji_ben_xin_xi_diao_cha, Fu_wu_fen_gong_ji_gou_ji_ben_xin_xi_diao_chaAdmin)
clinic_site.register(Fu_wu_fen_gong_ji_gou_ji_ben_xin_xi_diao_cha, Fu_wu_fen_gong_ji_gou_ji_ben_xin_xi_diao_chaAdmin)

class She_bei_ji_ben_xin_xi_ji_luAdmin(HsscFormAdmin):
    fieldssets = [
        ("设备基本信息表", {"fields": ("boolfield_she_bei_bian_ma", "boolfield_sheng_chan_chang_jia", "boolfield_she_bei_fu_wu_dan_wei_hao_shi", "boolfield_she_bei_jian_xiu_zhou_qi", "boolfield_she_bei_shi_yong_cheng_ben", "boolfield_she_bei_ming_cheng", "boolfield_lian_xi_dian_hua", "boolfield_she_bei_shi_yong_fu_wu_gong_neng", )}), ]
    autocomplete_fields = ["boolfield_she_bei_shi_yong_fu_wu_gong_neng", ]
    search_fields = ["name", "pym", ]

admin.site.register(She_bei_ji_ben_xin_xi_ji_lu, She_bei_ji_ben_xin_xi_ji_luAdmin)
clinic_site.register(She_bei_ji_ben_xin_xi_ji_lu, She_bei_ji_ben_xin_xi_ji_luAdmin)

class Gong_ying_shang_ji_ben_xin_xi_diao_chaAdmin(HsscFormAdmin):
    fieldssets = [
        ("物料供应商基本信息表", {"fields": ("boolfield_lian_xi_di_zhi", "boolfield_gong_ying_shang_bian_ma", "boolfield_zhu_yao_gong_ying_chan_pin", "boolfield_gong_huo_zhou_qi", "boolfield_gong_ying_shang_ming_cheng", "boolfield_lian_xi_dian_hua", "boolfield_xin_yu_ping_ji", )}), ]
    search_fields = ["name", "pym", ]

admin.site.register(Gong_ying_shang_ji_ben_xin_xi_diao_cha, Gong_ying_shang_ji_ben_xin_xi_diao_chaAdmin)
clinic_site.register(Gong_ying_shang_ji_ben_xin_xi_diao_cha, Gong_ying_shang_ji_ben_xin_xi_diao_chaAdmin)

class Yao_pin_ji_ben_xin_xi_biaoAdmin(HsscFormAdmin):
    fieldssets = [
        ("药品基本信息表", {"fields": ("boolfield_yao_pin_tong_yong_ming", "boolfield_yao_pin_ming_cheng", "boolfield_yong_yao_pin_ci", "boolfield_yao_pin_bian_ma", "boolfield_yao_pin_gui_ge", "boolfield_chang_yong_chu_fang_liang", "boolfield_dui_zhao_yi_bao_ming_cheng", "boolfield_dui_zhao_ji_yao_ming_cheng", "boolfield_huan_suan_gui_ze", "boolfield_yong_yao_liao_cheng", "boolfield_chu_fang_ji_liang_dan_wei", "boolfield_ru_ku_ji_liang_dan_wei", "boolfield_xiao_shou_ji_liang_dan_wei", "boolfield_yong_yao_tu_jing", "boolfield_yao_pin_fen_lei", )}), ]
    search_fields = ["name", "pym", ]

admin.site.register(Yao_pin_ji_ben_xin_xi_biao, Yao_pin_ji_ben_xin_xi_biaoAdmin)
clinic_site.register(Yao_pin_ji_ben_xin_xi_biao, Yao_pin_ji_ben_xin_xi_biaoAdmin)

class Shen_qing_kong_fu_xue_tang_jian_cha_fu_wuAdmin(HsscFormAdmin):
    fieldssets = [
        ("基本信息", {"fields": ((),)}), 
        ("申请服务表", {"fields": ("boolfield_dang_qian_pai_dui_ren_shu", "boolfield_yu_ji_deng_hou_shi_jian", "boolfield_ze_ren_ren", "boolfield_fu_wu_xiang_mu_ming_cheng", "boolfield_an_pai_que_ren", )}), ]
    autocomplete_fields = ["boolfield_ze_ren_ren", "boolfield_fu_wu_xiang_mu_ming_cheng", ]

admin.site.register(Shen_qing_kong_fu_xue_tang_jian_cha_fu_wu, Shen_qing_kong_fu_xue_tang_jian_cha_fu_wuAdmin)
clinic_site.register(Shen_qing_kong_fu_xue_tang_jian_cha_fu_wu, Shen_qing_kong_fu_xue_tang_jian_cha_fu_wuAdmin)

class Ju_min_ji_ben_xin_xi_diao_chaAdmin(HsscFormAdmin):
    fieldssets = [
        ("个人基本信息", {"fields": ("boolfield_xing_ming", "boolfield_chu_sheng_ri_qi", "boolfield_xing_bie", "boolfield_jia_ting_di_zhi", "boolfield_lian_xi_dian_hua", "boolfield_shen_fen_zheng_hao_ma", "boolfield_ju_min_dang_an_hao", "boolfield_yi_liao_ic_ka_hao", "boolfield_min_zu", "boolfield_hun_yin_zhuang_kuang", "boolfield_wen_hua_cheng_du", "boolfield_zhi_ye_zhuang_kuang", "boolfield_yi_liao_fei_yong_fu_dan", "boolfield_ju_zhu_lei_xing", "boolfield_xue_xing", "boolfield_qian_yue_jia_ting_yi_sheng", "boolfield_jia_ting_cheng_yuan_guan_xi", )}), ]
    autocomplete_fields = ["boolfield_qian_yue_jia_ting_yi_sheng", ]
    search_fields = ["name", "pym", ]

admin.site.register(Ju_min_ji_ben_xin_xi_diao_cha, Ju_min_ji_ben_xin_xi_diao_chaAdmin)
clinic_site.register(Ju_min_ji_ben_xin_xi_diao_cha, Ju_min_ji_ben_xin_xi_diao_chaAdmin)

class Shu_ye_zhu_sheAdmin(HsscFormAdmin):
    fieldssets = [
        ("基本信息", {"fields": ((),)}), 
        ("输液注射单", {"fields": ("boolfield_yong_yao_pin_ci", "boolfield_yao_pin_gui_ge", "boolfield_chang_yong_chu_fang_liang", "boolfield_zhi_xing_qian_ming", "boolfield_yong_yao_liao_cheng", "boolfield_zhu_she_ri_qi", "boolfield_yao_pin_ming", )}), ]
    autocomplete_fields = ["boolfield_yao_pin_ming", ]

admin.site.register(Shu_ye_zhu_she, Shu_ye_zhu_sheAdmin)
clinic_site.register(Shu_ye_zhu_she, Shu_ye_zhu_sheAdmin)

class Qian_yue_fu_wuAdmin(HsscFormAdmin):
    fieldssets = [
        ("基本信息", {"fields": ((),)}), 
        ("家庭医生签约", {"fields": ("boolfield_jia_ting_qian_yue_fu_wu_xie_yi", "boolfield_qian_yue_que_ren", "boolfield_ze_ren_ren", )}), ]
    autocomplete_fields = ["boolfield_ze_ren_ren", ]

admin.site.register(Qian_yue_fu_wu, Qian_yue_fu_wuAdmin)
clinic_site.register(Qian_yue_fu_wu, Qian_yue_fu_wuAdmin)

class T9001Admin(HsscFormAdmin):
    fieldssets = [
        ("基本信息", {"fields": ((),)}), 
        ("非胰岛素依赖性糖尿病", {"fields": ("boolfield_ji_bing_ming_cheng", "boolfield_ke_neng_zhen_duan", "boolfield_pai_chu_zhen_duan", )}), ]
    autocomplete_fields = ["boolfield_ji_bing_ming_cheng", "boolfield_ke_neng_zhen_duan", "boolfield_pai_chu_zhen_duan", ]

admin.site.register(T9001, T9001Admin)
clinic_site.register(T9001, T9001Admin)

class Tang_hua_xue_hong_dan_bai_jian_cha_biaoAdmin(HsscFormAdmin):
    fieldssets = [
        ("基本信息", {"fields": ((),)}), 
        ("糖化血红蛋白检查", {"fields": ("boolfield_tang_hua_xue_hong_dan_bai", )}), ]

admin.site.register(Tang_hua_xue_hong_dan_bai_jian_cha_biao, Tang_hua_xue_hong_dan_bai_jian_cha_biaoAdmin)
clinic_site.register(Tang_hua_xue_hong_dan_bai_jian_cha_biao, Tang_hua_xue_hong_dan_bai_jian_cha_biaoAdmin)

class Kong_fu_xue_tang_jian_chaAdmin(HsscFormAdmin):
    fieldssets = [
        ("基本信息", {"fields": ((),)}), 
        ("空腹血糖检查", {"fields": ("boolfield_kong_fu_xue_tang", )}), ]

admin.site.register(Kong_fu_xue_tang_jian_cha, Kong_fu_xue_tang_jian_chaAdmin)
clinic_site.register(Kong_fu_xue_tang_jian_cha, Kong_fu_xue_tang_jian_chaAdmin)

class Xue_ya_jian_ceAdmin(HsscFormAdmin):
    fieldssets = [
        ("基本信息", {"fields": ((),)}), 
        ("血压监测", {"fields": ("boolfield_shou_suo_ya", "boolfield_shu_zhang_ya", )}), ]

admin.site.register(Xue_ya_jian_ce, Xue_ya_jian_ceAdmin)
clinic_site.register(Xue_ya_jian_ce, Xue_ya_jian_ceAdmin)

class Tang_niao_bing_cha_tiAdmin(HsscFormAdmin):
    fieldssets = [
        ("基本信息", {"fields": ((),)}), 
        ("眼底检查", {"fields": ("boolfield_yan_di", )}), 
        ("足背动脉检查", {"fields": ("boolfield_zuo_jiao", "boolfield_you_jiao", )}), ]
    radio_fields = {"boolfield_zuo_jiao": admin.VERTICAL, "boolfield_you_jiao": admin.VERTICAL, }

admin.site.register(Tang_niao_bing_cha_ti, Tang_niao_bing_cha_tiAdmin)
clinic_site.register(Tang_niao_bing_cha_ti, Tang_niao_bing_cha_tiAdmin)

class A3502Admin(HsscFormAdmin):
    fieldssets = [
        ("基本信息", {"fields": ((),)}), 
        ("尿常规检查", {"fields": ("boolfield_niao_tang", "boolfield_dan_bai_zhi", "boolfield_niao_tong_ti", )}), ]

admin.site.register(A3502, A3502Admin)
clinic_site.register(A3502, A3502Admin)

class A6299Admin(HsscFormAdmin):
    fieldssets = [
        ("基本信息", {"fields": ((),)}), 
        ("遗传病史", {"fields": ("boolfield_yi_chuan_xing_ji_bing", "boolfield_yi_chuan_bing_shi_cheng_yuan", )}), 
        ("过敏史", {"fields": ("boolfield_yao_pin_ming", )}), 
        ("家族病史", {"fields": ("boolfield_jia_zu_xing_ji_bing", "boolfield_jia_zu_bing_shi_cheng_yuan", )}), 
        ("手术史", {"fields": ("boolfield_shou_shu_ri_qi", "boolfield_shou_shu_ming_cheng", )}), 
        ("疾病史", {"fields": ("boolfield_que_zhen_shi_jian", "boolfield_ge_ren_bing_shi", )}), 
        ("外伤史", {"fields": ("boolfield_wai_shang_ri_qi", "boolfield_wai_shang_xing_ji_bing", )}), 
        ("输血史", {"fields": ("boolfield_shu_xue_liang", "boolfield_shu_xue_ri_qi", )}), 
        ("个人心理综合素质调查", {"fields": ("boolfield_xing_ge_qing_xiang", "boolfield_shi_mian_qing_kuang", "boolfield_sheng_huo_gong_zuo_ya_li_qing_kuang", )}), 
        ("个人适应能力评估", {"fields": ("boolfield_mei_tian_gong_zuo_ji_gong_zuo_wang_fan_zong_shi_chang", "boolfield_dui_mu_qian_sheng_huo_he_gong_zuo_man_yi_ma", "boolfield_dui_zi_ji_de_shi_ying_neng_li_man_yi_ma", )}), 
        ("个人身体健康评估", {"fields": ("boolfield_jue_de_zi_shen_jian_kang_zhuang_kuang_ru_he", "boolfield_jiao_zhi_guo_qu_yi_nian_zhuang_tai_ru_he", "boolfield_yun_dong_pian_hao", "boolfield_yun_dong_shi_chang", "boolfield_jin_lai_you_wu_shen_ti_bu_shi_zheng_zhuang", )}), 
        ("个人健康行为调查", {"fields": ("boolfield_ping_jun_shui_mian_shi_chang", "boolfield_chi_xu_shi_mian_shi_jian", "boolfield_yin_jiu_pin_ci", "boolfield_xi_yan_pin_ci", )}), 
        ("社会环境评估", {"fields": ("boolfield_nin_dui_ju_zhu_huan_jing_man_yi_ma", "boolfield_nin_suo_zai_de_she_qu_jiao_tong_fang_bian_ma", )}), ]
    autocomplete_fields = ["boolfield_yi_chuan_xing_ji_bing", "boolfield_yao_pin_ming", "boolfield_jia_zu_xing_ji_bing", "boolfield_shou_shu_ming_cheng", "boolfield_ge_ren_bing_shi", "boolfield_wai_shang_xing_ji_bing", "boolfield_jin_lai_you_wu_shen_ti_bu_shi_zheng_zhuang", ]
    radio_fields = {"boolfield_xing_ge_qing_xiang": admin.VERTICAL, "boolfield_shi_mian_qing_kuang": admin.VERTICAL, "boolfield_sheng_huo_gong_zuo_ya_li_qing_kuang": admin.VERTICAL, "boolfield_jue_de_zi_shen_jian_kang_zhuang_kuang_ru_he": admin.VERTICAL, "boolfield_yun_dong_shi_chang": admin.VERTICAL, "boolfield_yin_jiu_pin_ci": admin.VERTICAL, "boolfield_xi_yan_pin_ci": admin.VERTICAL, }

admin.site.register(A6299, A6299Admin)
clinic_site.register(A6299, A6299Admin)

class A6220Admin(HsscFormAdmin):
    fieldssets = [
        ("基本信息", {"fields": ((),)}), 
        ("糖尿病监测评估", {"fields": ("boolfield_kong_fu_xue_tang_ping_jun_zhi", "boolfield_can_hou_2_xiao_shi_xue_tang_ping_jun_zhi", "boolfield_tang_niao_bing_kong_zhi_xiao_guo_ping_gu", "boolfield_xue_ya_jian_ce_ping_gu", )}), ]
    radio_fields = {"boolfield_tang_niao_bing_kong_zhi_xiao_guo_ping_gu": admin.VERTICAL, }

admin.site.register(A6220, A6220Admin)
clinic_site.register(A6220, A6220Admin)

class A6202Admin(HsscFormAdmin):
    fieldssets = [
        ("基本信息", {"fields": ((),)}), 
        ("院外辅助问诊", {"fields": ("boolfield_bing_qing_bu_chong_miao_shu", "boolfield_zheng_zhuang", )}), ]
    autocomplete_fields = ["boolfield_zheng_zhuang", ]

admin.site.register(A6202, A6202Admin)
clinic_site.register(A6202, A6202Admin)

class T6301Admin(HsscFormAdmin):
    fieldssets = [
        ("基本信息", {"fields": ((),)}), 
        ("糖尿病一般随访", {"fields": ("boolfield_yong_yao_pin_ci", "boolfield_yao_pin_dan_wei", "boolfield_yin_jiu_pin_ci", "boolfield_xi_yan_pin_ci", "boolfield_tang_niao_bing_zheng_zhuang", "boolfield_yao_pin_ming", )}), 
        ("足背动脉检查", {"fields": ("boolfield_zuo_jiao", "boolfield_you_jiao", )}), 
        ("眼底检查", {"fields": ("boolfield_yan_di", )}), 
        ("血压监测", {"fields": ("boolfield_shou_suo_ya", "boolfield_shu_zhang_ya", )}), 
        ("空腹血糖检查", {"fields": ("boolfield_kong_fu_xue_tang", )}), ]
    autocomplete_fields = ["boolfield_yao_pin_ming", ]
    radio_fields = {"boolfield_yin_jiu_pin_ci": admin.VERTICAL, "boolfield_xi_yan_pin_ci": admin.VERTICAL, "boolfield_zuo_jiao": admin.VERTICAL, "boolfield_you_jiao": admin.VERTICAL, }

admin.site.register(T6301, T6301Admin)
clinic_site.register(T6301, T6301Admin)

class T8901Admin(HsscFormAdmin):
    fieldssets = [
        ("基本信息", {"fields": ((),)}), 
        ("非胰岛素依赖性糖尿病", {"fields": ("boolfield_ji_bing_ming_cheng", "boolfield_ke_neng_zhen_duan", "boolfield_pai_chu_zhen_duan", )}), ]
    autocomplete_fields = ["boolfield_ji_bing_ming_cheng", "boolfield_ke_neng_zhen_duan", "boolfield_pai_chu_zhen_duan", ]

admin.site.register(T8901, T8901Admin)
clinic_site.register(T8901, T8901Admin)

class A6218Admin(HsscFormAdmin):
    fieldssets = [
        ("基本信息", {"fields": ((),)}), 
        ("门诊医生问诊", {"fields": ("boolfield_bing_qing_bu_chong_miao_shu", "boolfield_zheng_zhuang", )}), ]
    autocomplete_fields = ["boolfield_zheng_zhuang", ]

admin.site.register(A6218, A6218Admin)
clinic_site.register(A6218, A6218Admin)

class A6201Admin(HsscFormAdmin):
    fieldssets = [
        ("基本信息", {"fields": ((),)}), 
        ("院外咨询", {"fields": ("boolfield_bing_qing_bu_chong_miao_shu", "boolfield_zheng_zhuang", "boolfield_chang_yong_zheng_zhuang", )}), ]
    autocomplete_fields = ["boolfield_zheng_zhuang", ]

admin.site.register(A6201, A6201Admin)
clinic_site.register(A6201, A6201Admin)

class A6217Admin(HsscFormAdmin):
    fieldssets = [
        ("基本信息", {"fields": ((),)}), 
        ("院内辅助问诊", {"fields": ("boolfield_bing_qing_bu_chong_miao_shu", "boolfield_zheng_zhuang", )}), ]
    autocomplete_fields = ["boolfield_zheng_zhuang", ]

admin.site.register(A6217, A6217Admin)
clinic_site.register(A6217, A6217Admin)

class Tang_niao_bing_zi_wo_jian_ceAdmin(HsscFormAdmin):
    fieldssets = [
        ("基本信息", {"fields": ((),)}), 
        ("糖尿病自我监测", {"fields": ("boolfield_kong_fu_xue_tang", )}), ]

admin.site.register(Tang_niao_bing_zi_wo_jian_ce, Tang_niao_bing_zi_wo_jian_ceAdmin)
clinic_site.register(Tang_niao_bing_zi_wo_jian_ce, Tang_niao_bing_zi_wo_jian_ceAdmin)

class Yao_shi_fu_wuAdmin(HsscFormAdmin):
    fieldssets = [
        ("基本信息", {"fields": ((),)}), 
        ("药事服务", {"fields": ("boolfield_ji_bing_ming_cheng", "boolfield_shi_fou_ji_xu_shi_yong", "boolfield_yao_pin_ming", )}), ]
    autocomplete_fields = ["boolfield_ji_bing_ming_cheng", "boolfield_yao_pin_ming", ]
    radio_fields = {"boolfield_shi_fou_ji_xu_shi_yong": admin.VERTICAL, }

admin.site.register(Yao_shi_fu_wu, Yao_shi_fu_wuAdmin)
clinic_site.register(Yao_shi_fu_wu, Yao_shi_fu_wuAdmin)

class Tang_niao_bing_zhuan_yong_wen_zhenAdmin(HsscFormAdmin):
    fieldssets = [
        ("基本信息", {"fields": ((),)}), 
        ("糖尿病专用问诊", {"fields": ("boolfield_bing_qing_bu_chong_miao_shu", "boolfield_zheng_zhuang", "boolfield_tang_niao_bing_zheng_zhuang", )}), ]
    autocomplete_fields = ["boolfield_zheng_zhuang", ]

admin.site.register(Tang_niao_bing_zhuan_yong_wen_zhen, Tang_niao_bing_zhuan_yong_wen_zhenAdmin)
clinic_site.register(Tang_niao_bing_zhuan_yong_wen_zhen, Tang_niao_bing_zhuan_yong_wen_zhenAdmin)

class A3101Admin(HsscFormAdmin):
    fieldssets = [
        ("基本信息", {"fields": ((),)}), 
        ("诊前检查表", {"fields": ("boolfield_ti_wen", "boolfield_mai_bo", "boolfield_hu_xi_pin_lv", "boolfield_shen_gao", "boolfield_ti_zhong", "boolfield_ti_zhi_zhi_shu", "boolfield_shou_suo_ya", "boolfield_shu_zhang_ya", "boolfield_yao_wei", "boolfield_yan_bu", "boolfield_xia_zhi_shui_zhong", )}), ]
    radio_fields = {"boolfield_xia_zhi_shui_zhong": admin.VERTICAL, }

admin.site.register(A3101, A3101Admin)
clinic_site.register(A3101, A3101Admin)

class A6502Admin(HsscFormAdmin):
    fieldssets = [
        ("基本信息", {"fields": ((),)}), 
        ("门诊分诊", {"fields": ("boolfield_yu_yue_shi_jian", "boolfield_qian_dao_que_ren", "boolfield_ze_ren_ren", )}), ]
    autocomplete_fields = ["boolfield_ze_ren_ren", ]
    radio_fields = {"boolfield_qian_dao_que_ren": admin.VERTICAL, }

admin.site.register(A6502, A6502Admin)
clinic_site.register(A6502, A6502Admin)

class A6501Admin(HsscFormAdmin):
    fieldssets = [
        ("基本信息", {"fields": ((),)}), 
        ("代人预约挂号", {"fields": ("boolfield_yu_yue_shi_jian", "boolfield_ze_ren_ren", )}), ]
    autocomplete_fields = ["boolfield_ze_ren_ren", ]

admin.site.register(A6501, A6501Admin)
clinic_site.register(A6501, A6501Admin)

class Men_zhen_chu_fang_biaoAdmin(HsscFormAdmin):
    fieldssets = [
        ("基本信息", {"fields": ((),)}), 
        ("药物处方", {"fields": ("boolfield_yong_yao_pin_ci", "boolfield_chang_yong_chu_fang_liang", "boolfield_yong_yao_liao_cheng", "boolfield_yong_yao_tu_jing", "boolfield_yao_pin_ming", )}), ]
    autocomplete_fields = ["boolfield_yao_pin_ming", ]

admin.site.register(Men_zhen_chu_fang_biao, Men_zhen_chu_fang_biaoAdmin)
clinic_site.register(Men_zhen_chu_fang_biao, Men_zhen_chu_fang_biaoAdmin)

********************************************************************************
File: service/tests.py
********************************************************************************

from django.test import TestCase

# Create your tests here.

********************************************************************************
File: analytics/signals.py
********************************************************************************

from django.dispatch import Signal

object_viewed_signal = Signal(providing_args=['instance', 'request'])

# object_viewed_signal.send(instance.__class__, instance=instance, request=request)
********************************************************************************
File: analytics/mixins.py
********************************************************************************

from .signals import object_viewed_signal

class ObjectViewedMixin(object):
    def get_context_data(self, *args, **kwargs):
        context = super(ObjectViewedMixin, self).get_context_data(*args, **kwargs)
        request = self.request
        instance = context.get('object')
        if instance:
            object_viewed_signal.send(instance.__class__, instance=instance, request=request)
        return context

# import ObjectViewedMixin into your views.py
********************************************************************************
File: analytics/models.py
********************************************************************************

from django.conf import settings
from django.db import models
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes.fields import GenericForeignKey, GenericRelation
from django.contrib.sessions.models import Session

from django.contrib.auth.models import User

from django.dispatch import receiver
from django.db.models.signals import post_save
from .signals import object_viewed_signal
from .utils import get_client_ip

# User = settings.AUTH_USER_MODEL

class ObjectViewed(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, blank=True, null=True)
    ip_address = models.CharField(max_length=220, blank=True, null=True)
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    object_id = models.PositiveIntegerField()
    content_object = GenericForeignKey('content_type', 'object_id')
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return "%s viewed on %s" %(self.content_object, self.timestamp)

    class Meta:
        ordering = ['-timestamp']
        verbose_name = 'Object viewed'
        verbose_name_plural = 'Objects viewed'


def object_viewed_receiver(sender, instance, request, *args, **kwargs):
    c_type = ContentType.objects.get_for_model(sender) # instance.__class__

    new_view_obj = ObjectViewed.objects.create(
        user = request.user,
        content_type = c_type,
        object_id = instance.id,
        ip_address = get_client_ip(request)
    )

object_viewed_signal.connect(object_viewed_receiver)


class UserSession(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    ip_address = models.CharField(max_length=220, blank=True, null=True)
    session_key = models.CharField(max_length=100, blank=True, null=True)   # min_length = 50
    timestamp = models.DateTimeField(auto_now_add=True)
    active = models.BooleanField(default=True)
    ended = models.BooleanField(default=False)

    def end_session(self):
        session_key = self.session_key
        try:
            Session.objects.get(pk=session_key).delete()
            self.active = False
            self.ended = True
            self.save()
        except:
            pass
        return self.ended


# 收到UserSession保存信号
@receiver(post_save, sender=UserSession, weak=True, dispatch_uid=None)
def form_post_save_handler(sender, instance, created, **kwargs):
    # 如果用户登录，中止该用户其它会话
    if created:
        qs = sender.objects.filter(user=instance.user, ended=False).exclude(id=instance.id)
        for s in qs:
            s.end_session()


def record_login(request, user):
    # 用户登录Session登记
    ip_address = get_client_ip(request)
    session_key = request.session.session_key
    UserSession.objects.create(
        user=user,
        ip_address=ip_address,
        session_key=session_key
    )
********************************************************************************
File: analytics/__init__.py
********************************************************************************


********************************************************************************
File: analytics/apps.py
********************************************************************************

from django.apps import AppConfig


class AnalyticsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'analytics'

********************************************************************************
File: analytics/admin.py
********************************************************************************

from django.contrib import admin
from .models import ObjectViewed, UserSession


admin.site.register(ObjectViewed)

admin.site.register(UserSession)
********************************************************************************
File: analytics/utils.py
********************************************************************************

def get_client_ip(request):
    x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
    if x_forwarded_for:
        ip = x_forwarded_for.split(',')[0]
    else:
        ip = request.META.get('REMOTE_ADDR', None)
    return ip
********************************************************************************
File: analytics/tests.py
********************************************************************************

from django.test import TestCase

# Create your tests here.

********************************************************************************
File: analytics/views.py
********************************************************************************

from django.shortcuts import render

# Create your views here.
